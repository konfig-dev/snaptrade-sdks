/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// StrategyQuotesGreek struct for StrategyQuotesGreek
type StrategyQuotesGreek struct {
	Delta *float32 `json:"delta,omitempty"`
	Gamma *float32 `json:"gamma,omitempty"`
	Theta *float32 `json:"theta,omitempty"`
	Vega *float32 `json:"vega,omitempty"`
	Rho *float32 `json:"rho,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StrategyQuotesGreek StrategyQuotesGreek

// NewStrategyQuotesGreek instantiates a new StrategyQuotesGreek object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStrategyQuotesGreek() *StrategyQuotesGreek {
	this := StrategyQuotesGreek{}
	return &this
}

// NewStrategyQuotesGreekWithDefaults instantiates a new StrategyQuotesGreek object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStrategyQuotesGreekWithDefaults() *StrategyQuotesGreek {
	this := StrategyQuotesGreek{}
	return &this
}

// GetDelta returns the Delta field value if set, zero value otherwise.
func (o *StrategyQuotesGreek) GetDelta() float32 {
	if o == nil || isNil(o.Delta) {
		var ret float32
		return ret
	}
	return *o.Delta
}

// GetDeltaOk returns a tuple with the Delta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyQuotesGreek) GetDeltaOk() (*float32, bool) {
	if o == nil || isNil(o.Delta) {
    return nil, false
	}
	return o.Delta, true
}

// HasDelta returns a boolean if a field has been set.
func (o *StrategyQuotesGreek) HasDelta() bool {
	if o != nil && !isNil(o.Delta) {
		return true
	}

	return false
}

// SetDelta gets a reference to the given float32 and assigns it to the Delta field.
func (o *StrategyQuotesGreek) SetDelta(v float32) {
	o.Delta = &v
}

// GetGamma returns the Gamma field value if set, zero value otherwise.
func (o *StrategyQuotesGreek) GetGamma() float32 {
	if o == nil || isNil(o.Gamma) {
		var ret float32
		return ret
	}
	return *o.Gamma
}

// GetGammaOk returns a tuple with the Gamma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyQuotesGreek) GetGammaOk() (*float32, bool) {
	if o == nil || isNil(o.Gamma) {
    return nil, false
	}
	return o.Gamma, true
}

// HasGamma returns a boolean if a field has been set.
func (o *StrategyQuotesGreek) HasGamma() bool {
	if o != nil && !isNil(o.Gamma) {
		return true
	}

	return false
}

// SetGamma gets a reference to the given float32 and assigns it to the Gamma field.
func (o *StrategyQuotesGreek) SetGamma(v float32) {
	o.Gamma = &v
}

// GetTheta returns the Theta field value if set, zero value otherwise.
func (o *StrategyQuotesGreek) GetTheta() float32 {
	if o == nil || isNil(o.Theta) {
		var ret float32
		return ret
	}
	return *o.Theta
}

// GetThetaOk returns a tuple with the Theta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyQuotesGreek) GetThetaOk() (*float32, bool) {
	if o == nil || isNil(o.Theta) {
    return nil, false
	}
	return o.Theta, true
}

// HasTheta returns a boolean if a field has been set.
func (o *StrategyQuotesGreek) HasTheta() bool {
	if o != nil && !isNil(o.Theta) {
		return true
	}

	return false
}

// SetTheta gets a reference to the given float32 and assigns it to the Theta field.
func (o *StrategyQuotesGreek) SetTheta(v float32) {
	o.Theta = &v
}

// GetVega returns the Vega field value if set, zero value otherwise.
func (o *StrategyQuotesGreek) GetVega() float32 {
	if o == nil || isNil(o.Vega) {
		var ret float32
		return ret
	}
	return *o.Vega
}

// GetVegaOk returns a tuple with the Vega field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyQuotesGreek) GetVegaOk() (*float32, bool) {
	if o == nil || isNil(o.Vega) {
    return nil, false
	}
	return o.Vega, true
}

// HasVega returns a boolean if a field has been set.
func (o *StrategyQuotesGreek) HasVega() bool {
	if o != nil && !isNil(o.Vega) {
		return true
	}

	return false
}

// SetVega gets a reference to the given float32 and assigns it to the Vega field.
func (o *StrategyQuotesGreek) SetVega(v float32) {
	o.Vega = &v
}

// GetRho returns the Rho field value if set, zero value otherwise.
func (o *StrategyQuotesGreek) GetRho() float32 {
	if o == nil || isNil(o.Rho) {
		var ret float32
		return ret
	}
	return *o.Rho
}

// GetRhoOk returns a tuple with the Rho field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyQuotesGreek) GetRhoOk() (*float32, bool) {
	if o == nil || isNil(o.Rho) {
    return nil, false
	}
	return o.Rho, true
}

// HasRho returns a boolean if a field has been set.
func (o *StrategyQuotesGreek) HasRho() bool {
	if o != nil && !isNil(o.Rho) {
		return true
	}

	return false
}

// SetRho gets a reference to the given float32 and assigns it to the Rho field.
func (o *StrategyQuotesGreek) SetRho(v float32) {
	o.Rho = &v
}

func (o StrategyQuotesGreek) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Delta) {
		toSerialize["delta"] = o.Delta
	}
	if !isNil(o.Gamma) {
		toSerialize["gamma"] = o.Gamma
	}
	if !isNil(o.Theta) {
		toSerialize["theta"] = o.Theta
	}
	if !isNil(o.Vega) {
		toSerialize["vega"] = o.Vega
	}
	if !isNil(o.Rho) {
		toSerialize["rho"] = o.Rho
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StrategyQuotesGreek) UnmarshalJSON(bytes []byte) (err error) {
	varStrategyQuotesGreek := _StrategyQuotesGreek{}

	if err = json.Unmarshal(bytes, &varStrategyQuotesGreek); err == nil {
		*o = StrategyQuotesGreek(varStrategyQuotesGreek)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "delta")
		delete(additionalProperties, "gamma")
		delete(additionalProperties, "theta")
		delete(additionalProperties, "vega")
		delete(additionalProperties, "rho")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStrategyQuotesGreek struct {
	value *StrategyQuotesGreek
	isSet bool
}

func (v NullableStrategyQuotesGreek) Get() *StrategyQuotesGreek {
	return v.value
}

func (v *NullableStrategyQuotesGreek) Set(val *StrategyQuotesGreek) {
	v.value = val
	v.isSet = true
}

func (v NullableStrategyQuotesGreek) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategyQuotesGreek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategyQuotesGreek(val *StrategyQuotesGreek) *NullableStrategyQuotesGreek {
	return &NullableStrategyQuotesGreek{value: val, isSet: true}
}

func (v NullableStrategyQuotesGreek) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategyQuotesGreek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


