/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// StrategyOrderRecord Strategy order record
type StrategyOrderRecord struct {
	Strategy *OptionStrategy `json:"strategy,omitempty"`
	Status *string `json:"status,omitempty"`
	FilledQuantity *float32 `json:"filled_quantity,omitempty"`
	OpenQuantity *float32 `json:"open_quantity,omitempty"`
	ClosedQuantity *float32 `json:"closed_quantity,omitempty"`
	// Order Type potential values include (but are not limited to) - Limit - Market - StopLimit - StopLoss
	OrderType NullableString `json:"order_type,omitempty"`
	// Trade time in force examples:   * FOK - Fill Or Kill   * Day - Day   * GTC - Good Til Canceled   * GTD - Good Til Date 
	TimeInForce *string `json:"time_in_force,omitempty"`
	// Trade Price if limit or stop limit order
	LimitPrice NullableFloat32 `json:"limit_price,omitempty"`
	// Trade Price if limit or stop limit order
	ExecutionPrice NullableFloat32 `json:"execution_price,omitempty"`
	// Time
	TimePlaced *string `json:"time_placed,omitempty"`
	// Time
	TimeUpdated *string `json:"time_updated,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StrategyOrderRecord StrategyOrderRecord

// NewStrategyOrderRecord instantiates a new StrategyOrderRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStrategyOrderRecord() *StrategyOrderRecord {
	this := StrategyOrderRecord{}
	return &this
}

// NewStrategyOrderRecordWithDefaults instantiates a new StrategyOrderRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStrategyOrderRecordWithDefaults() *StrategyOrderRecord {
	this := StrategyOrderRecord{}
	return &this
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *StrategyOrderRecord) GetStrategy() OptionStrategy {
	if o == nil || isNil(o.Strategy) {
		var ret OptionStrategy
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyOrderRecord) GetStrategyOk() (*OptionStrategy, bool) {
	if o == nil || isNil(o.Strategy) {
    return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *StrategyOrderRecord) HasStrategy() bool {
	if o != nil && !isNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given OptionStrategy and assigns it to the Strategy field.
func (o *StrategyOrderRecord) SetStrategy(v OptionStrategy) {
	o.Strategy = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *StrategyOrderRecord) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyOrderRecord) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *StrategyOrderRecord) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *StrategyOrderRecord) SetStatus(v string) {
	o.Status = &v
}

// GetFilledQuantity returns the FilledQuantity field value if set, zero value otherwise.
func (o *StrategyOrderRecord) GetFilledQuantity() float32 {
	if o == nil || isNil(o.FilledQuantity) {
		var ret float32
		return ret
	}
	return *o.FilledQuantity
}

// GetFilledQuantityOk returns a tuple with the FilledQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyOrderRecord) GetFilledQuantityOk() (*float32, bool) {
	if o == nil || isNil(o.FilledQuantity) {
    return nil, false
	}
	return o.FilledQuantity, true
}

// HasFilledQuantity returns a boolean if a field has been set.
func (o *StrategyOrderRecord) HasFilledQuantity() bool {
	if o != nil && !isNil(o.FilledQuantity) {
		return true
	}

	return false
}

// SetFilledQuantity gets a reference to the given float32 and assigns it to the FilledQuantity field.
func (o *StrategyOrderRecord) SetFilledQuantity(v float32) {
	o.FilledQuantity = &v
}

// GetOpenQuantity returns the OpenQuantity field value if set, zero value otherwise.
func (o *StrategyOrderRecord) GetOpenQuantity() float32 {
	if o == nil || isNil(o.OpenQuantity) {
		var ret float32
		return ret
	}
	return *o.OpenQuantity
}

// GetOpenQuantityOk returns a tuple with the OpenQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyOrderRecord) GetOpenQuantityOk() (*float32, bool) {
	if o == nil || isNil(o.OpenQuantity) {
    return nil, false
	}
	return o.OpenQuantity, true
}

// HasOpenQuantity returns a boolean if a field has been set.
func (o *StrategyOrderRecord) HasOpenQuantity() bool {
	if o != nil && !isNil(o.OpenQuantity) {
		return true
	}

	return false
}

// SetOpenQuantity gets a reference to the given float32 and assigns it to the OpenQuantity field.
func (o *StrategyOrderRecord) SetOpenQuantity(v float32) {
	o.OpenQuantity = &v
}

// GetClosedQuantity returns the ClosedQuantity field value if set, zero value otherwise.
func (o *StrategyOrderRecord) GetClosedQuantity() float32 {
	if o == nil || isNil(o.ClosedQuantity) {
		var ret float32
		return ret
	}
	return *o.ClosedQuantity
}

// GetClosedQuantityOk returns a tuple with the ClosedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyOrderRecord) GetClosedQuantityOk() (*float32, bool) {
	if o == nil || isNil(o.ClosedQuantity) {
    return nil, false
	}
	return o.ClosedQuantity, true
}

// HasClosedQuantity returns a boolean if a field has been set.
func (o *StrategyOrderRecord) HasClosedQuantity() bool {
	if o != nil && !isNil(o.ClosedQuantity) {
		return true
	}

	return false
}

// SetClosedQuantity gets a reference to the given float32 and assigns it to the ClosedQuantity field.
func (o *StrategyOrderRecord) SetClosedQuantity(v float32) {
	o.ClosedQuantity = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StrategyOrderRecord) GetOrderType() string {
	if o == nil || isNil(o.OrderType.Get()) {
		var ret string
		return ret
	}
	return *o.OrderType.Get()
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StrategyOrderRecord) GetOrderTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.OrderType.Get(), o.OrderType.IsSet()
}

// HasOrderType returns a boolean if a field has been set.
func (o *StrategyOrderRecord) HasOrderType() bool {
	if o != nil && o.OrderType.IsSet() {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given NullableString and assigns it to the OrderType field.
func (o *StrategyOrderRecord) SetOrderType(v string) {
	o.OrderType.Set(&v)
}
// SetOrderTypeNil sets the value for OrderType to be an explicit nil
func (o *StrategyOrderRecord) SetOrderTypeNil() {
	o.OrderType.Set(nil)
}

// UnsetOrderType ensures that no value is present for OrderType, not even an explicit nil
func (o *StrategyOrderRecord) UnsetOrderType() {
	o.OrderType.Unset()
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *StrategyOrderRecord) GetTimeInForce() string {
	if o == nil || isNil(o.TimeInForce) {
		var ret string
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyOrderRecord) GetTimeInForceOk() (*string, bool) {
	if o == nil || isNil(o.TimeInForce) {
    return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *StrategyOrderRecord) HasTimeInForce() bool {
	if o != nil && !isNil(o.TimeInForce) {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given string and assigns it to the TimeInForce field.
func (o *StrategyOrderRecord) SetTimeInForce(v string) {
	o.TimeInForce = &v
}

// GetLimitPrice returns the LimitPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StrategyOrderRecord) GetLimitPrice() float32 {
	if o == nil || isNil(o.LimitPrice.Get()) {
		var ret float32
		return ret
	}
	return *o.LimitPrice.Get()
}

// GetLimitPriceOk returns a tuple with the LimitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StrategyOrderRecord) GetLimitPriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.LimitPrice.Get(), o.LimitPrice.IsSet()
}

// HasLimitPrice returns a boolean if a field has been set.
func (o *StrategyOrderRecord) HasLimitPrice() bool {
	if o != nil && o.LimitPrice.IsSet() {
		return true
	}

	return false
}

// SetLimitPrice gets a reference to the given NullableFloat32 and assigns it to the LimitPrice field.
func (o *StrategyOrderRecord) SetLimitPrice(v float32) {
	o.LimitPrice.Set(&v)
}
// SetLimitPriceNil sets the value for LimitPrice to be an explicit nil
func (o *StrategyOrderRecord) SetLimitPriceNil() {
	o.LimitPrice.Set(nil)
}

// UnsetLimitPrice ensures that no value is present for LimitPrice, not even an explicit nil
func (o *StrategyOrderRecord) UnsetLimitPrice() {
	o.LimitPrice.Unset()
}

// GetExecutionPrice returns the ExecutionPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StrategyOrderRecord) GetExecutionPrice() float32 {
	if o == nil || isNil(o.ExecutionPrice.Get()) {
		var ret float32
		return ret
	}
	return *o.ExecutionPrice.Get()
}

// GetExecutionPriceOk returns a tuple with the ExecutionPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StrategyOrderRecord) GetExecutionPriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ExecutionPrice.Get(), o.ExecutionPrice.IsSet()
}

// HasExecutionPrice returns a boolean if a field has been set.
func (o *StrategyOrderRecord) HasExecutionPrice() bool {
	if o != nil && o.ExecutionPrice.IsSet() {
		return true
	}

	return false
}

// SetExecutionPrice gets a reference to the given NullableFloat32 and assigns it to the ExecutionPrice field.
func (o *StrategyOrderRecord) SetExecutionPrice(v float32) {
	o.ExecutionPrice.Set(&v)
}
// SetExecutionPriceNil sets the value for ExecutionPrice to be an explicit nil
func (o *StrategyOrderRecord) SetExecutionPriceNil() {
	o.ExecutionPrice.Set(nil)
}

// UnsetExecutionPrice ensures that no value is present for ExecutionPrice, not even an explicit nil
func (o *StrategyOrderRecord) UnsetExecutionPrice() {
	o.ExecutionPrice.Unset()
}

// GetTimePlaced returns the TimePlaced field value if set, zero value otherwise.
func (o *StrategyOrderRecord) GetTimePlaced() string {
	if o == nil || isNil(o.TimePlaced) {
		var ret string
		return ret
	}
	return *o.TimePlaced
}

// GetTimePlacedOk returns a tuple with the TimePlaced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyOrderRecord) GetTimePlacedOk() (*string, bool) {
	if o == nil || isNil(o.TimePlaced) {
    return nil, false
	}
	return o.TimePlaced, true
}

// HasTimePlaced returns a boolean if a field has been set.
func (o *StrategyOrderRecord) HasTimePlaced() bool {
	if o != nil && !isNil(o.TimePlaced) {
		return true
	}

	return false
}

// SetTimePlaced gets a reference to the given string and assigns it to the TimePlaced field.
func (o *StrategyOrderRecord) SetTimePlaced(v string) {
	o.TimePlaced = &v
}

// GetTimeUpdated returns the TimeUpdated field value if set, zero value otherwise.
func (o *StrategyOrderRecord) GetTimeUpdated() string {
	if o == nil || isNil(o.TimeUpdated) {
		var ret string
		return ret
	}
	return *o.TimeUpdated
}

// GetTimeUpdatedOk returns a tuple with the TimeUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyOrderRecord) GetTimeUpdatedOk() (*string, bool) {
	if o == nil || isNil(o.TimeUpdated) {
    return nil, false
	}
	return o.TimeUpdated, true
}

// HasTimeUpdated returns a boolean if a field has been set.
func (o *StrategyOrderRecord) HasTimeUpdated() bool {
	if o != nil && !isNil(o.TimeUpdated) {
		return true
	}

	return false
}

// SetTimeUpdated gets a reference to the given string and assigns it to the TimeUpdated field.
func (o *StrategyOrderRecord) SetTimeUpdated(v string) {
	o.TimeUpdated = &v
}

func (o StrategyOrderRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.FilledQuantity) {
		toSerialize["filled_quantity"] = o.FilledQuantity
	}
	if !isNil(o.OpenQuantity) {
		toSerialize["open_quantity"] = o.OpenQuantity
	}
	if !isNil(o.ClosedQuantity) {
		toSerialize["closed_quantity"] = o.ClosedQuantity
	}
	if o.OrderType.IsSet() {
		toSerialize["order_type"] = o.OrderType.Get()
	}
	if !isNil(o.TimeInForce) {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if o.LimitPrice.IsSet() {
		toSerialize["limit_price"] = o.LimitPrice.Get()
	}
	if o.ExecutionPrice.IsSet() {
		toSerialize["execution_price"] = o.ExecutionPrice.Get()
	}
	if !isNil(o.TimePlaced) {
		toSerialize["time_placed"] = o.TimePlaced
	}
	if !isNil(o.TimeUpdated) {
		toSerialize["time_updated"] = o.TimeUpdated
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StrategyOrderRecord) UnmarshalJSON(bytes []byte) (err error) {
	varStrategyOrderRecord := _StrategyOrderRecord{}

	if err = json.Unmarshal(bytes, &varStrategyOrderRecord); err == nil {
		*o = StrategyOrderRecord(varStrategyOrderRecord)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "strategy")
		delete(additionalProperties, "status")
		delete(additionalProperties, "filled_quantity")
		delete(additionalProperties, "open_quantity")
		delete(additionalProperties, "closed_quantity")
		delete(additionalProperties, "order_type")
		delete(additionalProperties, "time_in_force")
		delete(additionalProperties, "limit_price")
		delete(additionalProperties, "execution_price")
		delete(additionalProperties, "time_placed")
		delete(additionalProperties, "time_updated")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStrategyOrderRecord struct {
	value *StrategyOrderRecord
	isSet bool
}

func (v NullableStrategyOrderRecord) Get() *StrategyOrderRecord {
	return v.value
}

func (v *NullableStrategyOrderRecord) Set(val *StrategyOrderRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableStrategyOrderRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategyOrderRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategyOrderRecord(val *StrategyOrderRecord) *NullableStrategyOrderRecord {
	return &NullableStrategyOrderRecord{value: val, isSet: true}
}

func (v NullableStrategyOrderRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategyOrderRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


