/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// ModelAssetClassDetails struct for ModelAssetClassDetails
type ModelAssetClassDetails struct {
	ModelAssetClass *ModelAssetClass `json:"model_asset_class,omitempty"`
	ModelAssetClassTarget []ModelAssetClassTarget `json:"model_asset_class_target,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelAssetClassDetails ModelAssetClassDetails

// NewModelAssetClassDetails instantiates a new ModelAssetClassDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelAssetClassDetails() *ModelAssetClassDetails {
	this := ModelAssetClassDetails{}
	return &this
}

// NewModelAssetClassDetailsWithDefaults instantiates a new ModelAssetClassDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelAssetClassDetailsWithDefaults() *ModelAssetClassDetails {
	this := ModelAssetClassDetails{}
	return &this
}

// GetModelAssetClass returns the ModelAssetClass field value if set, zero value otherwise.
func (o *ModelAssetClassDetails) GetModelAssetClass() ModelAssetClass {
	if o == nil || isNil(o.ModelAssetClass) {
		var ret ModelAssetClass
		return ret
	}
	return *o.ModelAssetClass
}

// GetModelAssetClassOk returns a tuple with the ModelAssetClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAssetClassDetails) GetModelAssetClassOk() (*ModelAssetClass, bool) {
	if o == nil || isNil(o.ModelAssetClass) {
    return nil, false
	}
	return o.ModelAssetClass, true
}

// HasModelAssetClass returns a boolean if a field has been set.
func (o *ModelAssetClassDetails) HasModelAssetClass() bool {
	if o != nil && !isNil(o.ModelAssetClass) {
		return true
	}

	return false
}

// SetModelAssetClass gets a reference to the given ModelAssetClass and assigns it to the ModelAssetClass field.
func (o *ModelAssetClassDetails) SetModelAssetClass(v ModelAssetClass) {
	o.ModelAssetClass = &v
}

// GetModelAssetClassTarget returns the ModelAssetClassTarget field value if set, zero value otherwise.
func (o *ModelAssetClassDetails) GetModelAssetClassTarget() []ModelAssetClassTarget {
	if o == nil || isNil(o.ModelAssetClassTarget) {
		var ret []ModelAssetClassTarget
		return ret
	}
	return o.ModelAssetClassTarget
}

// GetModelAssetClassTargetOk returns a tuple with the ModelAssetClassTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAssetClassDetails) GetModelAssetClassTargetOk() ([]ModelAssetClassTarget, bool) {
	if o == nil || isNil(o.ModelAssetClassTarget) {
    return nil, false
	}
	return o.ModelAssetClassTarget, true
}

// HasModelAssetClassTarget returns a boolean if a field has been set.
func (o *ModelAssetClassDetails) HasModelAssetClassTarget() bool {
	if o != nil && !isNil(o.ModelAssetClassTarget) {
		return true
	}

	return false
}

// SetModelAssetClassTarget gets a reference to the given []ModelAssetClassTarget and assigns it to the ModelAssetClassTarget field.
func (o *ModelAssetClassDetails) SetModelAssetClassTarget(v []ModelAssetClassTarget) {
	o.ModelAssetClassTarget = v
}

func (o ModelAssetClassDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ModelAssetClass) {
		toSerialize["model_asset_class"] = o.ModelAssetClass
	}
	if !isNil(o.ModelAssetClassTarget) {
		toSerialize["model_asset_class_target"] = o.ModelAssetClassTarget
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ModelAssetClassDetails) UnmarshalJSON(bytes []byte) (err error) {
	varModelAssetClassDetails := _ModelAssetClassDetails{}

	if err = json.Unmarshal(bytes, &varModelAssetClassDetails); err == nil {
		*o = ModelAssetClassDetails(varModelAssetClassDetails)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "model_asset_class")
		delete(additionalProperties, "model_asset_class_target")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelAssetClassDetails struct {
	value *ModelAssetClassDetails
	isSet bool
}

func (v NullableModelAssetClassDetails) Get() *ModelAssetClassDetails {
	return v.value
}

func (v *NullableModelAssetClassDetails) Set(val *ModelAssetClassDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAssetClassDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAssetClassDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAssetClassDetails(val *ModelAssetClassDetails) *NullableModelAssetClassDetails {
	return &NullableModelAssetClassDetails{value: val, isSet: true}
}

func (v NullableModelAssetClassDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAssetClassDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


