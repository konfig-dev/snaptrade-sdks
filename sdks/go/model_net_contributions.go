/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// NetContributions struct for NetContributions
type NetContributions struct {
	// Date used to specify timeframe for a reporting call (in YYYY-MM-DD format)
	Date *string `json:"date,omitempty"`
	Contributions NullableFloat32 `json:"contributions,omitempty"`
	Currency *string `json:"currency,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetContributions NetContributions

// NewNetContributions instantiates a new NetContributions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetContributions() *NetContributions {
	this := NetContributions{}
	return &this
}

// NewNetContributionsWithDefaults instantiates a new NetContributions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetContributionsWithDefaults() *NetContributions {
	this := NetContributions{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *NetContributions) GetDate() string {
	if o == nil || isNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetContributions) GetDateOk() (*string, bool) {
	if o == nil || isNil(o.Date) {
    return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *NetContributions) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *NetContributions) SetDate(v string) {
	o.Date = &v
}

// GetContributions returns the Contributions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetContributions) GetContributions() float32 {
	if o == nil || isNil(o.Contributions.Get()) {
		var ret float32
		return ret
	}
	return *o.Contributions.Get()
}

// GetContributionsOk returns a tuple with the Contributions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetContributions) GetContributionsOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Contributions.Get(), o.Contributions.IsSet()
}

// HasContributions returns a boolean if a field has been set.
func (o *NetContributions) HasContributions() bool {
	if o != nil && o.Contributions.IsSet() {
		return true
	}

	return false
}

// SetContributions gets a reference to the given NullableFloat32 and assigns it to the Contributions field.
func (o *NetContributions) SetContributions(v float32) {
	o.Contributions.Set(&v)
}
// SetContributionsNil sets the value for Contributions to be an explicit nil
func (o *NetContributions) SetContributionsNil() {
	o.Contributions.Set(nil)
}

// UnsetContributions ensures that no value is present for Contributions, not even an explicit nil
func (o *NetContributions) UnsetContributions() {
	o.Contributions.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *NetContributions) GetCurrency() string {
	if o == nil || isNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetContributions) GetCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *NetContributions) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *NetContributions) SetCurrency(v string) {
	o.Currency = &v
}

func (o NetContributions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if o.Contributions.IsSet() {
		toSerialize["contributions"] = o.Contributions.Get()
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NetContributions) UnmarshalJSON(bytes []byte) (err error) {
	varNetContributions := _NetContributions{}

	if err = json.Unmarshal(bytes, &varNetContributions); err == nil {
		*o = NetContributions(varNetContributions)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "date")
		delete(additionalProperties, "contributions")
		delete(additionalProperties, "currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetContributions struct {
	value *NetContributions
	isSet bool
}

func (v NullableNetContributions) Get() *NetContributions {
	return v.value
}

func (v *NullableNetContributions) Set(val *NetContributions) {
	v.value = val
	v.isSet = true
}

func (v NullableNetContributions) IsSet() bool {
	return v.isSet
}

func (v *NullableNetContributions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetContributions(val *NetContributions) *NullableNetContributions {
	return &NullableNetContributions{value: val, isSet: true}
}

func (v NullableNetContributions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetContributions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


