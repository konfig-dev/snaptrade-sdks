/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// JWT JWT Token. Used to acess resources in private endpoints available only through the Passiv app
type JWT struct {
	Token *string `json:"token,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JWT JWT

// NewJWT instantiates a new JWT object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJWT() *JWT {
	this := JWT{}
	return &this
}

// NewJWTWithDefaults instantiates a new JWT object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJWTWithDefaults() *JWT {
	this := JWT{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *JWT) GetToken() string {
	if o == nil || isNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWT) GetTokenOk() (*string, bool) {
	if o == nil || isNil(o.Token) {
    return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *JWT) HasToken() bool {
	if o != nil && !isNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *JWT) SetToken(v string) {
	o.Token = &v
}

func (o JWT) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Token) {
		toSerialize["token"] = o.Token
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *JWT) UnmarshalJSON(bytes []byte) (err error) {
	varJWT := _JWT{}

	if err = json.Unmarshal(bytes, &varJWT); err == nil {
		*o = JWT(varJWT)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJWT struct {
	value *JWT
	isSet bool
}

func (v NullableJWT) Get() *JWT {
	return v.value
}

func (v *NullableJWT) Set(val *JWT) {
	v.value = val
	v.isSet = true
}

func (v NullableJWT) IsSet() bool {
	return v.isSet
}

func (v *NullableJWT) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJWT(val *JWT) *NullableJWT {
	return &NullableJWT{value: val, isSet: true}
}

func (v NullableJWT) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJWT) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


