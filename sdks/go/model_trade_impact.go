/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// TradeImpact Impact of a group of trade
type TradeImpact struct {
	Account *Account `json:"account,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
	// Remaining balance after executing all trades
	RemainingCash *float32 `json:"remaining_cash,omitempty"`
	// Total estimated commissions across all trades to make
	EstimatedCommissions *float32 `json:"estimated_commissions,omitempty"`
	// Estimated forex fees to pay to excute trades
	ForexFees *float32 `json:"forex_fees,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TradeImpact TradeImpact

// NewTradeImpact instantiates a new TradeImpact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTradeImpact() *TradeImpact {
	this := TradeImpact{}
	return &this
}

// NewTradeImpactWithDefaults instantiates a new TradeImpact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradeImpactWithDefaults() *TradeImpact {
	this := TradeImpact{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *TradeImpact) GetAccount() Account {
	if o == nil || isNil(o.Account) {
		var ret Account
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeImpact) GetAccountOk() (*Account, bool) {
	if o == nil || isNil(o.Account) {
    return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *TradeImpact) HasAccount() bool {
	if o != nil && !isNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given Account and assigns it to the Account field.
func (o *TradeImpact) SetAccount(v Account) {
	o.Account = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *TradeImpact) GetCurrency() Currency {
	if o == nil || isNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeImpact) GetCurrencyOk() (*Currency, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *TradeImpact) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *TradeImpact) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetRemainingCash returns the RemainingCash field value if set, zero value otherwise.
func (o *TradeImpact) GetRemainingCash() float32 {
	if o == nil || isNil(o.RemainingCash) {
		var ret float32
		return ret
	}
	return *o.RemainingCash
}

// GetRemainingCashOk returns a tuple with the RemainingCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeImpact) GetRemainingCashOk() (*float32, bool) {
	if o == nil || isNil(o.RemainingCash) {
    return nil, false
	}
	return o.RemainingCash, true
}

// HasRemainingCash returns a boolean if a field has been set.
func (o *TradeImpact) HasRemainingCash() bool {
	if o != nil && !isNil(o.RemainingCash) {
		return true
	}

	return false
}

// SetRemainingCash gets a reference to the given float32 and assigns it to the RemainingCash field.
func (o *TradeImpact) SetRemainingCash(v float32) {
	o.RemainingCash = &v
}

// GetEstimatedCommissions returns the EstimatedCommissions field value if set, zero value otherwise.
func (o *TradeImpact) GetEstimatedCommissions() float32 {
	if o == nil || isNil(o.EstimatedCommissions) {
		var ret float32
		return ret
	}
	return *o.EstimatedCommissions
}

// GetEstimatedCommissionsOk returns a tuple with the EstimatedCommissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeImpact) GetEstimatedCommissionsOk() (*float32, bool) {
	if o == nil || isNil(o.EstimatedCommissions) {
    return nil, false
	}
	return o.EstimatedCommissions, true
}

// HasEstimatedCommissions returns a boolean if a field has been set.
func (o *TradeImpact) HasEstimatedCommissions() bool {
	if o != nil && !isNil(o.EstimatedCommissions) {
		return true
	}

	return false
}

// SetEstimatedCommissions gets a reference to the given float32 and assigns it to the EstimatedCommissions field.
func (o *TradeImpact) SetEstimatedCommissions(v float32) {
	o.EstimatedCommissions = &v
}

// GetForexFees returns the ForexFees field value if set, zero value otherwise.
func (o *TradeImpact) GetForexFees() float32 {
	if o == nil || isNil(o.ForexFees) {
		var ret float32
		return ret
	}
	return *o.ForexFees
}

// GetForexFeesOk returns a tuple with the ForexFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeImpact) GetForexFeesOk() (*float32, bool) {
	if o == nil || isNil(o.ForexFees) {
    return nil, false
	}
	return o.ForexFees, true
}

// HasForexFees returns a boolean if a field has been set.
func (o *TradeImpact) HasForexFees() bool {
	if o != nil && !isNil(o.ForexFees) {
		return true
	}

	return false
}

// SetForexFees gets a reference to the given float32 and assigns it to the ForexFees field.
func (o *TradeImpact) SetForexFees(v float32) {
	o.ForexFees = &v
}

func (o TradeImpact) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !isNil(o.RemainingCash) {
		toSerialize["remaining_cash"] = o.RemainingCash
	}
	if !isNil(o.EstimatedCommissions) {
		toSerialize["estimated_commissions"] = o.EstimatedCommissions
	}
	if !isNil(o.ForexFees) {
		toSerialize["forex_fees"] = o.ForexFees
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TradeImpact) UnmarshalJSON(bytes []byte) (err error) {
	varTradeImpact := _TradeImpact{}

	if err = json.Unmarshal(bytes, &varTradeImpact); err == nil {
		*o = TradeImpact(varTradeImpact)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "account")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "remaining_cash")
		delete(additionalProperties, "estimated_commissions")
		delete(additionalProperties, "forex_fees")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTradeImpact struct {
	value *TradeImpact
	isSet bool
}

func (v NullableTradeImpact) Get() *TradeImpact {
	return v.value
}

func (v *NullableTradeImpact) Set(val *TradeImpact) {
	v.value = val
	v.isSet = true
}

func (v NullableTradeImpact) IsSet() bool {
	return v.isSet
}

func (v *NullableTradeImpact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradeImpact(val *TradeImpact) *NullableTradeImpact {
	return &NullableTradeImpact{value: val, isSet: true}
}

func (v NullableTradeImpact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradeImpact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


