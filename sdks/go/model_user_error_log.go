/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// UserErrorLog An API error log for a specific SnapTrade user.
type UserErrorLog struct {
	RequestedAt *string `json:"requestedAt,omitempty"`
	Response *string `json:"response,omitempty"`
	StatusCode *float32 `json:"statusCode,omitempty"`
	QueryParams *string `json:"queryParams,omitempty"`
	HttpMethod *string `json:"httpMethod,omitempty"`
	Endpoint *string `json:"endpoint,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserErrorLog UserErrorLog

// NewUserErrorLog instantiates a new UserErrorLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserErrorLog() *UserErrorLog {
	this := UserErrorLog{}
	return &this
}

// NewUserErrorLogWithDefaults instantiates a new UserErrorLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserErrorLogWithDefaults() *UserErrorLog {
	this := UserErrorLog{}
	return &this
}

// GetRequestedAt returns the RequestedAt field value if set, zero value otherwise.
func (o *UserErrorLog) GetRequestedAt() string {
	if o == nil || isNil(o.RequestedAt) {
		var ret string
		return ret
	}
	return *o.RequestedAt
}

// GetRequestedAtOk returns a tuple with the RequestedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserErrorLog) GetRequestedAtOk() (*string, bool) {
	if o == nil || isNil(o.RequestedAt) {
    return nil, false
	}
	return o.RequestedAt, true
}

// HasRequestedAt returns a boolean if a field has been set.
func (o *UserErrorLog) HasRequestedAt() bool {
	if o != nil && !isNil(o.RequestedAt) {
		return true
	}

	return false
}

// SetRequestedAt gets a reference to the given string and assigns it to the RequestedAt field.
func (o *UserErrorLog) SetRequestedAt(v string) {
	o.RequestedAt = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *UserErrorLog) GetResponse() string {
	if o == nil || isNil(o.Response) {
		var ret string
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserErrorLog) GetResponseOk() (*string, bool) {
	if o == nil || isNil(o.Response) {
    return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *UserErrorLog) HasResponse() bool {
	if o != nil && !isNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given string and assigns it to the Response field.
func (o *UserErrorLog) SetResponse(v string) {
	o.Response = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *UserErrorLog) GetStatusCode() float32 {
	if o == nil || isNil(o.StatusCode) {
		var ret float32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserErrorLog) GetStatusCodeOk() (*float32, bool) {
	if o == nil || isNil(o.StatusCode) {
    return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *UserErrorLog) HasStatusCode() bool {
	if o != nil && !isNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given float32 and assigns it to the StatusCode field.
func (o *UserErrorLog) SetStatusCode(v float32) {
	o.StatusCode = &v
}

// GetQueryParams returns the QueryParams field value if set, zero value otherwise.
func (o *UserErrorLog) GetQueryParams() string {
	if o == nil || isNil(o.QueryParams) {
		var ret string
		return ret
	}
	return *o.QueryParams
}

// GetQueryParamsOk returns a tuple with the QueryParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserErrorLog) GetQueryParamsOk() (*string, bool) {
	if o == nil || isNil(o.QueryParams) {
    return nil, false
	}
	return o.QueryParams, true
}

// HasQueryParams returns a boolean if a field has been set.
func (o *UserErrorLog) HasQueryParams() bool {
	if o != nil && !isNil(o.QueryParams) {
		return true
	}

	return false
}

// SetQueryParams gets a reference to the given string and assigns it to the QueryParams field.
func (o *UserErrorLog) SetQueryParams(v string) {
	o.QueryParams = &v
}

// GetHttpMethod returns the HttpMethod field value if set, zero value otherwise.
func (o *UserErrorLog) GetHttpMethod() string {
	if o == nil || isNil(o.HttpMethod) {
		var ret string
		return ret
	}
	return *o.HttpMethod
}

// GetHttpMethodOk returns a tuple with the HttpMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserErrorLog) GetHttpMethodOk() (*string, bool) {
	if o == nil || isNil(o.HttpMethod) {
    return nil, false
	}
	return o.HttpMethod, true
}

// HasHttpMethod returns a boolean if a field has been set.
func (o *UserErrorLog) HasHttpMethod() bool {
	if o != nil && !isNil(o.HttpMethod) {
		return true
	}

	return false
}

// SetHttpMethod gets a reference to the given string and assigns it to the HttpMethod field.
func (o *UserErrorLog) SetHttpMethod(v string) {
	o.HttpMethod = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *UserErrorLog) GetEndpoint() string {
	if o == nil || isNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserErrorLog) GetEndpointOk() (*string, bool) {
	if o == nil || isNil(o.Endpoint) {
    return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *UserErrorLog) HasEndpoint() bool {
	if o != nil && !isNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *UserErrorLog) SetEndpoint(v string) {
	o.Endpoint = &v
}

func (o UserErrorLog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RequestedAt) {
		toSerialize["requestedAt"] = o.RequestedAt
	}
	if !isNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !isNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	if !isNil(o.QueryParams) {
		toSerialize["queryParams"] = o.QueryParams
	}
	if !isNil(o.HttpMethod) {
		toSerialize["httpMethod"] = o.HttpMethod
	}
	if !isNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UserErrorLog) UnmarshalJSON(bytes []byte) (err error) {
	varUserErrorLog := _UserErrorLog{}

	if err = json.Unmarshal(bytes, &varUserErrorLog); err == nil {
		*o = UserErrorLog(varUserErrorLog)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "requestedAt")
		delete(additionalProperties, "response")
		delete(additionalProperties, "statusCode")
		delete(additionalProperties, "queryParams")
		delete(additionalProperties, "httpMethod")
		delete(additionalProperties, "endpoint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserErrorLog struct {
	value *UserErrorLog
	isSet bool
}

func (v NullableUserErrorLog) Get() *UserErrorLog {
	return v.value
}

func (v *NullableUserErrorLog) Set(val *UserErrorLog) {
	v.value = val
	v.isSet = true
}

func (v NullableUserErrorLog) IsSet() bool {
	return v.isSet
}

func (v *NullableUserErrorLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserErrorLog(val *UserErrorLog) *NullableUserErrorLog {
	return &NullableUserErrorLog{value: val, isSet: true}
}

func (v NullableUserErrorLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserErrorLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


