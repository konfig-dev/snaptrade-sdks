/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// TradeExecutionStatus Execution status of a trade
type TradeExecutionStatus struct {
	Symbol *BrokerageSymbol `json:"symbol,omitempty"`
	UniversalSymbol *UniversalSymbol `json:"universal_symbol,omitempty"`
	Trade *Trade `json:"trade,omitempty"`
	// Execution state of a trade
	State *string `json:"state,omitempty"`
	// Number of filled units
	FilledUnits *int32 `json:"filled_units,omitempty"`
	// Action of executed trade
	Action *string `json:"action,omitempty"`
	// Price of execution
	Price *float32 `json:"price,omitempty"`
	// Fees paid from executing trade
	Commissions *float32 `json:"commissions,omitempty"`
	// Other misc. data
	Meta map[string]interface{} `json:"meta,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TradeExecutionStatus TradeExecutionStatus

// NewTradeExecutionStatus instantiates a new TradeExecutionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTradeExecutionStatus() *TradeExecutionStatus {
	this := TradeExecutionStatus{}
	return &this
}

// NewTradeExecutionStatusWithDefaults instantiates a new TradeExecutionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradeExecutionStatusWithDefaults() *TradeExecutionStatus {
	this := TradeExecutionStatus{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *TradeExecutionStatus) GetSymbol() BrokerageSymbol {
	if o == nil || isNil(o.Symbol) {
		var ret BrokerageSymbol
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeExecutionStatus) GetSymbolOk() (*BrokerageSymbol, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *TradeExecutionStatus) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given BrokerageSymbol and assigns it to the Symbol field.
func (o *TradeExecutionStatus) SetSymbol(v BrokerageSymbol) {
	o.Symbol = &v
}

// GetUniversalSymbol returns the UniversalSymbol field value if set, zero value otherwise.
func (o *TradeExecutionStatus) GetUniversalSymbol() UniversalSymbol {
	if o == nil || isNil(o.UniversalSymbol) {
		var ret UniversalSymbol
		return ret
	}
	return *o.UniversalSymbol
}

// GetUniversalSymbolOk returns a tuple with the UniversalSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeExecutionStatus) GetUniversalSymbolOk() (*UniversalSymbol, bool) {
	if o == nil || isNil(o.UniversalSymbol) {
    return nil, false
	}
	return o.UniversalSymbol, true
}

// HasUniversalSymbol returns a boolean if a field has been set.
func (o *TradeExecutionStatus) HasUniversalSymbol() bool {
	if o != nil && !isNil(o.UniversalSymbol) {
		return true
	}

	return false
}

// SetUniversalSymbol gets a reference to the given UniversalSymbol and assigns it to the UniversalSymbol field.
func (o *TradeExecutionStatus) SetUniversalSymbol(v UniversalSymbol) {
	o.UniversalSymbol = &v
}

// GetTrade returns the Trade field value if set, zero value otherwise.
func (o *TradeExecutionStatus) GetTrade() Trade {
	if o == nil || isNil(o.Trade) {
		var ret Trade
		return ret
	}
	return *o.Trade
}

// GetTradeOk returns a tuple with the Trade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeExecutionStatus) GetTradeOk() (*Trade, bool) {
	if o == nil || isNil(o.Trade) {
    return nil, false
	}
	return o.Trade, true
}

// HasTrade returns a boolean if a field has been set.
func (o *TradeExecutionStatus) HasTrade() bool {
	if o != nil && !isNil(o.Trade) {
		return true
	}

	return false
}

// SetTrade gets a reference to the given Trade and assigns it to the Trade field.
func (o *TradeExecutionStatus) SetTrade(v Trade) {
	o.Trade = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *TradeExecutionStatus) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeExecutionStatus) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
    return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *TradeExecutionStatus) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *TradeExecutionStatus) SetState(v string) {
	o.State = &v
}

// GetFilledUnits returns the FilledUnits field value if set, zero value otherwise.
func (o *TradeExecutionStatus) GetFilledUnits() int32 {
	if o == nil || isNil(o.FilledUnits) {
		var ret int32
		return ret
	}
	return *o.FilledUnits
}

// GetFilledUnitsOk returns a tuple with the FilledUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeExecutionStatus) GetFilledUnitsOk() (*int32, bool) {
	if o == nil || isNil(o.FilledUnits) {
    return nil, false
	}
	return o.FilledUnits, true
}

// HasFilledUnits returns a boolean if a field has been set.
func (o *TradeExecutionStatus) HasFilledUnits() bool {
	if o != nil && !isNil(o.FilledUnits) {
		return true
	}

	return false
}

// SetFilledUnits gets a reference to the given int32 and assigns it to the FilledUnits field.
func (o *TradeExecutionStatus) SetFilledUnits(v int32) {
	o.FilledUnits = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *TradeExecutionStatus) GetAction() string {
	if o == nil || isNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeExecutionStatus) GetActionOk() (*string, bool) {
	if o == nil || isNil(o.Action) {
    return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *TradeExecutionStatus) HasAction() bool {
	if o != nil && !isNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *TradeExecutionStatus) SetAction(v string) {
	o.Action = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *TradeExecutionStatus) GetPrice() float32 {
	if o == nil || isNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeExecutionStatus) GetPriceOk() (*float32, bool) {
	if o == nil || isNil(o.Price) {
    return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *TradeExecutionStatus) HasPrice() bool {
	if o != nil && !isNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *TradeExecutionStatus) SetPrice(v float32) {
	o.Price = &v
}

// GetCommissions returns the Commissions field value if set, zero value otherwise.
func (o *TradeExecutionStatus) GetCommissions() float32 {
	if o == nil || isNil(o.Commissions) {
		var ret float32
		return ret
	}
	return *o.Commissions
}

// GetCommissionsOk returns a tuple with the Commissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeExecutionStatus) GetCommissionsOk() (*float32, bool) {
	if o == nil || isNil(o.Commissions) {
    return nil, false
	}
	return o.Commissions, true
}

// HasCommissions returns a boolean if a field has been set.
func (o *TradeExecutionStatus) HasCommissions() bool {
	if o != nil && !isNil(o.Commissions) {
		return true
	}

	return false
}

// SetCommissions gets a reference to the given float32 and assigns it to the Commissions field.
func (o *TradeExecutionStatus) SetCommissions(v float32) {
	o.Commissions = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *TradeExecutionStatus) GetMeta() map[string]interface{} {
	if o == nil || isNil(o.Meta) {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradeExecutionStatus) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Meta) {
    return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *TradeExecutionStatus) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *TradeExecutionStatus) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

func (o TradeExecutionStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !isNil(o.UniversalSymbol) {
		toSerialize["universal_symbol"] = o.UniversalSymbol
	}
	if !isNil(o.Trade) {
		toSerialize["trade"] = o.Trade
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.FilledUnits) {
		toSerialize["filled_units"] = o.FilledUnits
	}
	if !isNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !isNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !isNil(o.Commissions) {
		toSerialize["commissions"] = o.Commissions
	}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TradeExecutionStatus) UnmarshalJSON(bytes []byte) (err error) {
	varTradeExecutionStatus := _TradeExecutionStatus{}

	if err = json.Unmarshal(bytes, &varTradeExecutionStatus); err == nil {
		*o = TradeExecutionStatus(varTradeExecutionStatus)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "universal_symbol")
		delete(additionalProperties, "trade")
		delete(additionalProperties, "state")
		delete(additionalProperties, "filled_units")
		delete(additionalProperties, "action")
		delete(additionalProperties, "price")
		delete(additionalProperties, "commissions")
		delete(additionalProperties, "meta")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTradeExecutionStatus struct {
	value *TradeExecutionStatus
	isSet bool
}

func (v NullableTradeExecutionStatus) Get() *TradeExecutionStatus {
	return v.value
}

func (v *NullableTradeExecutionStatus) Set(val *TradeExecutionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTradeExecutionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTradeExecutionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradeExecutionStatus(val *TradeExecutionStatus) *NullableTradeExecutionStatus {
	return &NullableTradeExecutionStatus{value: val, isSet: true}
}

func (v NullableTradeExecutionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradeExecutionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


