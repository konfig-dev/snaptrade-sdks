/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// OptionStrategyLegsInner struct for OptionStrategyLegsInner
type OptionStrategyLegsInner struct {
	OptionSymbolId *string `json:"option_symbol_id,omitempty"`
	Index *float32 `json:"index,omitempty"`
	Action *string `json:"action,omitempty"`
	Quantity *float32 `json:"quantity,omitempty"`
}

// NewOptionStrategyLegsInner instantiates a new OptionStrategyLegsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionStrategyLegsInner() *OptionStrategyLegsInner {
	this := OptionStrategyLegsInner{}
	return &this
}

// NewOptionStrategyLegsInnerWithDefaults instantiates a new OptionStrategyLegsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionStrategyLegsInnerWithDefaults() *OptionStrategyLegsInner {
	this := OptionStrategyLegsInner{}
	return &this
}

// GetOptionSymbolId returns the OptionSymbolId field value if set, zero value otherwise.
func (o *OptionStrategyLegsInner) GetOptionSymbolId() string {
	if o == nil || isNil(o.OptionSymbolId) {
		var ret string
		return ret
	}
	return *o.OptionSymbolId
}

// GetOptionSymbolIdOk returns a tuple with the OptionSymbolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionStrategyLegsInner) GetOptionSymbolIdOk() (*string, bool) {
	if o == nil || isNil(o.OptionSymbolId) {
    return nil, false
	}
	return o.OptionSymbolId, true
}

// HasOptionSymbolId returns a boolean if a field has been set.
func (o *OptionStrategyLegsInner) HasOptionSymbolId() bool {
	if o != nil && !isNil(o.OptionSymbolId) {
		return true
	}

	return false
}

// SetOptionSymbolId gets a reference to the given string and assigns it to the OptionSymbolId field.
func (o *OptionStrategyLegsInner) SetOptionSymbolId(v string) {
	o.OptionSymbolId = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *OptionStrategyLegsInner) GetIndex() float32 {
	if o == nil || isNil(o.Index) {
		var ret float32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionStrategyLegsInner) GetIndexOk() (*float32, bool) {
	if o == nil || isNil(o.Index) {
    return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *OptionStrategyLegsInner) HasIndex() bool {
	if o != nil && !isNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given float32 and assigns it to the Index field.
func (o *OptionStrategyLegsInner) SetIndex(v float32) {
	o.Index = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *OptionStrategyLegsInner) GetAction() string {
	if o == nil || isNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionStrategyLegsInner) GetActionOk() (*string, bool) {
	if o == nil || isNil(o.Action) {
    return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *OptionStrategyLegsInner) HasAction() bool {
	if o != nil && !isNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *OptionStrategyLegsInner) SetAction(v string) {
	o.Action = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *OptionStrategyLegsInner) GetQuantity() float32 {
	if o == nil || isNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionStrategyLegsInner) GetQuantityOk() (*float32, bool) {
	if o == nil || isNil(o.Quantity) {
    return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *OptionStrategyLegsInner) HasQuantity() bool {
	if o != nil && !isNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *OptionStrategyLegsInner) SetQuantity(v float32) {
	o.Quantity = &v
}

func (o OptionStrategyLegsInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.OptionSymbolId) {
		toSerialize["option_symbol_id"] = o.OptionSymbolId
	}
	if !isNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !isNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !isNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return json.Marshal(toSerialize)
}

type NullableOptionStrategyLegsInner struct {
	value *OptionStrategyLegsInner
	isSet bool
}

func (v NullableOptionStrategyLegsInner) Get() *OptionStrategyLegsInner {
	return v.value
}

func (v *NullableOptionStrategyLegsInner) Set(val *OptionStrategyLegsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionStrategyLegsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionStrategyLegsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionStrategyLegsInner(val *OptionStrategyLegsInner) *NullableOptionStrategyLegsInner {
	return &NullableOptionStrategyLegsInner{value: val, isSet: true}
}

func (v NullableOptionStrategyLegsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionStrategyLegsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


