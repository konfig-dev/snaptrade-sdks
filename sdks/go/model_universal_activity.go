/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// UniversalActivity A transaction or activity from an institution
type UniversalActivity struct {
	Id *string `json:"id,omitempty"`
	Account *AccountSimple `json:"account,omitempty"`
	Amount NullableFloat32 `json:"amount,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
	Description *string `json:"description,omitempty"`
	Fee *float32 `json:"fee,omitempty"`
	// The forex conversion rate involved in the transaction if provided by the brokerage. Used in cases where securities of one currency are purchased in a different currency, and the forex conversion is automatic. In those cases, price, amount and fee will be in the top level currency (activity -> currency)
	FxRate NullableFloat32 `json:"fx_rate,omitempty"`
	Institution *string `json:"institution,omitempty"`
	// If an option transaction, then it's type (BUY_TO_OPEN, SELL_TO_CLOSE, etc), otherwise empty string
	OptionType *string `json:"option_type,omitempty"`
	Price *float32 `json:"price,omitempty"`
	SettlementDate *string `json:"settlement_date,omitempty"`
	// Reference ID from brokerage used to identify related transactions. For example if an order comprises of several transactions (buy, fee, fx), they can be grouped if they share the same external_reference_id
	ExternalReferenceId NullableString `json:"external_reference_id,omitempty"`
	Symbol *Symbol `json:"symbol,omitempty"`
	OptionSymbol *OptionsSymbol `json:"option_symbol,omitempty"`
	TradeDate NullableString `json:"trade_date,omitempty"`
	// Potential values include (but are not limited to) - DIVIDEND - BUY - SELL - CONTRIBUTION - WITHDRAWAL - EXTERNAL_ASSET_TRANSFER_IN - EXTERNAL_ASSET_TRANSFER_OUT - INTERNAL_CASH_TRANSFER_IN - INTERNAL_CASH_TRANSFER_OUT - INTERNAL_ASSET_TRANSFER_IN - INTERNAL_ASSET_TRANSFER_OUT - INTEREST - REBATE - GOV_GRANT - TAX - FEE - REI - FXT
	Type *string `json:"type,omitempty"`
	// Usually but not necessarily an integer
	Units *float32 `json:"units,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UniversalActivity UniversalActivity

// NewUniversalActivity instantiates a new UniversalActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniversalActivity() *UniversalActivity {
	this := UniversalActivity{}
	return &this
}

// NewUniversalActivityWithDefaults instantiates a new UniversalActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniversalActivityWithDefaults() *UniversalActivity {
	this := UniversalActivity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UniversalActivity) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UniversalActivity) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UniversalActivity) SetId(v string) {
	o.Id = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *UniversalActivity) GetAccount() AccountSimple {
	if o == nil || isNil(o.Account) {
		var ret AccountSimple
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetAccountOk() (*AccountSimple, bool) {
	if o == nil || isNil(o.Account) {
    return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *UniversalActivity) HasAccount() bool {
	if o != nil && !isNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given AccountSimple and assigns it to the Account field.
func (o *UniversalActivity) SetAccount(v AccountSimple) {
	o.Account = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniversalActivity) GetAmount() float32 {
	if o == nil || isNil(o.Amount.Get()) {
		var ret float32
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniversalActivity) GetAmountOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *UniversalActivity) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableFloat32 and assigns it to the Amount field.
func (o *UniversalActivity) SetAmount(v float32) {
	o.Amount.Set(&v)
}
// SetAmountNil sets the value for Amount to be an explicit nil
func (o *UniversalActivity) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *UniversalActivity) UnsetAmount() {
	o.Amount.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *UniversalActivity) GetCurrency() Currency {
	if o == nil || isNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetCurrencyOk() (*Currency, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *UniversalActivity) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *UniversalActivity) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UniversalActivity) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UniversalActivity) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UniversalActivity) SetDescription(v string) {
	o.Description = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *UniversalActivity) GetFee() float32 {
	if o == nil || isNil(o.Fee) {
		var ret float32
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetFeeOk() (*float32, bool) {
	if o == nil || isNil(o.Fee) {
    return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *UniversalActivity) HasFee() bool {
	if o != nil && !isNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given float32 and assigns it to the Fee field.
func (o *UniversalActivity) SetFee(v float32) {
	o.Fee = &v
}

// GetFxRate returns the FxRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniversalActivity) GetFxRate() float32 {
	if o == nil || isNil(o.FxRate.Get()) {
		var ret float32
		return ret
	}
	return *o.FxRate.Get()
}

// GetFxRateOk returns a tuple with the FxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniversalActivity) GetFxRateOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.FxRate.Get(), o.FxRate.IsSet()
}

// HasFxRate returns a boolean if a field has been set.
func (o *UniversalActivity) HasFxRate() bool {
	if o != nil && o.FxRate.IsSet() {
		return true
	}

	return false
}

// SetFxRate gets a reference to the given NullableFloat32 and assigns it to the FxRate field.
func (o *UniversalActivity) SetFxRate(v float32) {
	o.FxRate.Set(&v)
}
// SetFxRateNil sets the value for FxRate to be an explicit nil
func (o *UniversalActivity) SetFxRateNil() {
	o.FxRate.Set(nil)
}

// UnsetFxRate ensures that no value is present for FxRate, not even an explicit nil
func (o *UniversalActivity) UnsetFxRate() {
	o.FxRate.Unset()
}

// GetInstitution returns the Institution field value if set, zero value otherwise.
func (o *UniversalActivity) GetInstitution() string {
	if o == nil || isNil(o.Institution) {
		var ret string
		return ret
	}
	return *o.Institution
}

// GetInstitutionOk returns a tuple with the Institution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetInstitutionOk() (*string, bool) {
	if o == nil || isNil(o.Institution) {
    return nil, false
	}
	return o.Institution, true
}

// HasInstitution returns a boolean if a field has been set.
func (o *UniversalActivity) HasInstitution() bool {
	if o != nil && !isNil(o.Institution) {
		return true
	}

	return false
}

// SetInstitution gets a reference to the given string and assigns it to the Institution field.
func (o *UniversalActivity) SetInstitution(v string) {
	o.Institution = &v
}

// GetOptionType returns the OptionType field value if set, zero value otherwise.
func (o *UniversalActivity) GetOptionType() string {
	if o == nil || isNil(o.OptionType) {
		var ret string
		return ret
	}
	return *o.OptionType
}

// GetOptionTypeOk returns a tuple with the OptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetOptionTypeOk() (*string, bool) {
	if o == nil || isNil(o.OptionType) {
    return nil, false
	}
	return o.OptionType, true
}

// HasOptionType returns a boolean if a field has been set.
func (o *UniversalActivity) HasOptionType() bool {
	if o != nil && !isNil(o.OptionType) {
		return true
	}

	return false
}

// SetOptionType gets a reference to the given string and assigns it to the OptionType field.
func (o *UniversalActivity) SetOptionType(v string) {
	o.OptionType = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *UniversalActivity) GetPrice() float32 {
	if o == nil || isNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetPriceOk() (*float32, bool) {
	if o == nil || isNil(o.Price) {
    return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *UniversalActivity) HasPrice() bool {
	if o != nil && !isNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *UniversalActivity) SetPrice(v float32) {
	o.Price = &v
}

// GetSettlementDate returns the SettlementDate field value if set, zero value otherwise.
func (o *UniversalActivity) GetSettlementDate() string {
	if o == nil || isNil(o.SettlementDate) {
		var ret string
		return ret
	}
	return *o.SettlementDate
}

// GetSettlementDateOk returns a tuple with the SettlementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetSettlementDateOk() (*string, bool) {
	if o == nil || isNil(o.SettlementDate) {
    return nil, false
	}
	return o.SettlementDate, true
}

// HasSettlementDate returns a boolean if a field has been set.
func (o *UniversalActivity) HasSettlementDate() bool {
	if o != nil && !isNil(o.SettlementDate) {
		return true
	}

	return false
}

// SetSettlementDate gets a reference to the given string and assigns it to the SettlementDate field.
func (o *UniversalActivity) SetSettlementDate(v string) {
	o.SettlementDate = &v
}

// GetExternalReferenceId returns the ExternalReferenceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniversalActivity) GetExternalReferenceId() string {
	if o == nil || isNil(o.ExternalReferenceId.Get()) {
		var ret string
		return ret
	}
	return *o.ExternalReferenceId.Get()
}

// GetExternalReferenceIdOk returns a tuple with the ExternalReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniversalActivity) GetExternalReferenceIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ExternalReferenceId.Get(), o.ExternalReferenceId.IsSet()
}

// HasExternalReferenceId returns a boolean if a field has been set.
func (o *UniversalActivity) HasExternalReferenceId() bool {
	if o != nil && o.ExternalReferenceId.IsSet() {
		return true
	}

	return false
}

// SetExternalReferenceId gets a reference to the given NullableString and assigns it to the ExternalReferenceId field.
func (o *UniversalActivity) SetExternalReferenceId(v string) {
	o.ExternalReferenceId.Set(&v)
}
// SetExternalReferenceIdNil sets the value for ExternalReferenceId to be an explicit nil
func (o *UniversalActivity) SetExternalReferenceIdNil() {
	o.ExternalReferenceId.Set(nil)
}

// UnsetExternalReferenceId ensures that no value is present for ExternalReferenceId, not even an explicit nil
func (o *UniversalActivity) UnsetExternalReferenceId() {
	o.ExternalReferenceId.Unset()
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *UniversalActivity) GetSymbol() Symbol {
	if o == nil || isNil(o.Symbol) {
		var ret Symbol
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetSymbolOk() (*Symbol, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *UniversalActivity) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given Symbol and assigns it to the Symbol field.
func (o *UniversalActivity) SetSymbol(v Symbol) {
	o.Symbol = &v
}

// GetOptionSymbol returns the OptionSymbol field value if set, zero value otherwise.
func (o *UniversalActivity) GetOptionSymbol() OptionsSymbol {
	if o == nil || isNil(o.OptionSymbol) {
		var ret OptionsSymbol
		return ret
	}
	return *o.OptionSymbol
}

// GetOptionSymbolOk returns a tuple with the OptionSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetOptionSymbolOk() (*OptionsSymbol, bool) {
	if o == nil || isNil(o.OptionSymbol) {
    return nil, false
	}
	return o.OptionSymbol, true
}

// HasOptionSymbol returns a boolean if a field has been set.
func (o *UniversalActivity) HasOptionSymbol() bool {
	if o != nil && !isNil(o.OptionSymbol) {
		return true
	}

	return false
}

// SetOptionSymbol gets a reference to the given OptionsSymbol and assigns it to the OptionSymbol field.
func (o *UniversalActivity) SetOptionSymbol(v OptionsSymbol) {
	o.OptionSymbol = &v
}

// GetTradeDate returns the TradeDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniversalActivity) GetTradeDate() string {
	if o == nil || isNil(o.TradeDate.Get()) {
		var ret string
		return ret
	}
	return *o.TradeDate.Get()
}

// GetTradeDateOk returns a tuple with the TradeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniversalActivity) GetTradeDateOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.TradeDate.Get(), o.TradeDate.IsSet()
}

// HasTradeDate returns a boolean if a field has been set.
func (o *UniversalActivity) HasTradeDate() bool {
	if o != nil && o.TradeDate.IsSet() {
		return true
	}

	return false
}

// SetTradeDate gets a reference to the given NullableString and assigns it to the TradeDate field.
func (o *UniversalActivity) SetTradeDate(v string) {
	o.TradeDate.Set(&v)
}
// SetTradeDateNil sets the value for TradeDate to be an explicit nil
func (o *UniversalActivity) SetTradeDateNil() {
	o.TradeDate.Set(nil)
}

// UnsetTradeDate ensures that no value is present for TradeDate, not even an explicit nil
func (o *UniversalActivity) UnsetTradeDate() {
	o.TradeDate.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UniversalActivity) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UniversalActivity) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UniversalActivity) SetType(v string) {
	o.Type = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *UniversalActivity) GetUnits() float32 {
	if o == nil || isNil(o.Units) {
		var ret float32
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalActivity) GetUnitsOk() (*float32, bool) {
	if o == nil || isNil(o.Units) {
    return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *UniversalActivity) HasUnits() bool {
	if o != nil && !isNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given float32 and assigns it to the Units field.
func (o *UniversalActivity) SetUnits(v float32) {
	o.Units = &v
}

func (o UniversalActivity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	if o.FxRate.IsSet() {
		toSerialize["fx_rate"] = o.FxRate.Get()
	}
	if !isNil(o.Institution) {
		toSerialize["institution"] = o.Institution
	}
	if !isNil(o.OptionType) {
		toSerialize["option_type"] = o.OptionType
	}
	if !isNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !isNil(o.SettlementDate) {
		toSerialize["settlement_date"] = o.SettlementDate
	}
	if o.ExternalReferenceId.IsSet() {
		toSerialize["external_reference_id"] = o.ExternalReferenceId.Get()
	}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !isNil(o.OptionSymbol) {
		toSerialize["option_symbol"] = o.OptionSymbol
	}
	if o.TradeDate.IsSet() {
		toSerialize["trade_date"] = o.TradeDate.Get()
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Units) {
		toSerialize["units"] = o.Units
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UniversalActivity) UnmarshalJSON(bytes []byte) (err error) {
	varUniversalActivity := _UniversalActivity{}

	if err = json.Unmarshal(bytes, &varUniversalActivity); err == nil {
		*o = UniversalActivity(varUniversalActivity)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "account")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "description")
		delete(additionalProperties, "fee")
		delete(additionalProperties, "fx_rate")
		delete(additionalProperties, "institution")
		delete(additionalProperties, "option_type")
		delete(additionalProperties, "price")
		delete(additionalProperties, "settlement_date")
		delete(additionalProperties, "external_reference_id")
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "option_symbol")
		delete(additionalProperties, "trade_date")
		delete(additionalProperties, "type")
		delete(additionalProperties, "units")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUniversalActivity struct {
	value *UniversalActivity
	isSet bool
}

func (v NullableUniversalActivity) Get() *UniversalActivity {
	return v.value
}

func (v *NullableUniversalActivity) Set(val *UniversalActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableUniversalActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableUniversalActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniversalActivity(val *UniversalActivity) *NullableUniversalActivity {
	return &NullableUniversalActivity{value: val, isSet: true}
}

func (v NullableUniversalActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniversalActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


