/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// PortfolioGroupPosition Details of a security held
type PortfolioGroupPosition struct {
	Symbol *UniversalSymbol `json:"symbol,omitempty"`
	// Last known market price for the symbol
	Price NullableFloat32 `json:"price,omitempty"`
	Units *int32 `json:"units,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortfolioGroupPosition PortfolioGroupPosition

// NewPortfolioGroupPosition instantiates a new PortfolioGroupPosition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortfolioGroupPosition() *PortfolioGroupPosition {
	this := PortfolioGroupPosition{}
	return &this
}

// NewPortfolioGroupPositionWithDefaults instantiates a new PortfolioGroupPosition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortfolioGroupPositionWithDefaults() *PortfolioGroupPosition {
	this := PortfolioGroupPosition{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *PortfolioGroupPosition) GetSymbol() UniversalSymbol {
	if o == nil || isNil(o.Symbol) {
		var ret UniversalSymbol
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioGroupPosition) GetSymbolOk() (*UniversalSymbol, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *PortfolioGroupPosition) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given UniversalSymbol and assigns it to the Symbol field.
func (o *PortfolioGroupPosition) SetSymbol(v UniversalSymbol) {
	o.Symbol = &v
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PortfolioGroupPosition) GetPrice() float32 {
	if o == nil || isNil(o.Price.Get()) {
		var ret float32
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortfolioGroupPosition) GetPriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *PortfolioGroupPosition) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat32 and assigns it to the Price field.
func (o *PortfolioGroupPosition) SetPrice(v float32) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *PortfolioGroupPosition) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *PortfolioGroupPosition) UnsetPrice() {
	o.Price.Unset()
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *PortfolioGroupPosition) GetUnits() int32 {
	if o == nil || isNil(o.Units) {
		var ret int32
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioGroupPosition) GetUnitsOk() (*int32, bool) {
	if o == nil || isNil(o.Units) {
    return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *PortfolioGroupPosition) HasUnits() bool {
	if o != nil && !isNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given int32 and assigns it to the Units field.
func (o *PortfolioGroupPosition) SetUnits(v int32) {
	o.Units = &v
}

func (o PortfolioGroupPosition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if !isNil(o.Units) {
		toSerialize["units"] = o.Units
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PortfolioGroupPosition) UnmarshalJSON(bytes []byte) (err error) {
	varPortfolioGroupPosition := _PortfolioGroupPosition{}

	if err = json.Unmarshal(bytes, &varPortfolioGroupPosition); err == nil {
		*o = PortfolioGroupPosition(varPortfolioGroupPosition)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "price")
		delete(additionalProperties, "units")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortfolioGroupPosition struct {
	value *PortfolioGroupPosition
	isSet bool
}

func (v NullablePortfolioGroupPosition) Get() *PortfolioGroupPosition {
	return v.value
}

func (v *NullablePortfolioGroupPosition) Set(val *PortfolioGroupPosition) {
	v.value = val
	v.isSet = true
}

func (v NullablePortfolioGroupPosition) IsSet() bool {
	return v.isSet
}

func (v *NullablePortfolioGroupPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortfolioGroupPosition(val *PortfolioGroupPosition) *NullablePortfolioGroupPosition {
	return &NullablePortfolioGroupPosition{value: val, isSet: true}
}

func (v NullablePortfolioGroupPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortfolioGroupPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


