/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// BrokerageSymbol Brokerage symbol
type BrokerageSymbol struct {
	Id *string `json:"id,omitempty"`
	Symbol NullableBrokerageSymbolSymbol `json:"symbol,omitempty"`
	BrokerageAuthorization *BrokerageAuthorization `json:"brokerage_authorization,omitempty"`
	Description *string `json:"description,omitempty"`
	AllowsFractionalUnits NullableBool `json:"allows_fractional_units,omitempty"`
	OptionSymbol NullableBrokerageSymbolOptionSymbol `json:"option_symbol,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BrokerageSymbol BrokerageSymbol

// NewBrokerageSymbol instantiates a new BrokerageSymbol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrokerageSymbol() *BrokerageSymbol {
	this := BrokerageSymbol{}
	return &this
}

// NewBrokerageSymbolWithDefaults instantiates a new BrokerageSymbol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrokerageSymbolWithDefaults() *BrokerageSymbol {
	this := BrokerageSymbol{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BrokerageSymbol) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrokerageSymbol) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BrokerageSymbol) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BrokerageSymbol) SetId(v string) {
	o.Id = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrokerageSymbol) GetSymbol() BrokerageSymbolSymbol {
	if o == nil || isNil(o.Symbol.Get()) {
		var ret BrokerageSymbolSymbol
		return ret
	}
	return *o.Symbol.Get()
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrokerageSymbol) GetSymbolOk() (*BrokerageSymbolSymbol, bool) {
	if o == nil {
    return nil, false
	}
	return o.Symbol.Get(), o.Symbol.IsSet()
}

// HasSymbol returns a boolean if a field has been set.
func (o *BrokerageSymbol) HasSymbol() bool {
	if o != nil && o.Symbol.IsSet() {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given NullableBrokerageSymbolSymbol and assigns it to the Symbol field.
func (o *BrokerageSymbol) SetSymbol(v BrokerageSymbolSymbol) {
	o.Symbol.Set(&v)
}
// SetSymbolNil sets the value for Symbol to be an explicit nil
func (o *BrokerageSymbol) SetSymbolNil() {
	o.Symbol.Set(nil)
}

// UnsetSymbol ensures that no value is present for Symbol, not even an explicit nil
func (o *BrokerageSymbol) UnsetSymbol() {
	o.Symbol.Unset()
}

// GetBrokerageAuthorization returns the BrokerageAuthorization field value if set, zero value otherwise.
func (o *BrokerageSymbol) GetBrokerageAuthorization() BrokerageAuthorization {
	if o == nil || isNil(o.BrokerageAuthorization) {
		var ret BrokerageAuthorization
		return ret
	}
	return *o.BrokerageAuthorization
}

// GetBrokerageAuthorizationOk returns a tuple with the BrokerageAuthorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrokerageSymbol) GetBrokerageAuthorizationOk() (*BrokerageAuthorization, bool) {
	if o == nil || isNil(o.BrokerageAuthorization) {
    return nil, false
	}
	return o.BrokerageAuthorization, true
}

// HasBrokerageAuthorization returns a boolean if a field has been set.
func (o *BrokerageSymbol) HasBrokerageAuthorization() bool {
	if o != nil && !isNil(o.BrokerageAuthorization) {
		return true
	}

	return false
}

// SetBrokerageAuthorization gets a reference to the given BrokerageAuthorization and assigns it to the BrokerageAuthorization field.
func (o *BrokerageSymbol) SetBrokerageAuthorization(v BrokerageAuthorization) {
	o.BrokerageAuthorization = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BrokerageSymbol) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrokerageSymbol) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BrokerageSymbol) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BrokerageSymbol) SetDescription(v string) {
	o.Description = &v
}

// GetAllowsFractionalUnits returns the AllowsFractionalUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrokerageSymbol) GetAllowsFractionalUnits() bool {
	if o == nil || isNil(o.AllowsFractionalUnits.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowsFractionalUnits.Get()
}

// GetAllowsFractionalUnitsOk returns a tuple with the AllowsFractionalUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrokerageSymbol) GetAllowsFractionalUnitsOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.AllowsFractionalUnits.Get(), o.AllowsFractionalUnits.IsSet()
}

// HasAllowsFractionalUnits returns a boolean if a field has been set.
func (o *BrokerageSymbol) HasAllowsFractionalUnits() bool {
	if o != nil && o.AllowsFractionalUnits.IsSet() {
		return true
	}

	return false
}

// SetAllowsFractionalUnits gets a reference to the given NullableBool and assigns it to the AllowsFractionalUnits field.
func (o *BrokerageSymbol) SetAllowsFractionalUnits(v bool) {
	o.AllowsFractionalUnits.Set(&v)
}
// SetAllowsFractionalUnitsNil sets the value for AllowsFractionalUnits to be an explicit nil
func (o *BrokerageSymbol) SetAllowsFractionalUnitsNil() {
	o.AllowsFractionalUnits.Set(nil)
}

// UnsetAllowsFractionalUnits ensures that no value is present for AllowsFractionalUnits, not even an explicit nil
func (o *BrokerageSymbol) UnsetAllowsFractionalUnits() {
	o.AllowsFractionalUnits.Unset()
}

// GetOptionSymbol returns the OptionSymbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrokerageSymbol) GetOptionSymbol() BrokerageSymbolOptionSymbol {
	if o == nil || isNil(o.OptionSymbol.Get()) {
		var ret BrokerageSymbolOptionSymbol
		return ret
	}
	return *o.OptionSymbol.Get()
}

// GetOptionSymbolOk returns a tuple with the OptionSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrokerageSymbol) GetOptionSymbolOk() (*BrokerageSymbolOptionSymbol, bool) {
	if o == nil {
    return nil, false
	}
	return o.OptionSymbol.Get(), o.OptionSymbol.IsSet()
}

// HasOptionSymbol returns a boolean if a field has been set.
func (o *BrokerageSymbol) HasOptionSymbol() bool {
	if o != nil && o.OptionSymbol.IsSet() {
		return true
	}

	return false
}

// SetOptionSymbol gets a reference to the given NullableBrokerageSymbolOptionSymbol and assigns it to the OptionSymbol field.
func (o *BrokerageSymbol) SetOptionSymbol(v BrokerageSymbolOptionSymbol) {
	o.OptionSymbol.Set(&v)
}
// SetOptionSymbolNil sets the value for OptionSymbol to be an explicit nil
func (o *BrokerageSymbol) SetOptionSymbolNil() {
	o.OptionSymbol.Set(nil)
}

// UnsetOptionSymbol ensures that no value is present for OptionSymbol, not even an explicit nil
func (o *BrokerageSymbol) UnsetOptionSymbol() {
	o.OptionSymbol.Unset()
}

func (o BrokerageSymbol) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Symbol.IsSet() {
		toSerialize["symbol"] = o.Symbol.Get()
	}
	if !isNil(o.BrokerageAuthorization) {
		toSerialize["brokerage_authorization"] = o.BrokerageAuthorization
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.AllowsFractionalUnits.IsSet() {
		toSerialize["allows_fractional_units"] = o.AllowsFractionalUnits.Get()
	}
	if o.OptionSymbol.IsSet() {
		toSerialize["option_symbol"] = o.OptionSymbol.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BrokerageSymbol) UnmarshalJSON(bytes []byte) (err error) {
	varBrokerageSymbol := _BrokerageSymbol{}

	if err = json.Unmarshal(bytes, &varBrokerageSymbol); err == nil {
		*o = BrokerageSymbol(varBrokerageSymbol)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "brokerage_authorization")
		delete(additionalProperties, "description")
		delete(additionalProperties, "allows_fractional_units")
		delete(additionalProperties, "option_symbol")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBrokerageSymbol struct {
	value *BrokerageSymbol
	isSet bool
}

func (v NullableBrokerageSymbol) Get() *BrokerageSymbol {
	return v.value
}

func (v *NullableBrokerageSymbol) Set(val *BrokerageSymbol) {
	v.value = val
	v.isSet = true
}

func (v NullableBrokerageSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableBrokerageSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrokerageSymbol(val *BrokerageSymbol) *NullableBrokerageSymbol {
	return &NullableBrokerageSymbol{value: val, isSet: true}
}

func (v NullableBrokerageSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrokerageSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


