/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// PortfolioGroupSettings struct for PortfolioGroupSettings
type PortfolioGroupSettings struct {
	BuyOnly *bool `json:"buyOnly,omitempty"`
	CashOptimizer *bool `json:"cash_optimizer,omitempty"`
	NotifyFrequency *string `json:"notifyFrequency,omitempty"`
	DriftThreshold *float32 `json:"driftThreshold,omitempty"`
	PreferredCurrency *Currency `json:"preferred_currency,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortfolioGroupSettings PortfolioGroupSettings

// NewPortfolioGroupSettings instantiates a new PortfolioGroupSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortfolioGroupSettings() *PortfolioGroupSettings {
	this := PortfolioGroupSettings{}
	return &this
}

// NewPortfolioGroupSettingsWithDefaults instantiates a new PortfolioGroupSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortfolioGroupSettingsWithDefaults() *PortfolioGroupSettings {
	this := PortfolioGroupSettings{}
	return &this
}

// GetBuyOnly returns the BuyOnly field value if set, zero value otherwise.
func (o *PortfolioGroupSettings) GetBuyOnly() bool {
	if o == nil || isNil(o.BuyOnly) {
		var ret bool
		return ret
	}
	return *o.BuyOnly
}

// GetBuyOnlyOk returns a tuple with the BuyOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioGroupSettings) GetBuyOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.BuyOnly) {
    return nil, false
	}
	return o.BuyOnly, true
}

// HasBuyOnly returns a boolean if a field has been set.
func (o *PortfolioGroupSettings) HasBuyOnly() bool {
	if o != nil && !isNil(o.BuyOnly) {
		return true
	}

	return false
}

// SetBuyOnly gets a reference to the given bool and assigns it to the BuyOnly field.
func (o *PortfolioGroupSettings) SetBuyOnly(v bool) {
	o.BuyOnly = &v
}

// GetCashOptimizer returns the CashOptimizer field value if set, zero value otherwise.
func (o *PortfolioGroupSettings) GetCashOptimizer() bool {
	if o == nil || isNil(o.CashOptimizer) {
		var ret bool
		return ret
	}
	return *o.CashOptimizer
}

// GetCashOptimizerOk returns a tuple with the CashOptimizer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioGroupSettings) GetCashOptimizerOk() (*bool, bool) {
	if o == nil || isNil(o.CashOptimizer) {
    return nil, false
	}
	return o.CashOptimizer, true
}

// HasCashOptimizer returns a boolean if a field has been set.
func (o *PortfolioGroupSettings) HasCashOptimizer() bool {
	if o != nil && !isNil(o.CashOptimizer) {
		return true
	}

	return false
}

// SetCashOptimizer gets a reference to the given bool and assigns it to the CashOptimizer field.
func (o *PortfolioGroupSettings) SetCashOptimizer(v bool) {
	o.CashOptimizer = &v
}

// GetNotifyFrequency returns the NotifyFrequency field value if set, zero value otherwise.
func (o *PortfolioGroupSettings) GetNotifyFrequency() string {
	if o == nil || isNil(o.NotifyFrequency) {
		var ret string
		return ret
	}
	return *o.NotifyFrequency
}

// GetNotifyFrequencyOk returns a tuple with the NotifyFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioGroupSettings) GetNotifyFrequencyOk() (*string, bool) {
	if o == nil || isNil(o.NotifyFrequency) {
    return nil, false
	}
	return o.NotifyFrequency, true
}

// HasNotifyFrequency returns a boolean if a field has been set.
func (o *PortfolioGroupSettings) HasNotifyFrequency() bool {
	if o != nil && !isNil(o.NotifyFrequency) {
		return true
	}

	return false
}

// SetNotifyFrequency gets a reference to the given string and assigns it to the NotifyFrequency field.
func (o *PortfolioGroupSettings) SetNotifyFrequency(v string) {
	o.NotifyFrequency = &v
}

// GetDriftThreshold returns the DriftThreshold field value if set, zero value otherwise.
func (o *PortfolioGroupSettings) GetDriftThreshold() float32 {
	if o == nil || isNil(o.DriftThreshold) {
		var ret float32
		return ret
	}
	return *o.DriftThreshold
}

// GetDriftThresholdOk returns a tuple with the DriftThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioGroupSettings) GetDriftThresholdOk() (*float32, bool) {
	if o == nil || isNil(o.DriftThreshold) {
    return nil, false
	}
	return o.DriftThreshold, true
}

// HasDriftThreshold returns a boolean if a field has been set.
func (o *PortfolioGroupSettings) HasDriftThreshold() bool {
	if o != nil && !isNil(o.DriftThreshold) {
		return true
	}

	return false
}

// SetDriftThreshold gets a reference to the given float32 and assigns it to the DriftThreshold field.
func (o *PortfolioGroupSettings) SetDriftThreshold(v float32) {
	o.DriftThreshold = &v
}

// GetPreferredCurrency returns the PreferredCurrency field value if set, zero value otherwise.
func (o *PortfolioGroupSettings) GetPreferredCurrency() Currency {
	if o == nil || isNil(o.PreferredCurrency) {
		var ret Currency
		return ret
	}
	return *o.PreferredCurrency
}

// GetPreferredCurrencyOk returns a tuple with the PreferredCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioGroupSettings) GetPreferredCurrencyOk() (*Currency, bool) {
	if o == nil || isNil(o.PreferredCurrency) {
    return nil, false
	}
	return o.PreferredCurrency, true
}

// HasPreferredCurrency returns a boolean if a field has been set.
func (o *PortfolioGroupSettings) HasPreferredCurrency() bool {
	if o != nil && !isNil(o.PreferredCurrency) {
		return true
	}

	return false
}

// SetPreferredCurrency gets a reference to the given Currency and assigns it to the PreferredCurrency field.
func (o *PortfolioGroupSettings) SetPreferredCurrency(v Currency) {
	o.PreferredCurrency = &v
}

func (o PortfolioGroupSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BuyOnly) {
		toSerialize["buyOnly"] = o.BuyOnly
	}
	if !isNil(o.CashOptimizer) {
		toSerialize["cash_optimizer"] = o.CashOptimizer
	}
	if !isNil(o.NotifyFrequency) {
		toSerialize["notifyFrequency"] = o.NotifyFrequency
	}
	if !isNil(o.DriftThreshold) {
		toSerialize["driftThreshold"] = o.DriftThreshold
	}
	if !isNil(o.PreferredCurrency) {
		toSerialize["preferred_currency"] = o.PreferredCurrency
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PortfolioGroupSettings) UnmarshalJSON(bytes []byte) (err error) {
	varPortfolioGroupSettings := _PortfolioGroupSettings{}

	if err = json.Unmarshal(bytes, &varPortfolioGroupSettings); err == nil {
		*o = PortfolioGroupSettings(varPortfolioGroupSettings)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "buyOnly")
		delete(additionalProperties, "cash_optimizer")
		delete(additionalProperties, "notifyFrequency")
		delete(additionalProperties, "driftThreshold")
		delete(additionalProperties, "preferred_currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortfolioGroupSettings struct {
	value *PortfolioGroupSettings
	isSet bool
}

func (v NullablePortfolioGroupSettings) Get() *PortfolioGroupSettings {
	return v.value
}

func (v *NullablePortfolioGroupSettings) Set(val *PortfolioGroupSettings) {
	v.value = val
	v.isSet = true
}

func (v NullablePortfolioGroupSettings) IsSet() bool {
	return v.isSet
}

func (v *NullablePortfolioGroupSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortfolioGroupSettings(val *PortfolioGroupSettings) *NullablePortfolioGroupSettings {
	return &NullablePortfolioGroupSettings{value: val, isSet: true}
}

func (v NullablePortfolioGroupSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortfolioGroupSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


