/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
	"fmt"
)

// AuthenticationLoginSnapTradeUser200Response - struct for AuthenticationLoginSnapTradeUser200Response
type AuthenticationLoginSnapTradeUser200Response struct {
	EncryptedResponse *EncryptedResponse
	LoginRedirectURI *LoginRedirectURI
}

// EncryptedResponseAsAuthenticationLoginSnapTradeUser200Response is a convenience function that returns EncryptedResponse wrapped in AuthenticationLoginSnapTradeUser200Response
func EncryptedResponseAsAuthenticationLoginSnapTradeUser200Response(v *EncryptedResponse) AuthenticationLoginSnapTradeUser200Response {
	return AuthenticationLoginSnapTradeUser200Response{
		EncryptedResponse: v,
	}
}

// LoginRedirectURIAsAuthenticationLoginSnapTradeUser200Response is a convenience function that returns LoginRedirectURI wrapped in AuthenticationLoginSnapTradeUser200Response
func LoginRedirectURIAsAuthenticationLoginSnapTradeUser200Response(v *LoginRedirectURI) AuthenticationLoginSnapTradeUser200Response {
	return AuthenticationLoginSnapTradeUser200Response{
		LoginRedirectURI: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuthenticationLoginSnapTradeUser200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EncryptedResponse
	err = newStrictDecoder(data).Decode(&dst.EncryptedResponse)
	if err == nil {
		jsonEncryptedResponse, _ := json.Marshal(dst.EncryptedResponse)
		if string(jsonEncryptedResponse) == "{}" { // empty struct
			dst.EncryptedResponse = nil
		} else {
			match++
		}
	} else {
		dst.EncryptedResponse = nil
	}

	// try to unmarshal data into LoginRedirectURI
	err = newStrictDecoder(data).Decode(&dst.LoginRedirectURI)
	if err == nil {
		jsonLoginRedirectURI, _ := json.Marshal(dst.LoginRedirectURI)
		if string(jsonLoginRedirectURI) == "{}" { // empty struct
			dst.LoginRedirectURI = nil
		} else {
			match++
		}
	} else {
		dst.LoginRedirectURI = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EncryptedResponse = nil
		dst.LoginRedirectURI = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AuthenticationLoginSnapTradeUser200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AuthenticationLoginSnapTradeUser200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuthenticationLoginSnapTradeUser200Response) MarshalJSON() ([]byte, error) {
	if src.EncryptedResponse != nil {
		return json.Marshal(&src.EncryptedResponse)
	}

	if src.LoginRedirectURI != nil {
		return json.Marshal(&src.LoginRedirectURI)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuthenticationLoginSnapTradeUser200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EncryptedResponse != nil {
		return obj.EncryptedResponse
	}

	if obj.LoginRedirectURI != nil {
		return obj.LoginRedirectURI
	}

	// all schemas are nil
	return nil
}

type NullableAuthenticationLoginSnapTradeUser200Response struct {
	value *AuthenticationLoginSnapTradeUser200Response
	isSet bool
}

func (v NullableAuthenticationLoginSnapTradeUser200Response) Get() *AuthenticationLoginSnapTradeUser200Response {
	return v.value
}

func (v *NullableAuthenticationLoginSnapTradeUser200Response) Set(val *AuthenticationLoginSnapTradeUser200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationLoginSnapTradeUser200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationLoginSnapTradeUser200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationLoginSnapTradeUser200Response(val *AuthenticationLoginSnapTradeUser200Response) *NullableAuthenticationLoginSnapTradeUser200Response {
	return &NullableAuthenticationLoginSnapTradeUser200Response{value: val, isSet: true}
}

func (v NullableAuthenticationLoginSnapTradeUser200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationLoginSnapTradeUser200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


