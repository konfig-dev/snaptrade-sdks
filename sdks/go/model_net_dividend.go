/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// NetDividend Object representing total dividends received during a timeframe
type NetDividend struct {
	Symbol *UniversalSymbol `json:"symbol,omitempty"`
	Amount NullableFloat32 `json:"amount,omitempty"`
	Currency *string `json:"currency,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetDividend NetDividend

// NewNetDividend instantiates a new NetDividend object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetDividend() *NetDividend {
	this := NetDividend{}
	return &this
}

// NewNetDividendWithDefaults instantiates a new NetDividend object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetDividendWithDefaults() *NetDividend {
	this := NetDividend{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *NetDividend) GetSymbol() UniversalSymbol {
	if o == nil || isNil(o.Symbol) {
		var ret UniversalSymbol
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetDividend) GetSymbolOk() (*UniversalSymbol, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *NetDividend) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given UniversalSymbol and assigns it to the Symbol field.
func (o *NetDividend) SetSymbol(v UniversalSymbol) {
	o.Symbol = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetDividend) GetAmount() float32 {
	if o == nil || isNil(o.Amount.Get()) {
		var ret float32
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetDividend) GetAmountOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *NetDividend) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableFloat32 and assigns it to the Amount field.
func (o *NetDividend) SetAmount(v float32) {
	o.Amount.Set(&v)
}
// SetAmountNil sets the value for Amount to be an explicit nil
func (o *NetDividend) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *NetDividend) UnsetAmount() {
	o.Amount.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *NetDividend) GetCurrency() string {
	if o == nil || isNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetDividend) GetCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *NetDividend) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *NetDividend) SetCurrency(v string) {
	o.Currency = &v
}

func (o NetDividend) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NetDividend) UnmarshalJSON(bytes []byte) (err error) {
	varNetDividend := _NetDividend{}

	if err = json.Unmarshal(bytes, &varNetDividend); err == nil {
		*o = NetDividend(varNetDividend)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetDividend struct {
	value *NetDividend
	isSet bool
}

func (v NullableNetDividend) Get() *NetDividend {
	return v.value
}

func (v *NullableNetDividend) Set(val *NetDividend) {
	v.value = val
	v.isSet = true
}

func (v NullableNetDividend) IsSet() bool {
	return v.isSet
}

func (v *NullableNetDividend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetDividend(val *NetDividend) *NullableNetDividend {
	return &NullableNetDividend{value: val, isSet: true}
}

func (v NullableNetDividend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetDividend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


