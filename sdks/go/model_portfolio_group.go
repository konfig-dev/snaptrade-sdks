/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// PortfolioGroup struct for PortfolioGroup
type PortfolioGroup struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PortfolioGroup PortfolioGroup

// NewPortfolioGroup instantiates a new PortfolioGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortfolioGroup() *PortfolioGroup {
	this := PortfolioGroup{}
	return &this
}

// NewPortfolioGroupWithDefaults instantiates a new PortfolioGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortfolioGroupWithDefaults() *PortfolioGroup {
	this := PortfolioGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortfolioGroup) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioGroup) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortfolioGroup) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PortfolioGroup) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PortfolioGroup) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioGroup) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PortfolioGroup) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PortfolioGroup) SetName(v string) {
	o.Name = &v
}

func (o PortfolioGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PortfolioGroup) UnmarshalJSON(bytes []byte) (err error) {
	varPortfolioGroup := _PortfolioGroup{}

	if err = json.Unmarshal(bytes, &varPortfolioGroup); err == nil {
		*o = PortfolioGroup(varPortfolioGroup)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortfolioGroup struct {
	value *PortfolioGroup
	isSet bool
}

func (v NullablePortfolioGroup) Get() *PortfolioGroup {
	return v.value
}

func (v *NullablePortfolioGroup) Set(val *PortfolioGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePortfolioGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePortfolioGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortfolioGroup(val *PortfolioGroup) *NullablePortfolioGroup {
	return &NullablePortfolioGroup{value: val, isSet: true}
}

func (v NullablePortfolioGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortfolioGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


