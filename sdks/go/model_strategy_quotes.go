/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// StrategyQuotes struct for StrategyQuotes
type StrategyQuotes struct {
	Strategy *OptionStrategy `json:"strategy,omitempty"`
	// Trade Price if limit or stop limit order
	OpenPrice NullableFloat32 `json:"open_price,omitempty"`
	// Trade Price if limit or stop limit order
	BidPrice NullableFloat32 `json:"bid_price,omitempty"`
	// Trade Price if limit or stop limit order
	AskPrice NullableFloat32 `json:"ask_price,omitempty"`
	Volatility *float32 `json:"volatility,omitempty"`
	Greek *StrategyQuotesGreek `json:"greek,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StrategyQuotes StrategyQuotes

// NewStrategyQuotes instantiates a new StrategyQuotes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStrategyQuotes() *StrategyQuotes {
	this := StrategyQuotes{}
	return &this
}

// NewStrategyQuotesWithDefaults instantiates a new StrategyQuotes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStrategyQuotesWithDefaults() *StrategyQuotes {
	this := StrategyQuotes{}
	return &this
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *StrategyQuotes) GetStrategy() OptionStrategy {
	if o == nil || isNil(o.Strategy) {
		var ret OptionStrategy
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyQuotes) GetStrategyOk() (*OptionStrategy, bool) {
	if o == nil || isNil(o.Strategy) {
    return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *StrategyQuotes) HasStrategy() bool {
	if o != nil && !isNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given OptionStrategy and assigns it to the Strategy field.
func (o *StrategyQuotes) SetStrategy(v OptionStrategy) {
	o.Strategy = &v
}

// GetOpenPrice returns the OpenPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StrategyQuotes) GetOpenPrice() float32 {
	if o == nil || isNil(o.OpenPrice.Get()) {
		var ret float32
		return ret
	}
	return *o.OpenPrice.Get()
}

// GetOpenPriceOk returns a tuple with the OpenPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StrategyQuotes) GetOpenPriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.OpenPrice.Get(), o.OpenPrice.IsSet()
}

// HasOpenPrice returns a boolean if a field has been set.
func (o *StrategyQuotes) HasOpenPrice() bool {
	if o != nil && o.OpenPrice.IsSet() {
		return true
	}

	return false
}

// SetOpenPrice gets a reference to the given NullableFloat32 and assigns it to the OpenPrice field.
func (o *StrategyQuotes) SetOpenPrice(v float32) {
	o.OpenPrice.Set(&v)
}
// SetOpenPriceNil sets the value for OpenPrice to be an explicit nil
func (o *StrategyQuotes) SetOpenPriceNil() {
	o.OpenPrice.Set(nil)
}

// UnsetOpenPrice ensures that no value is present for OpenPrice, not even an explicit nil
func (o *StrategyQuotes) UnsetOpenPrice() {
	o.OpenPrice.Unset()
}

// GetBidPrice returns the BidPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StrategyQuotes) GetBidPrice() float32 {
	if o == nil || isNil(o.BidPrice.Get()) {
		var ret float32
		return ret
	}
	return *o.BidPrice.Get()
}

// GetBidPriceOk returns a tuple with the BidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StrategyQuotes) GetBidPriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.BidPrice.Get(), o.BidPrice.IsSet()
}

// HasBidPrice returns a boolean if a field has been set.
func (o *StrategyQuotes) HasBidPrice() bool {
	if o != nil && o.BidPrice.IsSet() {
		return true
	}

	return false
}

// SetBidPrice gets a reference to the given NullableFloat32 and assigns it to the BidPrice field.
func (o *StrategyQuotes) SetBidPrice(v float32) {
	o.BidPrice.Set(&v)
}
// SetBidPriceNil sets the value for BidPrice to be an explicit nil
func (o *StrategyQuotes) SetBidPriceNil() {
	o.BidPrice.Set(nil)
}

// UnsetBidPrice ensures that no value is present for BidPrice, not even an explicit nil
func (o *StrategyQuotes) UnsetBidPrice() {
	o.BidPrice.Unset()
}

// GetAskPrice returns the AskPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StrategyQuotes) GetAskPrice() float32 {
	if o == nil || isNil(o.AskPrice.Get()) {
		var ret float32
		return ret
	}
	return *o.AskPrice.Get()
}

// GetAskPriceOk returns a tuple with the AskPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StrategyQuotes) GetAskPriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.AskPrice.Get(), o.AskPrice.IsSet()
}

// HasAskPrice returns a boolean if a field has been set.
func (o *StrategyQuotes) HasAskPrice() bool {
	if o != nil && o.AskPrice.IsSet() {
		return true
	}

	return false
}

// SetAskPrice gets a reference to the given NullableFloat32 and assigns it to the AskPrice field.
func (o *StrategyQuotes) SetAskPrice(v float32) {
	o.AskPrice.Set(&v)
}
// SetAskPriceNil sets the value for AskPrice to be an explicit nil
func (o *StrategyQuotes) SetAskPriceNil() {
	o.AskPrice.Set(nil)
}

// UnsetAskPrice ensures that no value is present for AskPrice, not even an explicit nil
func (o *StrategyQuotes) UnsetAskPrice() {
	o.AskPrice.Unset()
}

// GetVolatility returns the Volatility field value if set, zero value otherwise.
func (o *StrategyQuotes) GetVolatility() float32 {
	if o == nil || isNil(o.Volatility) {
		var ret float32
		return ret
	}
	return *o.Volatility
}

// GetVolatilityOk returns a tuple with the Volatility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyQuotes) GetVolatilityOk() (*float32, bool) {
	if o == nil || isNil(o.Volatility) {
    return nil, false
	}
	return o.Volatility, true
}

// HasVolatility returns a boolean if a field has been set.
func (o *StrategyQuotes) HasVolatility() bool {
	if o != nil && !isNil(o.Volatility) {
		return true
	}

	return false
}

// SetVolatility gets a reference to the given float32 and assigns it to the Volatility field.
func (o *StrategyQuotes) SetVolatility(v float32) {
	o.Volatility = &v
}

// GetGreek returns the Greek field value if set, zero value otherwise.
func (o *StrategyQuotes) GetGreek() StrategyQuotesGreek {
	if o == nil || isNil(o.Greek) {
		var ret StrategyQuotesGreek
		return ret
	}
	return *o.Greek
}

// GetGreekOk returns a tuple with the Greek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyQuotes) GetGreekOk() (*StrategyQuotesGreek, bool) {
	if o == nil || isNil(o.Greek) {
    return nil, false
	}
	return o.Greek, true
}

// HasGreek returns a boolean if a field has been set.
func (o *StrategyQuotes) HasGreek() bool {
	if o != nil && !isNil(o.Greek) {
		return true
	}

	return false
}

// SetGreek gets a reference to the given StrategyQuotesGreek and assigns it to the Greek field.
func (o *StrategyQuotes) SetGreek(v StrategyQuotesGreek) {
	o.Greek = &v
}

func (o StrategyQuotes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	if o.OpenPrice.IsSet() {
		toSerialize["open_price"] = o.OpenPrice.Get()
	}
	if o.BidPrice.IsSet() {
		toSerialize["bid_price"] = o.BidPrice.Get()
	}
	if o.AskPrice.IsSet() {
		toSerialize["ask_price"] = o.AskPrice.Get()
	}
	if !isNil(o.Volatility) {
		toSerialize["volatility"] = o.Volatility
	}
	if !isNil(o.Greek) {
		toSerialize["greek"] = o.Greek
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StrategyQuotes) UnmarshalJSON(bytes []byte) (err error) {
	varStrategyQuotes := _StrategyQuotes{}

	if err = json.Unmarshal(bytes, &varStrategyQuotes); err == nil {
		*o = StrategyQuotes(varStrategyQuotes)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "strategy")
		delete(additionalProperties, "open_price")
		delete(additionalProperties, "bid_price")
		delete(additionalProperties, "ask_price")
		delete(additionalProperties, "volatility")
		delete(additionalProperties, "greek")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStrategyQuotes struct {
	value *StrategyQuotes
	isSet bool
}

func (v NullableStrategyQuotes) Get() *StrategyQuotes {
	return v.value
}

func (v *NullableStrategyQuotes) Set(val *StrategyQuotes) {
	v.value = val
	v.isSet = true
}

func (v NullableStrategyQuotes) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategyQuotes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategyQuotes(val *StrategyQuotes) *NullableStrategyQuotes {
	return &NullableStrategyQuotes{value: val, isSet: true}
}

func (v NullableStrategyQuotes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategyQuotes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


