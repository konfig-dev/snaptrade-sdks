/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// LoginRedirectURI Redirect uri upon successful login
type LoginRedirectURI struct {
	RedirectURI interface{} `json:"redirectURI,omitempty"`
	SessionId *string `json:"sessionId,omitempty"`
}

// NewLoginRedirectURI instantiates a new LoginRedirectURI object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginRedirectURI() *LoginRedirectURI {
	this := LoginRedirectURI{}
	return &this
}

// NewLoginRedirectURIWithDefaults instantiates a new LoginRedirectURI object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginRedirectURIWithDefaults() *LoginRedirectURI {
	this := LoginRedirectURI{}
	return &this
}

// GetRedirectURI returns the RedirectURI field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LoginRedirectURI) GetRedirectURI() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RedirectURI
}

// GetRedirectURIOk returns a tuple with the RedirectURI field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoginRedirectURI) GetRedirectURIOk() (*interface{}, bool) {
	if o == nil || isNil(o.RedirectURI) {
    return nil, false
	}
	return &o.RedirectURI, true
}

// HasRedirectURI returns a boolean if a field has been set.
func (o *LoginRedirectURI) HasRedirectURI() bool {
	if o != nil && isNil(o.RedirectURI) {
		return true
	}

	return false
}

// SetRedirectURI gets a reference to the given interface{} and assigns it to the RedirectURI field.
func (o *LoginRedirectURI) SetRedirectURI(v interface{}) {
	o.RedirectURI = v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *LoginRedirectURI) GetSessionId() string {
	if o == nil || isNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginRedirectURI) GetSessionIdOk() (*string, bool) {
	if o == nil || isNil(o.SessionId) {
    return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *LoginRedirectURI) HasSessionId() bool {
	if o != nil && !isNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *LoginRedirectURI) SetSessionId(v string) {
	o.SessionId = &v
}

func (o LoginRedirectURI) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RedirectURI != nil {
		toSerialize["redirectURI"] = o.RedirectURI
	}
	if !isNil(o.SessionId) {
		toSerialize["sessionId"] = o.SessionId
	}
	return json.Marshal(toSerialize)
}

type NullableLoginRedirectURI struct {
	value *LoginRedirectURI
	isSet bool
}

func (v NullableLoginRedirectURI) Get() *LoginRedirectURI {
	return v.value
}

func (v *NullableLoginRedirectURI) Set(val *LoginRedirectURI) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginRedirectURI) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginRedirectURI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginRedirectURI(val *LoginRedirectURI) *NullableLoginRedirectURI {
	return &NullableLoginRedirectURI{value: val, isSet: true}
}

func (v NullableLoginRedirectURI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginRedirectURI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


