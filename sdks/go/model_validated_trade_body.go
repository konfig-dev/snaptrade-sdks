/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// ValidatedTradeBody Validated Trade Form
type ValidatedTradeBody struct {
	// Optional, defaults to true. Determines if a wait is performed to check on order status. If false, latency will be reduced but orders returned will be more likely to be of status PENDING as we will not wait to check on the status before responding to the request
	WaitToConfirm NullableBool `json:"wait_to_confirm,omitempty"`
}

// NewValidatedTradeBody instantiates a new ValidatedTradeBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidatedTradeBody() *ValidatedTradeBody {
	this := ValidatedTradeBody{}
	return &this
}

// NewValidatedTradeBodyWithDefaults instantiates a new ValidatedTradeBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidatedTradeBodyWithDefaults() *ValidatedTradeBody {
	this := ValidatedTradeBody{}
	return &this
}

// GetWaitToConfirm returns the WaitToConfirm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ValidatedTradeBody) GetWaitToConfirm() bool {
	if o == nil || isNil(o.WaitToConfirm.Get()) {
		var ret bool
		return ret
	}
	return *o.WaitToConfirm.Get()
}

// GetWaitToConfirmOk returns a tuple with the WaitToConfirm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ValidatedTradeBody) GetWaitToConfirmOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.WaitToConfirm.Get(), o.WaitToConfirm.IsSet()
}

// HasWaitToConfirm returns a boolean if a field has been set.
func (o *ValidatedTradeBody) HasWaitToConfirm() bool {
	if o != nil && o.WaitToConfirm.IsSet() {
		return true
	}

	return false
}

// SetWaitToConfirm gets a reference to the given NullableBool and assigns it to the WaitToConfirm field.
func (o *ValidatedTradeBody) SetWaitToConfirm(v bool) {
	o.WaitToConfirm.Set(&v)
}
// SetWaitToConfirmNil sets the value for WaitToConfirm to be an explicit nil
func (o *ValidatedTradeBody) SetWaitToConfirmNil() {
	o.WaitToConfirm.Set(nil)
}

// UnsetWaitToConfirm ensures that no value is present for WaitToConfirm, not even an explicit nil
func (o *ValidatedTradeBody) UnsetWaitToConfirm() {
	o.WaitToConfirm.Unset()
}

func (o ValidatedTradeBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WaitToConfirm.IsSet() {
		toSerialize["wait_to_confirm"] = o.WaitToConfirm.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableValidatedTradeBody struct {
	value *ValidatedTradeBody
	isSet bool
}

func (v NullableValidatedTradeBody) Get() *ValidatedTradeBody {
	return v.value
}

func (v *NullableValidatedTradeBody) Set(val *ValidatedTradeBody) {
	v.value = val
	v.isSet = true
}

func (v NullableValidatedTradeBody) IsSet() bool {
	return v.isSet
}

func (v *NullableValidatedTradeBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidatedTradeBody(val *ValidatedTradeBody) *NullableValidatedTradeBody {
	return &NullableValidatedTradeBody{value: val, isSet: true}
}

func (v NullableValidatedTradeBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidatedTradeBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


