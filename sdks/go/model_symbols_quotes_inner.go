/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// SymbolsQuotesInner struct for SymbolsQuotesInner
type SymbolsQuotesInner struct {
	Symbol *UniversalSymbol `json:"symbol,omitempty"`
	BidPrice *float32 `json:"bid_price,omitempty"`
	AskPrice *float32 `json:"ask_price,omitempty"`
	LastTradePrice *float32 `json:"last_trade_price,omitempty"`
	BidSize *float32 `json:"bid_size,omitempty"`
	AskSize *float32 `json:"ask_size,omitempty"`
}

// NewSymbolsQuotesInner instantiates a new SymbolsQuotesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymbolsQuotesInner() *SymbolsQuotesInner {
	this := SymbolsQuotesInner{}
	return &this
}

// NewSymbolsQuotesInnerWithDefaults instantiates a new SymbolsQuotesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymbolsQuotesInnerWithDefaults() *SymbolsQuotesInner {
	this := SymbolsQuotesInner{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *SymbolsQuotesInner) GetSymbol() UniversalSymbol {
	if o == nil || isNil(o.Symbol) {
		var ret UniversalSymbol
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolsQuotesInner) GetSymbolOk() (*UniversalSymbol, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *SymbolsQuotesInner) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given UniversalSymbol and assigns it to the Symbol field.
func (o *SymbolsQuotesInner) SetSymbol(v UniversalSymbol) {
	o.Symbol = &v
}

// GetBidPrice returns the BidPrice field value if set, zero value otherwise.
func (o *SymbolsQuotesInner) GetBidPrice() float32 {
	if o == nil || isNil(o.BidPrice) {
		var ret float32
		return ret
	}
	return *o.BidPrice
}

// GetBidPriceOk returns a tuple with the BidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolsQuotesInner) GetBidPriceOk() (*float32, bool) {
	if o == nil || isNil(o.BidPrice) {
    return nil, false
	}
	return o.BidPrice, true
}

// HasBidPrice returns a boolean if a field has been set.
func (o *SymbolsQuotesInner) HasBidPrice() bool {
	if o != nil && !isNil(o.BidPrice) {
		return true
	}

	return false
}

// SetBidPrice gets a reference to the given float32 and assigns it to the BidPrice field.
func (o *SymbolsQuotesInner) SetBidPrice(v float32) {
	o.BidPrice = &v
}

// GetAskPrice returns the AskPrice field value if set, zero value otherwise.
func (o *SymbolsQuotesInner) GetAskPrice() float32 {
	if o == nil || isNil(o.AskPrice) {
		var ret float32
		return ret
	}
	return *o.AskPrice
}

// GetAskPriceOk returns a tuple with the AskPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolsQuotesInner) GetAskPriceOk() (*float32, bool) {
	if o == nil || isNil(o.AskPrice) {
    return nil, false
	}
	return o.AskPrice, true
}

// HasAskPrice returns a boolean if a field has been set.
func (o *SymbolsQuotesInner) HasAskPrice() bool {
	if o != nil && !isNil(o.AskPrice) {
		return true
	}

	return false
}

// SetAskPrice gets a reference to the given float32 and assigns it to the AskPrice field.
func (o *SymbolsQuotesInner) SetAskPrice(v float32) {
	o.AskPrice = &v
}

// GetLastTradePrice returns the LastTradePrice field value if set, zero value otherwise.
func (o *SymbolsQuotesInner) GetLastTradePrice() float32 {
	if o == nil || isNil(o.LastTradePrice) {
		var ret float32
		return ret
	}
	return *o.LastTradePrice
}

// GetLastTradePriceOk returns a tuple with the LastTradePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolsQuotesInner) GetLastTradePriceOk() (*float32, bool) {
	if o == nil || isNil(o.LastTradePrice) {
    return nil, false
	}
	return o.LastTradePrice, true
}

// HasLastTradePrice returns a boolean if a field has been set.
func (o *SymbolsQuotesInner) HasLastTradePrice() bool {
	if o != nil && !isNil(o.LastTradePrice) {
		return true
	}

	return false
}

// SetLastTradePrice gets a reference to the given float32 and assigns it to the LastTradePrice field.
func (o *SymbolsQuotesInner) SetLastTradePrice(v float32) {
	o.LastTradePrice = &v
}

// GetBidSize returns the BidSize field value if set, zero value otherwise.
func (o *SymbolsQuotesInner) GetBidSize() float32 {
	if o == nil || isNil(o.BidSize) {
		var ret float32
		return ret
	}
	return *o.BidSize
}

// GetBidSizeOk returns a tuple with the BidSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolsQuotesInner) GetBidSizeOk() (*float32, bool) {
	if o == nil || isNil(o.BidSize) {
    return nil, false
	}
	return o.BidSize, true
}

// HasBidSize returns a boolean if a field has been set.
func (o *SymbolsQuotesInner) HasBidSize() bool {
	if o != nil && !isNil(o.BidSize) {
		return true
	}

	return false
}

// SetBidSize gets a reference to the given float32 and assigns it to the BidSize field.
func (o *SymbolsQuotesInner) SetBidSize(v float32) {
	o.BidSize = &v
}

// GetAskSize returns the AskSize field value if set, zero value otherwise.
func (o *SymbolsQuotesInner) GetAskSize() float32 {
	if o == nil || isNil(o.AskSize) {
		var ret float32
		return ret
	}
	return *o.AskSize
}

// GetAskSizeOk returns a tuple with the AskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolsQuotesInner) GetAskSizeOk() (*float32, bool) {
	if o == nil || isNil(o.AskSize) {
    return nil, false
	}
	return o.AskSize, true
}

// HasAskSize returns a boolean if a field has been set.
func (o *SymbolsQuotesInner) HasAskSize() bool {
	if o != nil && !isNil(o.AskSize) {
		return true
	}

	return false
}

// SetAskSize gets a reference to the given float32 and assigns it to the AskSize field.
func (o *SymbolsQuotesInner) SetAskSize(v float32) {
	o.AskSize = &v
}

func (o SymbolsQuotesInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !isNil(o.BidPrice) {
		toSerialize["bid_price"] = o.BidPrice
	}
	if !isNil(o.AskPrice) {
		toSerialize["ask_price"] = o.AskPrice
	}
	if !isNil(o.LastTradePrice) {
		toSerialize["last_trade_price"] = o.LastTradePrice
	}
	if !isNil(o.BidSize) {
		toSerialize["bid_size"] = o.BidSize
	}
	if !isNil(o.AskSize) {
		toSerialize["ask_size"] = o.AskSize
	}
	return json.Marshal(toSerialize)
}

type NullableSymbolsQuotesInner struct {
	value *SymbolsQuotesInner
	isSet bool
}

func (v NullableSymbolsQuotesInner) Get() *SymbolsQuotesInner {
	return v.value
}

func (v *NullableSymbolsQuotesInner) Set(val *SymbolsQuotesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbolsQuotesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbolsQuotesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbolsQuotesInner(val *SymbolsQuotesInner) *NullableSymbolsQuotesInner {
	return &NullableSymbolsQuotesInner{value: val, isSet: true}
}

func (v NullableSymbolsQuotesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbolsQuotesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


