/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// SnapTradeAPIDisclaimerAcceptStatus Status of user acceptance of SnapTrade API disclaimer
type SnapTradeAPIDisclaimerAcceptStatus struct {
	Accepted *bool `json:"accepted,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnapTradeAPIDisclaimerAcceptStatus SnapTradeAPIDisclaimerAcceptStatus

// NewSnapTradeAPIDisclaimerAcceptStatus instantiates a new SnapTradeAPIDisclaimerAcceptStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapTradeAPIDisclaimerAcceptStatus() *SnapTradeAPIDisclaimerAcceptStatus {
	this := SnapTradeAPIDisclaimerAcceptStatus{}
	return &this
}

// NewSnapTradeAPIDisclaimerAcceptStatusWithDefaults instantiates a new SnapTradeAPIDisclaimerAcceptStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapTradeAPIDisclaimerAcceptStatusWithDefaults() *SnapTradeAPIDisclaimerAcceptStatus {
	this := SnapTradeAPIDisclaimerAcceptStatus{}
	return &this
}

// GetAccepted returns the Accepted field value if set, zero value otherwise.
func (o *SnapTradeAPIDisclaimerAcceptStatus) GetAccepted() bool {
	if o == nil || isNil(o.Accepted) {
		var ret bool
		return ret
	}
	return *o.Accepted
}

// GetAcceptedOk returns a tuple with the Accepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapTradeAPIDisclaimerAcceptStatus) GetAcceptedOk() (*bool, bool) {
	if o == nil || isNil(o.Accepted) {
    return nil, false
	}
	return o.Accepted, true
}

// HasAccepted returns a boolean if a field has been set.
func (o *SnapTradeAPIDisclaimerAcceptStatus) HasAccepted() bool {
	if o != nil && !isNil(o.Accepted) {
		return true
	}

	return false
}

// SetAccepted gets a reference to the given bool and assigns it to the Accepted field.
func (o *SnapTradeAPIDisclaimerAcceptStatus) SetAccepted(v bool) {
	o.Accepted = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *SnapTradeAPIDisclaimerAcceptStatus) GetTimestamp() string {
	if o == nil || isNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapTradeAPIDisclaimerAcceptStatus) GetTimestampOk() (*string, bool) {
	if o == nil || isNil(o.Timestamp) {
    return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *SnapTradeAPIDisclaimerAcceptStatus) HasTimestamp() bool {
	if o != nil && !isNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *SnapTradeAPIDisclaimerAcceptStatus) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o SnapTradeAPIDisclaimerAcceptStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Accepted) {
		toSerialize["accepted"] = o.Accepted
	}
	if !isNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SnapTradeAPIDisclaimerAcceptStatus) UnmarshalJSON(bytes []byte) (err error) {
	varSnapTradeAPIDisclaimerAcceptStatus := _SnapTradeAPIDisclaimerAcceptStatus{}

	if err = json.Unmarshal(bytes, &varSnapTradeAPIDisclaimerAcceptStatus); err == nil {
		*o = SnapTradeAPIDisclaimerAcceptStatus(varSnapTradeAPIDisclaimerAcceptStatus)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accepted")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnapTradeAPIDisclaimerAcceptStatus struct {
	value *SnapTradeAPIDisclaimerAcceptStatus
	isSet bool
}

func (v NullableSnapTradeAPIDisclaimerAcceptStatus) Get() *SnapTradeAPIDisclaimerAcceptStatus {
	return v.value
}

func (v *NullableSnapTradeAPIDisclaimerAcceptStatus) Set(val *SnapTradeAPIDisclaimerAcceptStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapTradeAPIDisclaimerAcceptStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapTradeAPIDisclaimerAcceptStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapTradeAPIDisclaimerAcceptStatus(val *SnapTradeAPIDisclaimerAcceptStatus) *NullableSnapTradeAPIDisclaimerAcceptStatus {
	return &NullableSnapTradeAPIDisclaimerAcceptStatus{value: val, isSet: true}
}

func (v NullableSnapTradeAPIDisclaimerAcceptStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapTradeAPIDisclaimerAcceptStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


