/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// ExchangeRatePairs The exchange rate of a pair of currencies
type ExchangeRatePairs struct {
	Src *Currency `json:"src,omitempty"`
	Dst *Currency `json:"dst,omitempty"`
	ExchangeRate *float32 `json:"exchange_rate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExchangeRatePairs ExchangeRatePairs

// NewExchangeRatePairs instantiates a new ExchangeRatePairs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRatePairs() *ExchangeRatePairs {
	this := ExchangeRatePairs{}
	return &this
}

// NewExchangeRatePairsWithDefaults instantiates a new ExchangeRatePairs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRatePairsWithDefaults() *ExchangeRatePairs {
	this := ExchangeRatePairs{}
	return &this
}

// GetSrc returns the Src field value if set, zero value otherwise.
func (o *ExchangeRatePairs) GetSrc() Currency {
	if o == nil || isNil(o.Src) {
		var ret Currency
		return ret
	}
	return *o.Src
}

// GetSrcOk returns a tuple with the Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRatePairs) GetSrcOk() (*Currency, bool) {
	if o == nil || isNil(o.Src) {
    return nil, false
	}
	return o.Src, true
}

// HasSrc returns a boolean if a field has been set.
func (o *ExchangeRatePairs) HasSrc() bool {
	if o != nil && !isNil(o.Src) {
		return true
	}

	return false
}

// SetSrc gets a reference to the given Currency and assigns it to the Src field.
func (o *ExchangeRatePairs) SetSrc(v Currency) {
	o.Src = &v
}

// GetDst returns the Dst field value if set, zero value otherwise.
func (o *ExchangeRatePairs) GetDst() Currency {
	if o == nil || isNil(o.Dst) {
		var ret Currency
		return ret
	}
	return *o.Dst
}

// GetDstOk returns a tuple with the Dst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRatePairs) GetDstOk() (*Currency, bool) {
	if o == nil || isNil(o.Dst) {
    return nil, false
	}
	return o.Dst, true
}

// HasDst returns a boolean if a field has been set.
func (o *ExchangeRatePairs) HasDst() bool {
	if o != nil && !isNil(o.Dst) {
		return true
	}

	return false
}

// SetDst gets a reference to the given Currency and assigns it to the Dst field.
func (o *ExchangeRatePairs) SetDst(v Currency) {
	o.Dst = &v
}

// GetExchangeRate returns the ExchangeRate field value if set, zero value otherwise.
func (o *ExchangeRatePairs) GetExchangeRate() float32 {
	if o == nil || isNil(o.ExchangeRate) {
		var ret float32
		return ret
	}
	return *o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRatePairs) GetExchangeRateOk() (*float32, bool) {
	if o == nil || isNil(o.ExchangeRate) {
    return nil, false
	}
	return o.ExchangeRate, true
}

// HasExchangeRate returns a boolean if a field has been set.
func (o *ExchangeRatePairs) HasExchangeRate() bool {
	if o != nil && !isNil(o.ExchangeRate) {
		return true
	}

	return false
}

// SetExchangeRate gets a reference to the given float32 and assigns it to the ExchangeRate field.
func (o *ExchangeRatePairs) SetExchangeRate(v float32) {
	o.ExchangeRate = &v
}

func (o ExchangeRatePairs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Src) {
		toSerialize["src"] = o.Src
	}
	if !isNil(o.Dst) {
		toSerialize["dst"] = o.Dst
	}
	if !isNil(o.ExchangeRate) {
		toSerialize["exchange_rate"] = o.ExchangeRate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ExchangeRatePairs) UnmarshalJSON(bytes []byte) (err error) {
	varExchangeRatePairs := _ExchangeRatePairs{}

	if err = json.Unmarshal(bytes, &varExchangeRatePairs); err == nil {
		*o = ExchangeRatePairs(varExchangeRatePairs)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "src")
		delete(additionalProperties, "dst")
		delete(additionalProperties, "exchange_rate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExchangeRatePairs struct {
	value *ExchangeRatePairs
	isSet bool
}

func (v NullableExchangeRatePairs) Get() *ExchangeRatePairs {
	return v.value
}

func (v *NullableExchangeRatePairs) Set(val *ExchangeRatePairs) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRatePairs) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRatePairs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRatePairs(val *ExchangeRatePairs) *NullableExchangeRatePairs {
	return &NullableExchangeRatePairs{value: val, isSet: true}
}

func (v NullableExchangeRatePairs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRatePairs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


