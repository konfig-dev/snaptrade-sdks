/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// BrokerageSymbolOptionSymbol struct for BrokerageSymbolOptionSymbol
type BrokerageSymbolOptionSymbol struct {
	Id string `json:"id"`
	Ticker string `json:"ticker"`
	OptionType string `json:"option_type"`
	StrikePrice float32 `json:"strike_price"`
	ExpirationDate string `json:"expiration_date"`
	IsMiniOption *bool `json:"is_mini_option,omitempty"`
	UnderlyingSymbol UnderlyingSymbol `json:"underlying_symbol"`
	LocalId *string `json:"local_id,omitempty"`
	ExchangeId *string `json:"exchange_id,omitempty"`
}

// NewBrokerageSymbolOptionSymbol instantiates a new BrokerageSymbolOptionSymbol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrokerageSymbolOptionSymbol(id string, ticker string, optionType string, strikePrice float32, expirationDate string, underlyingSymbol UnderlyingSymbol) *BrokerageSymbolOptionSymbol {
	this := BrokerageSymbolOptionSymbol{}
	this.Id = id
	this.Ticker = ticker
	this.OptionType = optionType
	this.StrikePrice = strikePrice
	this.ExpirationDate = expirationDate
	this.UnderlyingSymbol = underlyingSymbol
	return &this
}

// NewBrokerageSymbolOptionSymbolWithDefaults instantiates a new BrokerageSymbolOptionSymbol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrokerageSymbolOptionSymbolWithDefaults() *BrokerageSymbolOptionSymbol {
	this := BrokerageSymbolOptionSymbol{}
	return &this
}

// GetId returns the Id field value
func (o *BrokerageSymbolOptionSymbol) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BrokerageSymbolOptionSymbol) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BrokerageSymbolOptionSymbol) SetId(v string) {
	o.Id = v
}

// GetTicker returns the Ticker field value
func (o *BrokerageSymbolOptionSymbol) GetTicker() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value
// and a boolean to check if the value has been set.
func (o *BrokerageSymbolOptionSymbol) GetTickerOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ticker, true
}

// SetTicker sets field value
func (o *BrokerageSymbolOptionSymbol) SetTicker(v string) {
	o.Ticker = v
}

// GetOptionType returns the OptionType field value
func (o *BrokerageSymbolOptionSymbol) GetOptionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OptionType
}

// GetOptionTypeOk returns a tuple with the OptionType field value
// and a boolean to check if the value has been set.
func (o *BrokerageSymbolOptionSymbol) GetOptionTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OptionType, true
}

// SetOptionType sets field value
func (o *BrokerageSymbolOptionSymbol) SetOptionType(v string) {
	o.OptionType = v
}

// GetStrikePrice returns the StrikePrice field value
func (o *BrokerageSymbolOptionSymbol) GetStrikePrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StrikePrice
}

// GetStrikePriceOk returns a tuple with the StrikePrice field value
// and a boolean to check if the value has been set.
func (o *BrokerageSymbolOptionSymbol) GetStrikePriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.StrikePrice, true
}

// SetStrikePrice sets field value
func (o *BrokerageSymbolOptionSymbol) SetStrikePrice(v float32) {
	o.StrikePrice = v
}

// GetExpirationDate returns the ExpirationDate field value
func (o *BrokerageSymbolOptionSymbol) GetExpirationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value
// and a boolean to check if the value has been set.
func (o *BrokerageSymbolOptionSymbol) GetExpirationDateOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ExpirationDate, true
}

// SetExpirationDate sets field value
func (o *BrokerageSymbolOptionSymbol) SetExpirationDate(v string) {
	o.ExpirationDate = v
}

// GetIsMiniOption returns the IsMiniOption field value if set, zero value otherwise.
func (o *BrokerageSymbolOptionSymbol) GetIsMiniOption() bool {
	if o == nil || isNil(o.IsMiniOption) {
		var ret bool
		return ret
	}
	return *o.IsMiniOption
}

// GetIsMiniOptionOk returns a tuple with the IsMiniOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrokerageSymbolOptionSymbol) GetIsMiniOptionOk() (*bool, bool) {
	if o == nil || isNil(o.IsMiniOption) {
    return nil, false
	}
	return o.IsMiniOption, true
}

// HasIsMiniOption returns a boolean if a field has been set.
func (o *BrokerageSymbolOptionSymbol) HasIsMiniOption() bool {
	if o != nil && !isNil(o.IsMiniOption) {
		return true
	}

	return false
}

// SetIsMiniOption gets a reference to the given bool and assigns it to the IsMiniOption field.
func (o *BrokerageSymbolOptionSymbol) SetIsMiniOption(v bool) {
	o.IsMiniOption = &v
}

// GetUnderlyingSymbol returns the UnderlyingSymbol field value
func (o *BrokerageSymbolOptionSymbol) GetUnderlyingSymbol() UnderlyingSymbol {
	if o == nil {
		var ret UnderlyingSymbol
		return ret
	}

	return o.UnderlyingSymbol
}

// GetUnderlyingSymbolOk returns a tuple with the UnderlyingSymbol field value
// and a boolean to check if the value has been set.
func (o *BrokerageSymbolOptionSymbol) GetUnderlyingSymbolOk() (*UnderlyingSymbol, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UnderlyingSymbol, true
}

// SetUnderlyingSymbol sets field value
func (o *BrokerageSymbolOptionSymbol) SetUnderlyingSymbol(v UnderlyingSymbol) {
	o.UnderlyingSymbol = v
}

// GetLocalId returns the LocalId field value if set, zero value otherwise.
func (o *BrokerageSymbolOptionSymbol) GetLocalId() string {
	if o == nil || isNil(o.LocalId) {
		var ret string
		return ret
	}
	return *o.LocalId
}

// GetLocalIdOk returns a tuple with the LocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrokerageSymbolOptionSymbol) GetLocalIdOk() (*string, bool) {
	if o == nil || isNil(o.LocalId) {
    return nil, false
	}
	return o.LocalId, true
}

// HasLocalId returns a boolean if a field has been set.
func (o *BrokerageSymbolOptionSymbol) HasLocalId() bool {
	if o != nil && !isNil(o.LocalId) {
		return true
	}

	return false
}

// SetLocalId gets a reference to the given string and assigns it to the LocalId field.
func (o *BrokerageSymbolOptionSymbol) SetLocalId(v string) {
	o.LocalId = &v
}

// GetExchangeId returns the ExchangeId field value if set, zero value otherwise.
func (o *BrokerageSymbolOptionSymbol) GetExchangeId() string {
	if o == nil || isNil(o.ExchangeId) {
		var ret string
		return ret
	}
	return *o.ExchangeId
}

// GetExchangeIdOk returns a tuple with the ExchangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrokerageSymbolOptionSymbol) GetExchangeIdOk() (*string, bool) {
	if o == nil || isNil(o.ExchangeId) {
    return nil, false
	}
	return o.ExchangeId, true
}

// HasExchangeId returns a boolean if a field has been set.
func (o *BrokerageSymbolOptionSymbol) HasExchangeId() bool {
	if o != nil && !isNil(o.ExchangeId) {
		return true
	}

	return false
}

// SetExchangeId gets a reference to the given string and assigns it to the ExchangeId field.
func (o *BrokerageSymbolOptionSymbol) SetExchangeId(v string) {
	o.ExchangeId = &v
}

func (o BrokerageSymbolOptionSymbol) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["ticker"] = o.Ticker
	}
	if true {
		toSerialize["option_type"] = o.OptionType
	}
	if true {
		toSerialize["strike_price"] = o.StrikePrice
	}
	if true {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if !isNil(o.IsMiniOption) {
		toSerialize["is_mini_option"] = o.IsMiniOption
	}
	if true {
		toSerialize["underlying_symbol"] = o.UnderlyingSymbol
	}
	if !isNil(o.LocalId) {
		toSerialize["local_id"] = o.LocalId
	}
	if !isNil(o.ExchangeId) {
		toSerialize["exchange_id"] = o.ExchangeId
	}
	return json.Marshal(toSerialize)
}

type NullableBrokerageSymbolOptionSymbol struct {
	value *BrokerageSymbolOptionSymbol
	isSet bool
}

func (v NullableBrokerageSymbolOptionSymbol) Get() *BrokerageSymbolOptionSymbol {
	return v.value
}

func (v *NullableBrokerageSymbolOptionSymbol) Set(val *BrokerageSymbolOptionSymbol) {
	v.value = val
	v.isSet = true
}

func (v NullableBrokerageSymbolOptionSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableBrokerageSymbolOptionSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrokerageSymbolOptionSymbol(val *BrokerageSymbolOptionSymbol) *NullableBrokerageSymbolOptionSymbol {
	return &NullableBrokerageSymbolOptionSymbol{value: val, isSet: true}
}

func (v NullableBrokerageSymbolOptionSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrokerageSymbolOptionSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


