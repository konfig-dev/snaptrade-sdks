/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// MonthlyDividends struct for MonthlyDividends
type MonthlyDividends struct {
	// Date used to specify timeframe for a reporting call (in YYYY-MM-DD format)
	Date *string `json:"date,omitempty"`
	Dividends []DividendAtDate `json:"dividends,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MonthlyDividends MonthlyDividends

// NewMonthlyDividends instantiates a new MonthlyDividends object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthlyDividends() *MonthlyDividends {
	this := MonthlyDividends{}
	return &this
}

// NewMonthlyDividendsWithDefaults instantiates a new MonthlyDividends object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyDividendsWithDefaults() *MonthlyDividends {
	this := MonthlyDividends{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *MonthlyDividends) GetDate() string {
	if o == nil || isNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyDividends) GetDateOk() (*string, bool) {
	if o == nil || isNil(o.Date) {
    return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *MonthlyDividends) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *MonthlyDividends) SetDate(v string) {
	o.Date = &v
}

// GetDividends returns the Dividends field value if set, zero value otherwise.
func (o *MonthlyDividends) GetDividends() []DividendAtDate {
	if o == nil || isNil(o.Dividends) {
		var ret []DividendAtDate
		return ret
	}
	return o.Dividends
}

// GetDividendsOk returns a tuple with the Dividends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyDividends) GetDividendsOk() ([]DividendAtDate, bool) {
	if o == nil || isNil(o.Dividends) {
    return nil, false
	}
	return o.Dividends, true
}

// HasDividends returns a boolean if a field has been set.
func (o *MonthlyDividends) HasDividends() bool {
	if o != nil && !isNil(o.Dividends) {
		return true
	}

	return false
}

// SetDividends gets a reference to the given []DividendAtDate and assigns it to the Dividends field.
func (o *MonthlyDividends) SetDividends(v []DividendAtDate) {
	o.Dividends = v
}

func (o MonthlyDividends) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !isNil(o.Dividends) {
		toSerialize["dividends"] = o.Dividends
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MonthlyDividends) UnmarshalJSON(bytes []byte) (err error) {
	varMonthlyDividends := _MonthlyDividends{}

	if err = json.Unmarshal(bytes, &varMonthlyDividends); err == nil {
		*o = MonthlyDividends(varMonthlyDividends)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "date")
		delete(additionalProperties, "dividends")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMonthlyDividends struct {
	value *MonthlyDividends
	isSet bool
}

func (v NullableMonthlyDividends) Get() *MonthlyDividends {
	return v.value
}

func (v *NullableMonthlyDividends) Set(val *MonthlyDividends) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthlyDividends) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthlyDividends) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthlyDividends(val *MonthlyDividends) *NullableMonthlyDividends {
	return &NullableMonthlyDividends{value: val, isSet: true}
}

func (v NullableMonthlyDividends) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthlyDividends) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


