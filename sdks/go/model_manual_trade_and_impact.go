/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// ManualTradeAndImpact Manual Trade and Impact object
type ManualTradeAndImpact struct {
	Trade *ManualTrade `json:"trade,omitempty"`
	TradeImpacts []ManualTrade `json:"trade_impacts,omitempty"`
	CombinedRemainingBalance *ManualTradeBalance `json:"combined_remaining_balance,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManualTradeAndImpact ManualTradeAndImpact

// NewManualTradeAndImpact instantiates a new ManualTradeAndImpact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualTradeAndImpact() *ManualTradeAndImpact {
	this := ManualTradeAndImpact{}
	return &this
}

// NewManualTradeAndImpactWithDefaults instantiates a new ManualTradeAndImpact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualTradeAndImpactWithDefaults() *ManualTradeAndImpact {
	this := ManualTradeAndImpact{}
	return &this
}

// GetTrade returns the Trade field value if set, zero value otherwise.
func (o *ManualTradeAndImpact) GetTrade() ManualTrade {
	if o == nil || isNil(o.Trade) {
		var ret ManualTrade
		return ret
	}
	return *o.Trade
}

// GetTradeOk returns a tuple with the Trade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTradeAndImpact) GetTradeOk() (*ManualTrade, bool) {
	if o == nil || isNil(o.Trade) {
    return nil, false
	}
	return o.Trade, true
}

// HasTrade returns a boolean if a field has been set.
func (o *ManualTradeAndImpact) HasTrade() bool {
	if o != nil && !isNil(o.Trade) {
		return true
	}

	return false
}

// SetTrade gets a reference to the given ManualTrade and assigns it to the Trade field.
func (o *ManualTradeAndImpact) SetTrade(v ManualTrade) {
	o.Trade = &v
}

// GetTradeImpacts returns the TradeImpacts field value if set, zero value otherwise.
func (o *ManualTradeAndImpact) GetTradeImpacts() []ManualTrade {
	if o == nil || isNil(o.TradeImpacts) {
		var ret []ManualTrade
		return ret
	}
	return o.TradeImpacts
}

// GetTradeImpactsOk returns a tuple with the TradeImpacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTradeAndImpact) GetTradeImpactsOk() ([]ManualTrade, bool) {
	if o == nil || isNil(o.TradeImpacts) {
    return nil, false
	}
	return o.TradeImpacts, true
}

// HasTradeImpacts returns a boolean if a field has been set.
func (o *ManualTradeAndImpact) HasTradeImpacts() bool {
	if o != nil && !isNil(o.TradeImpacts) {
		return true
	}

	return false
}

// SetTradeImpacts gets a reference to the given []ManualTrade and assigns it to the TradeImpacts field.
func (o *ManualTradeAndImpact) SetTradeImpacts(v []ManualTrade) {
	o.TradeImpacts = v
}

// GetCombinedRemainingBalance returns the CombinedRemainingBalance field value if set, zero value otherwise.
func (o *ManualTradeAndImpact) GetCombinedRemainingBalance() ManualTradeBalance {
	if o == nil || isNil(o.CombinedRemainingBalance) {
		var ret ManualTradeBalance
		return ret
	}
	return *o.CombinedRemainingBalance
}

// GetCombinedRemainingBalanceOk returns a tuple with the CombinedRemainingBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTradeAndImpact) GetCombinedRemainingBalanceOk() (*ManualTradeBalance, bool) {
	if o == nil || isNil(o.CombinedRemainingBalance) {
    return nil, false
	}
	return o.CombinedRemainingBalance, true
}

// HasCombinedRemainingBalance returns a boolean if a field has been set.
func (o *ManualTradeAndImpact) HasCombinedRemainingBalance() bool {
	if o != nil && !isNil(o.CombinedRemainingBalance) {
		return true
	}

	return false
}

// SetCombinedRemainingBalance gets a reference to the given ManualTradeBalance and assigns it to the CombinedRemainingBalance field.
func (o *ManualTradeAndImpact) SetCombinedRemainingBalance(v ManualTradeBalance) {
	o.CombinedRemainingBalance = &v
}

func (o ManualTradeAndImpact) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Trade) {
		toSerialize["trade"] = o.Trade
	}
	if !isNil(o.TradeImpacts) {
		toSerialize["trade_impacts"] = o.TradeImpacts
	}
	if !isNil(o.CombinedRemainingBalance) {
		toSerialize["combined_remaining_balance"] = o.CombinedRemainingBalance
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ManualTradeAndImpact) UnmarshalJSON(bytes []byte) (err error) {
	varManualTradeAndImpact := _ManualTradeAndImpact{}

	if err = json.Unmarshal(bytes, &varManualTradeAndImpact); err == nil {
		*o = ManualTradeAndImpact(varManualTradeAndImpact)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "trade")
		delete(additionalProperties, "trade_impacts")
		delete(additionalProperties, "combined_remaining_balance")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManualTradeAndImpact struct {
	value *ManualTradeAndImpact
	isSet bool
}

func (v NullableManualTradeAndImpact) Get() *ManualTradeAndImpact {
	return v.value
}

func (v *NullableManualTradeAndImpact) Set(val *ManualTradeAndImpact) {
	v.value = val
	v.isSet = true
}

func (v NullableManualTradeAndImpact) IsSet() bool {
	return v.isSet
}

func (v *NullableManualTradeAndImpact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualTradeAndImpact(val *ManualTradeAndImpact) *NullableManualTradeAndImpact {
	return &NullableManualTradeAndImpact{value: val, isSet: true}
}

func (v NullableManualTradeAndImpact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualTradeAndImpact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


