/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// USExchange US Stock Exchange
type USExchange struct {
	Id *string `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	MicCode *string `json:"mic_code,omitempty"`
	Name *string `json:"name,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
	StartTime *string `json:"start_time,omitempty"`
	CloseTime *string `json:"close_time,omitempty"`
	Suffix NullableString `json:"suffix,omitempty"`
	AllowsCryptocurrencySymbols *bool `json:"allows_cryptocurrency_symbols,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _USExchange USExchange

// NewUSExchange instantiates a new USExchange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUSExchange() *USExchange {
	this := USExchange{}
	return &this
}

// NewUSExchangeWithDefaults instantiates a new USExchange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUSExchangeWithDefaults() *USExchange {
	this := USExchange{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *USExchange) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *USExchange) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *USExchange) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *USExchange) SetId(v string) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *USExchange) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *USExchange) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
    return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *USExchange) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *USExchange) SetCode(v string) {
	o.Code = &v
}

// GetMicCode returns the MicCode field value if set, zero value otherwise.
func (o *USExchange) GetMicCode() string {
	if o == nil || isNil(o.MicCode) {
		var ret string
		return ret
	}
	return *o.MicCode
}

// GetMicCodeOk returns a tuple with the MicCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *USExchange) GetMicCodeOk() (*string, bool) {
	if o == nil || isNil(o.MicCode) {
    return nil, false
	}
	return o.MicCode, true
}

// HasMicCode returns a boolean if a field has been set.
func (o *USExchange) HasMicCode() bool {
	if o != nil && !isNil(o.MicCode) {
		return true
	}

	return false
}

// SetMicCode gets a reference to the given string and assigns it to the MicCode field.
func (o *USExchange) SetMicCode(v string) {
	o.MicCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *USExchange) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *USExchange) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *USExchange) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *USExchange) SetName(v string) {
	o.Name = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *USExchange) GetTimezone() string {
	if o == nil || isNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *USExchange) GetTimezoneOk() (*string, bool) {
	if o == nil || isNil(o.Timezone) {
    return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *USExchange) HasTimezone() bool {
	if o != nil && !isNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *USExchange) SetTimezone(v string) {
	o.Timezone = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *USExchange) GetStartTime() string {
	if o == nil || isNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *USExchange) GetStartTimeOk() (*string, bool) {
	if o == nil || isNil(o.StartTime) {
    return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *USExchange) HasStartTime() bool {
	if o != nil && !isNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *USExchange) SetStartTime(v string) {
	o.StartTime = &v
}

// GetCloseTime returns the CloseTime field value if set, zero value otherwise.
func (o *USExchange) GetCloseTime() string {
	if o == nil || isNil(o.CloseTime) {
		var ret string
		return ret
	}
	return *o.CloseTime
}

// GetCloseTimeOk returns a tuple with the CloseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *USExchange) GetCloseTimeOk() (*string, bool) {
	if o == nil || isNil(o.CloseTime) {
    return nil, false
	}
	return o.CloseTime, true
}

// HasCloseTime returns a boolean if a field has been set.
func (o *USExchange) HasCloseTime() bool {
	if o != nil && !isNil(o.CloseTime) {
		return true
	}

	return false
}

// SetCloseTime gets a reference to the given string and assigns it to the CloseTime field.
func (o *USExchange) SetCloseTime(v string) {
	o.CloseTime = &v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *USExchange) GetSuffix() string {
	if o == nil || isNil(o.Suffix.Get()) {
		var ret string
		return ret
	}
	return *o.Suffix.Get()
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *USExchange) GetSuffixOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Suffix.Get(), o.Suffix.IsSet()
}

// HasSuffix returns a boolean if a field has been set.
func (o *USExchange) HasSuffix() bool {
	if o != nil && o.Suffix.IsSet() {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given NullableString and assigns it to the Suffix field.
func (o *USExchange) SetSuffix(v string) {
	o.Suffix.Set(&v)
}
// SetSuffixNil sets the value for Suffix to be an explicit nil
func (o *USExchange) SetSuffixNil() {
	o.Suffix.Set(nil)
}

// UnsetSuffix ensures that no value is present for Suffix, not even an explicit nil
func (o *USExchange) UnsetSuffix() {
	o.Suffix.Unset()
}

// GetAllowsCryptocurrencySymbols returns the AllowsCryptocurrencySymbols field value if set, zero value otherwise.
func (o *USExchange) GetAllowsCryptocurrencySymbols() bool {
	if o == nil || isNil(o.AllowsCryptocurrencySymbols) {
		var ret bool
		return ret
	}
	return *o.AllowsCryptocurrencySymbols
}

// GetAllowsCryptocurrencySymbolsOk returns a tuple with the AllowsCryptocurrencySymbols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *USExchange) GetAllowsCryptocurrencySymbolsOk() (*bool, bool) {
	if o == nil || isNil(o.AllowsCryptocurrencySymbols) {
    return nil, false
	}
	return o.AllowsCryptocurrencySymbols, true
}

// HasAllowsCryptocurrencySymbols returns a boolean if a field has been set.
func (o *USExchange) HasAllowsCryptocurrencySymbols() bool {
	if o != nil && !isNil(o.AllowsCryptocurrencySymbols) {
		return true
	}

	return false
}

// SetAllowsCryptocurrencySymbols gets a reference to the given bool and assigns it to the AllowsCryptocurrencySymbols field.
func (o *USExchange) SetAllowsCryptocurrencySymbols(v bool) {
	o.AllowsCryptocurrencySymbols = &v
}

func (o USExchange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !isNil(o.MicCode) {
		toSerialize["mic_code"] = o.MicCode
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !isNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !isNil(o.CloseTime) {
		toSerialize["close_time"] = o.CloseTime
	}
	if o.Suffix.IsSet() {
		toSerialize["suffix"] = o.Suffix.Get()
	}
	if !isNil(o.AllowsCryptocurrencySymbols) {
		toSerialize["allows_cryptocurrency_symbols"] = o.AllowsCryptocurrencySymbols
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *USExchange) UnmarshalJSON(bytes []byte) (err error) {
	varUSExchange := _USExchange{}

	if err = json.Unmarshal(bytes, &varUSExchange); err == nil {
		*o = USExchange(varUSExchange)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "code")
		delete(additionalProperties, "mic_code")
		delete(additionalProperties, "name")
		delete(additionalProperties, "timezone")
		delete(additionalProperties, "start_time")
		delete(additionalProperties, "close_time")
		delete(additionalProperties, "suffix")
		delete(additionalProperties, "allows_cryptocurrency_symbols")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUSExchange struct {
	value *USExchange
	isSet bool
}

func (v NullableUSExchange) Get() *USExchange {
	return v.value
}

func (v *NullableUSExchange) Set(val *USExchange) {
	v.value = val
	v.isSet = true
}

func (v NullableUSExchange) IsSet() bool {
	return v.isSet
}

func (v *NullableUSExchange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUSExchange(val *USExchange) *NullableUSExchange {
	return &NullableUSExchange{value: val, isSet: true}
}

func (v NullableUSExchange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUSExchange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


