/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// OptionChainInner struct for OptionChainInner
type OptionChainInner struct {
	ExpiryDate *string `json:"expiryDate,omitempty"`
	Description *string `json:"description,omitempty"`
	ListingExchange *string `json:"listingExchange,omitempty"`
	OptionExerciseType *string `json:"optionExerciseType,omitempty"`
	ChainPerRoot []OptionChainInnerChainPerRootInner `json:"chainPerRoot,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OptionChainInner OptionChainInner

// NewOptionChainInner instantiates a new OptionChainInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionChainInner() *OptionChainInner {
	this := OptionChainInner{}
	return &this
}

// NewOptionChainInnerWithDefaults instantiates a new OptionChainInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionChainInnerWithDefaults() *OptionChainInner {
	this := OptionChainInner{}
	return &this
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *OptionChainInner) GetExpiryDate() string {
	if o == nil || isNil(o.ExpiryDate) {
		var ret string
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChainInner) GetExpiryDateOk() (*string, bool) {
	if o == nil || isNil(o.ExpiryDate) {
    return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *OptionChainInner) HasExpiryDate() bool {
	if o != nil && !isNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given string and assigns it to the ExpiryDate field.
func (o *OptionChainInner) SetExpiryDate(v string) {
	o.ExpiryDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OptionChainInner) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChainInner) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OptionChainInner) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OptionChainInner) SetDescription(v string) {
	o.Description = &v
}

// GetListingExchange returns the ListingExchange field value if set, zero value otherwise.
func (o *OptionChainInner) GetListingExchange() string {
	if o == nil || isNil(o.ListingExchange) {
		var ret string
		return ret
	}
	return *o.ListingExchange
}

// GetListingExchangeOk returns a tuple with the ListingExchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChainInner) GetListingExchangeOk() (*string, bool) {
	if o == nil || isNil(o.ListingExchange) {
    return nil, false
	}
	return o.ListingExchange, true
}

// HasListingExchange returns a boolean if a field has been set.
func (o *OptionChainInner) HasListingExchange() bool {
	if o != nil && !isNil(o.ListingExchange) {
		return true
	}

	return false
}

// SetListingExchange gets a reference to the given string and assigns it to the ListingExchange field.
func (o *OptionChainInner) SetListingExchange(v string) {
	o.ListingExchange = &v
}

// GetOptionExerciseType returns the OptionExerciseType field value if set, zero value otherwise.
func (o *OptionChainInner) GetOptionExerciseType() string {
	if o == nil || isNil(o.OptionExerciseType) {
		var ret string
		return ret
	}
	return *o.OptionExerciseType
}

// GetOptionExerciseTypeOk returns a tuple with the OptionExerciseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChainInner) GetOptionExerciseTypeOk() (*string, bool) {
	if o == nil || isNil(o.OptionExerciseType) {
    return nil, false
	}
	return o.OptionExerciseType, true
}

// HasOptionExerciseType returns a boolean if a field has been set.
func (o *OptionChainInner) HasOptionExerciseType() bool {
	if o != nil && !isNil(o.OptionExerciseType) {
		return true
	}

	return false
}

// SetOptionExerciseType gets a reference to the given string and assigns it to the OptionExerciseType field.
func (o *OptionChainInner) SetOptionExerciseType(v string) {
	o.OptionExerciseType = &v
}

// GetChainPerRoot returns the ChainPerRoot field value if set, zero value otherwise.
func (o *OptionChainInner) GetChainPerRoot() []OptionChainInnerChainPerRootInner {
	if o == nil || isNil(o.ChainPerRoot) {
		var ret []OptionChainInnerChainPerRootInner
		return ret
	}
	return o.ChainPerRoot
}

// GetChainPerRootOk returns a tuple with the ChainPerRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChainInner) GetChainPerRootOk() ([]OptionChainInnerChainPerRootInner, bool) {
	if o == nil || isNil(o.ChainPerRoot) {
    return nil, false
	}
	return o.ChainPerRoot, true
}

// HasChainPerRoot returns a boolean if a field has been set.
func (o *OptionChainInner) HasChainPerRoot() bool {
	if o != nil && !isNil(o.ChainPerRoot) {
		return true
	}

	return false
}

// SetChainPerRoot gets a reference to the given []OptionChainInnerChainPerRootInner and assigns it to the ChainPerRoot field.
func (o *OptionChainInner) SetChainPerRoot(v []OptionChainInnerChainPerRootInner) {
	o.ChainPerRoot = v
}

func (o OptionChainInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.ListingExchange) {
		toSerialize["listingExchange"] = o.ListingExchange
	}
	if !isNil(o.OptionExerciseType) {
		toSerialize["optionExerciseType"] = o.OptionExerciseType
	}
	if !isNil(o.ChainPerRoot) {
		toSerialize["chainPerRoot"] = o.ChainPerRoot
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OptionChainInner) UnmarshalJSON(bytes []byte) (err error) {
	varOptionChainInner := _OptionChainInner{}

	if err = json.Unmarshal(bytes, &varOptionChainInner); err == nil {
		*o = OptionChainInner(varOptionChainInner)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "expiryDate")
		delete(additionalProperties, "description")
		delete(additionalProperties, "listingExchange")
		delete(additionalProperties, "optionExerciseType")
		delete(additionalProperties, "chainPerRoot")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOptionChainInner struct {
	value *OptionChainInner
	isSet bool
}

func (v NullableOptionChainInner) Get() *OptionChainInner {
	return v.value
}

func (v *NullableOptionChainInner) Set(val *OptionChainInner) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionChainInner) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionChainInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionChainInner(val *OptionChainInner) *NullableOptionChainInner {
	return &NullableOptionChainInner{value: val, isSet: true}
}

func (v NullableOptionChainInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionChainInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


