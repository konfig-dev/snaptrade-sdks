/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// CalculatedTrade Array of trades to make to rebalance portfolio
type CalculatedTrade struct {
	Id *string `json:"id,omitempty"`
	Trades []Trade `json:"trades,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CalculatedTrade CalculatedTrade

// NewCalculatedTrade instantiates a new CalculatedTrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalculatedTrade() *CalculatedTrade {
	this := CalculatedTrade{}
	return &this
}

// NewCalculatedTradeWithDefaults instantiates a new CalculatedTrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalculatedTradeWithDefaults() *CalculatedTrade {
	this := CalculatedTrade{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CalculatedTrade) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedTrade) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CalculatedTrade) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CalculatedTrade) SetId(v string) {
	o.Id = &v
}

// GetTrades returns the Trades field value if set, zero value otherwise.
func (o *CalculatedTrade) GetTrades() []Trade {
	if o == nil || isNil(o.Trades) {
		var ret []Trade
		return ret
	}
	return o.Trades
}

// GetTradesOk returns a tuple with the Trades field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedTrade) GetTradesOk() ([]Trade, bool) {
	if o == nil || isNil(o.Trades) {
    return nil, false
	}
	return o.Trades, true
}

// HasTrades returns a boolean if a field has been set.
func (o *CalculatedTrade) HasTrades() bool {
	if o != nil && !isNil(o.Trades) {
		return true
	}

	return false
}

// SetTrades gets a reference to the given []Trade and assigns it to the Trades field.
func (o *CalculatedTrade) SetTrades(v []Trade) {
	o.Trades = v
}

func (o CalculatedTrade) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Trades) {
		toSerialize["trades"] = o.Trades
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CalculatedTrade) UnmarshalJSON(bytes []byte) (err error) {
	varCalculatedTrade := _CalculatedTrade{}

	if err = json.Unmarshal(bytes, &varCalculatedTrade); err == nil {
		*o = CalculatedTrade(varCalculatedTrade)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "trades")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCalculatedTrade struct {
	value *CalculatedTrade
	isSet bool
}

func (v NullableCalculatedTrade) Get() *CalculatedTrade {
	return v.value
}

func (v *NullableCalculatedTrade) Set(val *CalculatedTrade) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculatedTrade) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculatedTrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculatedTrade(val *CalculatedTrade) *NullableCalculatedTrade {
	return &NullableCalculatedTrade{value: val, isSet: true}
}

func (v NullableCalculatedTrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculatedTrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


