/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// OptionsGetOptionStrategyRequest struct for OptionsGetOptionStrategyRequest
type OptionsGetOptionStrategyRequest struct {
	UnderlyingSymbolId string `json:"underlying_symbol_id"`
	Legs []OptionLeg `json:"legs"`
	StrategyType string `json:"strategy_type"`
}

// NewOptionsGetOptionStrategyRequest instantiates a new OptionsGetOptionStrategyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionsGetOptionStrategyRequest(underlyingSymbolId string, legs []OptionLeg, strategyType string) *OptionsGetOptionStrategyRequest {
	this := OptionsGetOptionStrategyRequest{}
	this.UnderlyingSymbolId = underlyingSymbolId
	this.Legs = legs
	this.StrategyType = strategyType
	return &this
}

// NewOptionsGetOptionStrategyRequestWithDefaults instantiates a new OptionsGetOptionStrategyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionsGetOptionStrategyRequestWithDefaults() *OptionsGetOptionStrategyRequest {
	this := OptionsGetOptionStrategyRequest{}
	return &this
}

// GetUnderlyingSymbolId returns the UnderlyingSymbolId field value
func (o *OptionsGetOptionStrategyRequest) GetUnderlyingSymbolId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnderlyingSymbolId
}

// GetUnderlyingSymbolIdOk returns a tuple with the UnderlyingSymbolId field value
// and a boolean to check if the value has been set.
func (o *OptionsGetOptionStrategyRequest) GetUnderlyingSymbolIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UnderlyingSymbolId, true
}

// SetUnderlyingSymbolId sets field value
func (o *OptionsGetOptionStrategyRequest) SetUnderlyingSymbolId(v string) {
	o.UnderlyingSymbolId = v
}

// GetLegs returns the Legs field value
func (o *OptionsGetOptionStrategyRequest) GetLegs() []OptionLeg {
	if o == nil {
		var ret []OptionLeg
		return ret
	}

	return o.Legs
}

// GetLegsOk returns a tuple with the Legs field value
// and a boolean to check if the value has been set.
func (o *OptionsGetOptionStrategyRequest) GetLegsOk() ([]OptionLeg, bool) {
	if o == nil {
    return nil, false
	}
	return o.Legs, true
}

// SetLegs sets field value
func (o *OptionsGetOptionStrategyRequest) SetLegs(v []OptionLeg) {
	o.Legs = v
}

// GetStrategyType returns the StrategyType field value
func (o *OptionsGetOptionStrategyRequest) GetStrategyType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StrategyType
}

// GetStrategyTypeOk returns a tuple with the StrategyType field value
// and a boolean to check if the value has been set.
func (o *OptionsGetOptionStrategyRequest) GetStrategyTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.StrategyType, true
}

// SetStrategyType sets field value
func (o *OptionsGetOptionStrategyRequest) SetStrategyType(v string) {
	o.StrategyType = v
}

func (o OptionsGetOptionStrategyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["underlying_symbol_id"] = o.UnderlyingSymbolId
	}
	if true {
		toSerialize["legs"] = o.Legs
	}
	if true {
		toSerialize["strategy_type"] = o.StrategyType
	}
	return json.Marshal(toSerialize)
}

type NullableOptionsGetOptionStrategyRequest struct {
	value *OptionsGetOptionStrategyRequest
	isSet bool
}

func (v NullableOptionsGetOptionStrategyRequest) Get() *OptionsGetOptionStrategyRequest {
	return v.value
}

func (v *NullableOptionsGetOptionStrategyRequest) Set(val *OptionsGetOptionStrategyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionsGetOptionStrategyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionsGetOptionStrategyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionsGetOptionStrategyRequest(val *OptionsGetOptionStrategyRequest) *NullableOptionsGetOptionStrategyRequest {
	return &NullableOptionsGetOptionStrategyRequest{value: val, isSet: true}
}

func (v NullableOptionsGetOptionStrategyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionsGetOptionStrategyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


