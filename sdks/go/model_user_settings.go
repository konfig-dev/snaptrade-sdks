/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// UserSettings User account settings
type UserSettings struct {
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
	ReceiveCashNotification *bool `json:"receive_cash_notification,omitempty"`
	ReceiveDriftNotification *bool `json:"receive_drift_notification,omitempty"`
	UserTrialActivated *bool `json:"user_trial_activated,omitempty"`
	ActivatedTrialDate *string `json:"activated_trial_date,omitempty"`
	Demo *bool `json:"demo,omitempty"`
	ApiEnabled *bool `json:"api_enabled,omitempty"`
	DriftThreshold *float32 `json:"drift_threshold,omitempty"`
	PreferredCurrency *Currency `json:"preferred_currency,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserSettings UserSettings

// NewUserSettings instantiates a new UserSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettings() *UserSettings {
	this := UserSettings{}
	return &this
}

// NewUserSettingsWithDefaults instantiates a new UserSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsWithDefaults() *UserSettings {
	this := UserSettings{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserSettings) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
    return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserSettings) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserSettings) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserSettings) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserSettings) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserSettings) SetName(v string) {
	o.Name = &v
}

// GetReceiveCashNotification returns the ReceiveCashNotification field value if set, zero value otherwise.
func (o *UserSettings) GetReceiveCashNotification() bool {
	if o == nil || isNil(o.ReceiveCashNotification) {
		var ret bool
		return ret
	}
	return *o.ReceiveCashNotification
}

// GetReceiveCashNotificationOk returns a tuple with the ReceiveCashNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetReceiveCashNotificationOk() (*bool, bool) {
	if o == nil || isNil(o.ReceiveCashNotification) {
    return nil, false
	}
	return o.ReceiveCashNotification, true
}

// HasReceiveCashNotification returns a boolean if a field has been set.
func (o *UserSettings) HasReceiveCashNotification() bool {
	if o != nil && !isNil(o.ReceiveCashNotification) {
		return true
	}

	return false
}

// SetReceiveCashNotification gets a reference to the given bool and assigns it to the ReceiveCashNotification field.
func (o *UserSettings) SetReceiveCashNotification(v bool) {
	o.ReceiveCashNotification = &v
}

// GetReceiveDriftNotification returns the ReceiveDriftNotification field value if set, zero value otherwise.
func (o *UserSettings) GetReceiveDriftNotification() bool {
	if o == nil || isNil(o.ReceiveDriftNotification) {
		var ret bool
		return ret
	}
	return *o.ReceiveDriftNotification
}

// GetReceiveDriftNotificationOk returns a tuple with the ReceiveDriftNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetReceiveDriftNotificationOk() (*bool, bool) {
	if o == nil || isNil(o.ReceiveDriftNotification) {
    return nil, false
	}
	return o.ReceiveDriftNotification, true
}

// HasReceiveDriftNotification returns a boolean if a field has been set.
func (o *UserSettings) HasReceiveDriftNotification() bool {
	if o != nil && !isNil(o.ReceiveDriftNotification) {
		return true
	}

	return false
}

// SetReceiveDriftNotification gets a reference to the given bool and assigns it to the ReceiveDriftNotification field.
func (o *UserSettings) SetReceiveDriftNotification(v bool) {
	o.ReceiveDriftNotification = &v
}

// GetUserTrialActivated returns the UserTrialActivated field value if set, zero value otherwise.
func (o *UserSettings) GetUserTrialActivated() bool {
	if o == nil || isNil(o.UserTrialActivated) {
		var ret bool
		return ret
	}
	return *o.UserTrialActivated
}

// GetUserTrialActivatedOk returns a tuple with the UserTrialActivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetUserTrialActivatedOk() (*bool, bool) {
	if o == nil || isNil(o.UserTrialActivated) {
    return nil, false
	}
	return o.UserTrialActivated, true
}

// HasUserTrialActivated returns a boolean if a field has been set.
func (o *UserSettings) HasUserTrialActivated() bool {
	if o != nil && !isNil(o.UserTrialActivated) {
		return true
	}

	return false
}

// SetUserTrialActivated gets a reference to the given bool and assigns it to the UserTrialActivated field.
func (o *UserSettings) SetUserTrialActivated(v bool) {
	o.UserTrialActivated = &v
}

// GetActivatedTrialDate returns the ActivatedTrialDate field value if set, zero value otherwise.
func (o *UserSettings) GetActivatedTrialDate() string {
	if o == nil || isNil(o.ActivatedTrialDate) {
		var ret string
		return ret
	}
	return *o.ActivatedTrialDate
}

// GetActivatedTrialDateOk returns a tuple with the ActivatedTrialDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetActivatedTrialDateOk() (*string, bool) {
	if o == nil || isNil(o.ActivatedTrialDate) {
    return nil, false
	}
	return o.ActivatedTrialDate, true
}

// HasActivatedTrialDate returns a boolean if a field has been set.
func (o *UserSettings) HasActivatedTrialDate() bool {
	if o != nil && !isNil(o.ActivatedTrialDate) {
		return true
	}

	return false
}

// SetActivatedTrialDate gets a reference to the given string and assigns it to the ActivatedTrialDate field.
func (o *UserSettings) SetActivatedTrialDate(v string) {
	o.ActivatedTrialDate = &v
}

// GetDemo returns the Demo field value if set, zero value otherwise.
func (o *UserSettings) GetDemo() bool {
	if o == nil || isNil(o.Demo) {
		var ret bool
		return ret
	}
	return *o.Demo
}

// GetDemoOk returns a tuple with the Demo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetDemoOk() (*bool, bool) {
	if o == nil || isNil(o.Demo) {
    return nil, false
	}
	return o.Demo, true
}

// HasDemo returns a boolean if a field has been set.
func (o *UserSettings) HasDemo() bool {
	if o != nil && !isNil(o.Demo) {
		return true
	}

	return false
}

// SetDemo gets a reference to the given bool and assigns it to the Demo field.
func (o *UserSettings) SetDemo(v bool) {
	o.Demo = &v
}

// GetApiEnabled returns the ApiEnabled field value if set, zero value otherwise.
func (o *UserSettings) GetApiEnabled() bool {
	if o == nil || isNil(o.ApiEnabled) {
		var ret bool
		return ret
	}
	return *o.ApiEnabled
}

// GetApiEnabledOk returns a tuple with the ApiEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetApiEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.ApiEnabled) {
    return nil, false
	}
	return o.ApiEnabled, true
}

// HasApiEnabled returns a boolean if a field has been set.
func (o *UserSettings) HasApiEnabled() bool {
	if o != nil && !isNil(o.ApiEnabled) {
		return true
	}

	return false
}

// SetApiEnabled gets a reference to the given bool and assigns it to the ApiEnabled field.
func (o *UserSettings) SetApiEnabled(v bool) {
	o.ApiEnabled = &v
}

// GetDriftThreshold returns the DriftThreshold field value if set, zero value otherwise.
func (o *UserSettings) GetDriftThreshold() float32 {
	if o == nil || isNil(o.DriftThreshold) {
		var ret float32
		return ret
	}
	return *o.DriftThreshold
}

// GetDriftThresholdOk returns a tuple with the DriftThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetDriftThresholdOk() (*float32, bool) {
	if o == nil || isNil(o.DriftThreshold) {
    return nil, false
	}
	return o.DriftThreshold, true
}

// HasDriftThreshold returns a boolean if a field has been set.
func (o *UserSettings) HasDriftThreshold() bool {
	if o != nil && !isNil(o.DriftThreshold) {
		return true
	}

	return false
}

// SetDriftThreshold gets a reference to the given float32 and assigns it to the DriftThreshold field.
func (o *UserSettings) SetDriftThreshold(v float32) {
	o.DriftThreshold = &v
}

// GetPreferredCurrency returns the PreferredCurrency field value if set, zero value otherwise.
func (o *UserSettings) GetPreferredCurrency() Currency {
	if o == nil || isNil(o.PreferredCurrency) {
		var ret Currency
		return ret
	}
	return *o.PreferredCurrency
}

// GetPreferredCurrencyOk returns a tuple with the PreferredCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetPreferredCurrencyOk() (*Currency, bool) {
	if o == nil || isNil(o.PreferredCurrency) {
    return nil, false
	}
	return o.PreferredCurrency, true
}

// HasPreferredCurrency returns a boolean if a field has been set.
func (o *UserSettings) HasPreferredCurrency() bool {
	if o != nil && !isNil(o.PreferredCurrency) {
		return true
	}

	return false
}

// SetPreferredCurrency gets a reference to the given Currency and assigns it to the PreferredCurrency field.
func (o *UserSettings) SetPreferredCurrency(v Currency) {
	o.PreferredCurrency = &v
}

func (o UserSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.ReceiveCashNotification) {
		toSerialize["receive_cash_notification"] = o.ReceiveCashNotification
	}
	if !isNil(o.ReceiveDriftNotification) {
		toSerialize["receive_drift_notification"] = o.ReceiveDriftNotification
	}
	if !isNil(o.UserTrialActivated) {
		toSerialize["user_trial_activated"] = o.UserTrialActivated
	}
	if !isNil(o.ActivatedTrialDate) {
		toSerialize["activated_trial_date"] = o.ActivatedTrialDate
	}
	if !isNil(o.Demo) {
		toSerialize["demo"] = o.Demo
	}
	if !isNil(o.ApiEnabled) {
		toSerialize["api_enabled"] = o.ApiEnabled
	}
	if !isNil(o.DriftThreshold) {
		toSerialize["drift_threshold"] = o.DriftThreshold
	}
	if !isNil(o.PreferredCurrency) {
		toSerialize["preferred_currency"] = o.PreferredCurrency
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UserSettings) UnmarshalJSON(bytes []byte) (err error) {
	varUserSettings := _UserSettings{}

	if err = json.Unmarshal(bytes, &varUserSettings); err == nil {
		*o = UserSettings(varUserSettings)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		delete(additionalProperties, "name")
		delete(additionalProperties, "receive_cash_notification")
		delete(additionalProperties, "receive_drift_notification")
		delete(additionalProperties, "user_trial_activated")
		delete(additionalProperties, "activated_trial_date")
		delete(additionalProperties, "demo")
		delete(additionalProperties, "api_enabled")
		delete(additionalProperties, "drift_threshold")
		delete(additionalProperties, "preferred_currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserSettings struct {
	value *UserSettings
	isSet bool
}

func (v NullableUserSettings) Get() *UserSettings {
	return v.value
}

func (v *NullableUserSettings) Set(val *UserSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettings(val *UserSettings) *NullableUserSettings {
	return &NullableUserSettings{value: val, isSet: true}
}

func (v NullableUserSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


