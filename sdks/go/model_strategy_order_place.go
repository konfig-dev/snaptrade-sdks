/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// StrategyOrderPlace The reponse for a correctly placed order
type StrategyOrderPlace struct {
	OrderId *int32 `json:"orderId,omitempty"`
	Orders []StrategyOrderPlaceOrdersInner `json:"orders,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StrategyOrderPlace StrategyOrderPlace

// NewStrategyOrderPlace instantiates a new StrategyOrderPlace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStrategyOrderPlace() *StrategyOrderPlace {
	this := StrategyOrderPlace{}
	return &this
}

// NewStrategyOrderPlaceWithDefaults instantiates a new StrategyOrderPlace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStrategyOrderPlaceWithDefaults() *StrategyOrderPlace {
	this := StrategyOrderPlace{}
	return &this
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *StrategyOrderPlace) GetOrderId() int32 {
	if o == nil || isNil(o.OrderId) {
		var ret int32
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyOrderPlace) GetOrderIdOk() (*int32, bool) {
	if o == nil || isNil(o.OrderId) {
    return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *StrategyOrderPlace) HasOrderId() bool {
	if o != nil && !isNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int32 and assigns it to the OrderId field.
func (o *StrategyOrderPlace) SetOrderId(v int32) {
	o.OrderId = &v
}

// GetOrders returns the Orders field value if set, zero value otherwise.
func (o *StrategyOrderPlace) GetOrders() []StrategyOrderPlaceOrdersInner {
	if o == nil || isNil(o.Orders) {
		var ret []StrategyOrderPlaceOrdersInner
		return ret
	}
	return o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyOrderPlace) GetOrdersOk() ([]StrategyOrderPlaceOrdersInner, bool) {
	if o == nil || isNil(o.Orders) {
    return nil, false
	}
	return o.Orders, true
}

// HasOrders returns a boolean if a field has been set.
func (o *StrategyOrderPlace) HasOrders() bool {
	if o != nil && !isNil(o.Orders) {
		return true
	}

	return false
}

// SetOrders gets a reference to the given []StrategyOrderPlaceOrdersInner and assigns it to the Orders field.
func (o *StrategyOrderPlace) SetOrders(v []StrategyOrderPlaceOrdersInner) {
	o.Orders = v
}

func (o StrategyOrderPlace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.OrderId) {
		toSerialize["orderId"] = o.OrderId
	}
	if !isNil(o.Orders) {
		toSerialize["orders"] = o.Orders
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StrategyOrderPlace) UnmarshalJSON(bytes []byte) (err error) {
	varStrategyOrderPlace := _StrategyOrderPlace{}

	if err = json.Unmarshal(bytes, &varStrategyOrderPlace); err == nil {
		*o = StrategyOrderPlace(varStrategyOrderPlace)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "orderId")
		delete(additionalProperties, "orders")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStrategyOrderPlace struct {
	value *StrategyOrderPlace
	isSet bool
}

func (v NullableStrategyOrderPlace) Get() *StrategyOrderPlace {
	return v.value
}

func (v *NullableStrategyOrderPlace) Set(val *StrategyOrderPlace) {
	v.value = val
	v.isSet = true
}

func (v NullableStrategyOrderPlace) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategyOrderPlace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategyOrderPlace(val *StrategyOrderPlace) *NullableStrategyOrderPlace {
	return &NullableStrategyOrderPlace{value: val, isSet: true}
}

func (v NullableStrategyOrderPlace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategyOrderPlace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


