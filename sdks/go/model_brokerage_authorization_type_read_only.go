/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// BrokerageAuthorizationTypeReadOnly struct for BrokerageAuthorizationTypeReadOnly
type BrokerageAuthorizationTypeReadOnly struct {
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	AuthType *string `json:"auth_type,omitempty"`
	Brokerage *BrokerageAuthorizationTypeReadOnlyBrokerage `json:"brokerage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BrokerageAuthorizationTypeReadOnly BrokerageAuthorizationTypeReadOnly

// NewBrokerageAuthorizationTypeReadOnly instantiates a new BrokerageAuthorizationTypeReadOnly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrokerageAuthorizationTypeReadOnly() *BrokerageAuthorizationTypeReadOnly {
	this := BrokerageAuthorizationTypeReadOnly{}
	return &this
}

// NewBrokerageAuthorizationTypeReadOnlyWithDefaults instantiates a new BrokerageAuthorizationTypeReadOnly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrokerageAuthorizationTypeReadOnlyWithDefaults() *BrokerageAuthorizationTypeReadOnly {
	this := BrokerageAuthorizationTypeReadOnly{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BrokerageAuthorizationTypeReadOnly) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrokerageAuthorizationTypeReadOnly) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BrokerageAuthorizationTypeReadOnly) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BrokerageAuthorizationTypeReadOnly) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BrokerageAuthorizationTypeReadOnly) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrokerageAuthorizationTypeReadOnly) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BrokerageAuthorizationTypeReadOnly) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BrokerageAuthorizationTypeReadOnly) SetType(v string) {
	o.Type = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *BrokerageAuthorizationTypeReadOnly) GetAuthType() string {
	if o == nil || isNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrokerageAuthorizationTypeReadOnly) GetAuthTypeOk() (*string, bool) {
	if o == nil || isNil(o.AuthType) {
    return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *BrokerageAuthorizationTypeReadOnly) HasAuthType() bool {
	if o != nil && !isNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *BrokerageAuthorizationTypeReadOnly) SetAuthType(v string) {
	o.AuthType = &v
}

// GetBrokerage returns the Brokerage field value if set, zero value otherwise.
func (o *BrokerageAuthorizationTypeReadOnly) GetBrokerage() BrokerageAuthorizationTypeReadOnlyBrokerage {
	if o == nil || isNil(o.Brokerage) {
		var ret BrokerageAuthorizationTypeReadOnlyBrokerage
		return ret
	}
	return *o.Brokerage
}

// GetBrokerageOk returns a tuple with the Brokerage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrokerageAuthorizationTypeReadOnly) GetBrokerageOk() (*BrokerageAuthorizationTypeReadOnlyBrokerage, bool) {
	if o == nil || isNil(o.Brokerage) {
    return nil, false
	}
	return o.Brokerage, true
}

// HasBrokerage returns a boolean if a field has been set.
func (o *BrokerageAuthorizationTypeReadOnly) HasBrokerage() bool {
	if o != nil && !isNil(o.Brokerage) {
		return true
	}

	return false
}

// SetBrokerage gets a reference to the given BrokerageAuthorizationTypeReadOnlyBrokerage and assigns it to the Brokerage field.
func (o *BrokerageAuthorizationTypeReadOnly) SetBrokerage(v BrokerageAuthorizationTypeReadOnlyBrokerage) {
	o.Brokerage = &v
}

func (o BrokerageAuthorizationTypeReadOnly) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !isNil(o.Brokerage) {
		toSerialize["brokerage"] = o.Brokerage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BrokerageAuthorizationTypeReadOnly) UnmarshalJSON(bytes []byte) (err error) {
	varBrokerageAuthorizationTypeReadOnly := _BrokerageAuthorizationTypeReadOnly{}

	if err = json.Unmarshal(bytes, &varBrokerageAuthorizationTypeReadOnly); err == nil {
		*o = BrokerageAuthorizationTypeReadOnly(varBrokerageAuthorizationTypeReadOnly)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "auth_type")
		delete(additionalProperties, "brokerage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBrokerageAuthorizationTypeReadOnly struct {
	value *BrokerageAuthorizationTypeReadOnly
	isSet bool
}

func (v NullableBrokerageAuthorizationTypeReadOnly) Get() *BrokerageAuthorizationTypeReadOnly {
	return v.value
}

func (v *NullableBrokerageAuthorizationTypeReadOnly) Set(val *BrokerageAuthorizationTypeReadOnly) {
	v.value = val
	v.isSet = true
}

func (v NullableBrokerageAuthorizationTypeReadOnly) IsSet() bool {
	return v.isSet
}

func (v *NullableBrokerageAuthorizationTypeReadOnly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrokerageAuthorizationTypeReadOnly(val *BrokerageAuthorizationTypeReadOnly) *NullableBrokerageAuthorizationTypeReadOnly {
	return &NullableBrokerageAuthorizationTypeReadOnly{value: val, isSet: true}
}

func (v NullableBrokerageAuthorizationTypeReadOnly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrokerageAuthorizationTypeReadOnly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


