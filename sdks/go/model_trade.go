/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// Trade A trade object
type Trade struct {
	Id *string `json:"id,omitempty"`
	Account *Account `json:"account,omitempty"`
	Symbol *BrokerageSymbol `json:"symbol,omitempty"`
	UniversalSymbol *UniversalSymbol `json:"universal_symbol,omitempty"`
	Action *string `json:"action,omitempty"`
	Units *int32 `json:"units,omitempty"`
	Price *float32 `json:"price,omitempty"`
	Sequence *int32 `json:"sequence,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Trade Trade

// NewTrade instantiates a new Trade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrade() *Trade {
	this := Trade{}
	return &this
}

// NewTradeWithDefaults instantiates a new Trade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradeWithDefaults() *Trade {
	this := Trade{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Trade) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Trade) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Trade) SetId(v string) {
	o.Id = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Trade) GetAccount() Account {
	if o == nil || isNil(o.Account) {
		var ret Account
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetAccountOk() (*Account, bool) {
	if o == nil || isNil(o.Account) {
    return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Trade) HasAccount() bool {
	if o != nil && !isNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given Account and assigns it to the Account field.
func (o *Trade) SetAccount(v Account) {
	o.Account = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Trade) GetSymbol() BrokerageSymbol {
	if o == nil || isNil(o.Symbol) {
		var ret BrokerageSymbol
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetSymbolOk() (*BrokerageSymbol, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Trade) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given BrokerageSymbol and assigns it to the Symbol field.
func (o *Trade) SetSymbol(v BrokerageSymbol) {
	o.Symbol = &v
}

// GetUniversalSymbol returns the UniversalSymbol field value if set, zero value otherwise.
func (o *Trade) GetUniversalSymbol() UniversalSymbol {
	if o == nil || isNil(o.UniversalSymbol) {
		var ret UniversalSymbol
		return ret
	}
	return *o.UniversalSymbol
}

// GetUniversalSymbolOk returns a tuple with the UniversalSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetUniversalSymbolOk() (*UniversalSymbol, bool) {
	if o == nil || isNil(o.UniversalSymbol) {
    return nil, false
	}
	return o.UniversalSymbol, true
}

// HasUniversalSymbol returns a boolean if a field has been set.
func (o *Trade) HasUniversalSymbol() bool {
	if o != nil && !isNil(o.UniversalSymbol) {
		return true
	}

	return false
}

// SetUniversalSymbol gets a reference to the given UniversalSymbol and assigns it to the UniversalSymbol field.
func (o *Trade) SetUniversalSymbol(v UniversalSymbol) {
	o.UniversalSymbol = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *Trade) GetAction() string {
	if o == nil || isNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetActionOk() (*string, bool) {
	if o == nil || isNil(o.Action) {
    return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *Trade) HasAction() bool {
	if o != nil && !isNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *Trade) SetAction(v string) {
	o.Action = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *Trade) GetUnits() int32 {
	if o == nil || isNil(o.Units) {
		var ret int32
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetUnitsOk() (*int32, bool) {
	if o == nil || isNil(o.Units) {
    return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *Trade) HasUnits() bool {
	if o != nil && !isNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given int32 and assigns it to the Units field.
func (o *Trade) SetUnits(v int32) {
	o.Units = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Trade) GetPrice() float32 {
	if o == nil || isNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetPriceOk() (*float32, bool) {
	if o == nil || isNil(o.Price) {
    return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Trade) HasPrice() bool {
	if o != nil && !isNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *Trade) SetPrice(v float32) {
	o.Price = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *Trade) GetSequence() int32 {
	if o == nil || isNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetSequenceOk() (*int32, bool) {
	if o == nil || isNil(o.Sequence) {
    return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *Trade) HasSequence() bool {
	if o != nil && !isNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *Trade) SetSequence(v int32) {
	o.Sequence = &v
}

func (o Trade) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !isNil(o.UniversalSymbol) {
		toSerialize["universal_symbol"] = o.UniversalSymbol
	}
	if !isNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !isNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !isNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !isNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Trade) UnmarshalJSON(bytes []byte) (err error) {
	varTrade := _Trade{}

	if err = json.Unmarshal(bytes, &varTrade); err == nil {
		*o = Trade(varTrade)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "account")
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "universal_symbol")
		delete(additionalProperties, "action")
		delete(additionalProperties, "units")
		delete(additionalProperties, "price")
		delete(additionalProperties, "sequence")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrade struct {
	value *Trade
	isSet bool
}

func (v NullableTrade) Get() *Trade {
	return v.value
}

func (v *NullableTrade) Set(val *Trade) {
	v.value = val
	v.isSet = true
}

func (v NullableTrade) IsSet() bool {
	return v.isSet
}

func (v *NullableTrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrade(val *Trade) *NullableTrade {
	return &NullableTrade{value: val, isSet: true}
}

func (v NullableTrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


