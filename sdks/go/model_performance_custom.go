/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// PerformanceCustom Performance Custom Response Object
type PerformanceCustom struct {
	TotalEquityTimeframe []PastValue `json:"totalEquityTimeframe,omitempty"`
	Contributions *NetContributions `json:"contributions,omitempty"`
	ContributionTimeframe []PastValue `json:"contributionTimeframe,omitempty"`
	ContributionTimeframeCumulative []PastValue `json:"contributionTimeframeCumulative,omitempty"`
	WithdrawalTimeframe []PastValue `json:"withdrawalTimeframe,omitempty"`
	// Current streak of cosecutive months where contributions were made
	ContributionStreak NullableFloat32 `json:"contributionStreak,omitempty"`
	// Number of months in the timeframe with contributions
	ContributionMonthsContributed NullableFloat32 `json:"contributionMonthsContributed,omitempty"`
	// Total months in timeframe
	ContributionTotalMonths NullableFloat32 `json:"contributionTotalMonths,omitempty"`
	Dividends []NetDividend `json:"dividends,omitempty"`
	// Total dividends received over the timeframe
	DividendIncome NullableFloat32 `json:"dividendIncome,omitempty"`
	// Average dividends received per month over the timeframe
	MonthlyDividends NullableFloat32 `json:"monthlyDividends,omitempty"`
	// list of tickers which may not be supported or may not have accurate price data
	BadTickers []*string `json:"badTickers,omitempty"`
	DividendTimeline []MonthlyDividends `json:"dividendTimeline,omitempty"`
	// commissions incurred during the timeframe
	Commissions NullableFloat32 `json:"commissions,omitempty"`
	// forex fees incurred during the timeframe
	ForexFees NullableFloat32 `json:"forexFees,omitempty"`
	// other fees incurred during the timeframe
	Fees NullableFloat32 `json:"fees,omitempty"`
	// The return rate over the timeframe. Annualized if timeframe is longer than 1 year
	RateOfReturn NullableFloat32 `json:"rateOfReturn,omitempty"`
	ReturnRateTimeframe []SubPeriodReturnRate `json:"returnRateTimeframe,omitempty"`
	// Whether the user has detailed mode enabled (more frequent data points for totalEquity and contribution timeframes)
	DetailedMode *bool `json:"detailedMode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PerformanceCustom PerformanceCustom

// NewPerformanceCustom instantiates a new PerformanceCustom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerformanceCustom() *PerformanceCustom {
	this := PerformanceCustom{}
	return &this
}

// NewPerformanceCustomWithDefaults instantiates a new PerformanceCustom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPerformanceCustomWithDefaults() *PerformanceCustom {
	this := PerformanceCustom{}
	return &this
}

// GetTotalEquityTimeframe returns the TotalEquityTimeframe field value if set, zero value otherwise.
func (o *PerformanceCustom) GetTotalEquityTimeframe() []PastValue {
	if o == nil || isNil(o.TotalEquityTimeframe) {
		var ret []PastValue
		return ret
	}
	return o.TotalEquityTimeframe
}

// GetTotalEquityTimeframeOk returns a tuple with the TotalEquityTimeframe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceCustom) GetTotalEquityTimeframeOk() ([]PastValue, bool) {
	if o == nil || isNil(o.TotalEquityTimeframe) {
    return nil, false
	}
	return o.TotalEquityTimeframe, true
}

// HasTotalEquityTimeframe returns a boolean if a field has been set.
func (o *PerformanceCustom) HasTotalEquityTimeframe() bool {
	if o != nil && !isNil(o.TotalEquityTimeframe) {
		return true
	}

	return false
}

// SetTotalEquityTimeframe gets a reference to the given []PastValue and assigns it to the TotalEquityTimeframe field.
func (o *PerformanceCustom) SetTotalEquityTimeframe(v []PastValue) {
	o.TotalEquityTimeframe = v
}

// GetContributions returns the Contributions field value if set, zero value otherwise.
func (o *PerformanceCustom) GetContributions() NetContributions {
	if o == nil || isNil(o.Contributions) {
		var ret NetContributions
		return ret
	}
	return *o.Contributions
}

// GetContributionsOk returns a tuple with the Contributions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceCustom) GetContributionsOk() (*NetContributions, bool) {
	if o == nil || isNil(o.Contributions) {
    return nil, false
	}
	return o.Contributions, true
}

// HasContributions returns a boolean if a field has been set.
func (o *PerformanceCustom) HasContributions() bool {
	if o != nil && !isNil(o.Contributions) {
		return true
	}

	return false
}

// SetContributions gets a reference to the given NetContributions and assigns it to the Contributions field.
func (o *PerformanceCustom) SetContributions(v NetContributions) {
	o.Contributions = &v
}

// GetContributionTimeframe returns the ContributionTimeframe field value if set, zero value otherwise.
func (o *PerformanceCustom) GetContributionTimeframe() []PastValue {
	if o == nil || isNil(o.ContributionTimeframe) {
		var ret []PastValue
		return ret
	}
	return o.ContributionTimeframe
}

// GetContributionTimeframeOk returns a tuple with the ContributionTimeframe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceCustom) GetContributionTimeframeOk() ([]PastValue, bool) {
	if o == nil || isNil(o.ContributionTimeframe) {
    return nil, false
	}
	return o.ContributionTimeframe, true
}

// HasContributionTimeframe returns a boolean if a field has been set.
func (o *PerformanceCustom) HasContributionTimeframe() bool {
	if o != nil && !isNil(o.ContributionTimeframe) {
		return true
	}

	return false
}

// SetContributionTimeframe gets a reference to the given []PastValue and assigns it to the ContributionTimeframe field.
func (o *PerformanceCustom) SetContributionTimeframe(v []PastValue) {
	o.ContributionTimeframe = v
}

// GetContributionTimeframeCumulative returns the ContributionTimeframeCumulative field value if set, zero value otherwise.
func (o *PerformanceCustom) GetContributionTimeframeCumulative() []PastValue {
	if o == nil || isNil(o.ContributionTimeframeCumulative) {
		var ret []PastValue
		return ret
	}
	return o.ContributionTimeframeCumulative
}

// GetContributionTimeframeCumulativeOk returns a tuple with the ContributionTimeframeCumulative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceCustom) GetContributionTimeframeCumulativeOk() ([]PastValue, bool) {
	if o == nil || isNil(o.ContributionTimeframeCumulative) {
    return nil, false
	}
	return o.ContributionTimeframeCumulative, true
}

// HasContributionTimeframeCumulative returns a boolean if a field has been set.
func (o *PerformanceCustom) HasContributionTimeframeCumulative() bool {
	if o != nil && !isNil(o.ContributionTimeframeCumulative) {
		return true
	}

	return false
}

// SetContributionTimeframeCumulative gets a reference to the given []PastValue and assigns it to the ContributionTimeframeCumulative field.
func (o *PerformanceCustom) SetContributionTimeframeCumulative(v []PastValue) {
	o.ContributionTimeframeCumulative = v
}

// GetWithdrawalTimeframe returns the WithdrawalTimeframe field value if set, zero value otherwise.
func (o *PerformanceCustom) GetWithdrawalTimeframe() []PastValue {
	if o == nil || isNil(o.WithdrawalTimeframe) {
		var ret []PastValue
		return ret
	}
	return o.WithdrawalTimeframe
}

// GetWithdrawalTimeframeOk returns a tuple with the WithdrawalTimeframe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceCustom) GetWithdrawalTimeframeOk() ([]PastValue, bool) {
	if o == nil || isNil(o.WithdrawalTimeframe) {
    return nil, false
	}
	return o.WithdrawalTimeframe, true
}

// HasWithdrawalTimeframe returns a boolean if a field has been set.
func (o *PerformanceCustom) HasWithdrawalTimeframe() bool {
	if o != nil && !isNil(o.WithdrawalTimeframe) {
		return true
	}

	return false
}

// SetWithdrawalTimeframe gets a reference to the given []PastValue and assigns it to the WithdrawalTimeframe field.
func (o *PerformanceCustom) SetWithdrawalTimeframe(v []PastValue) {
	o.WithdrawalTimeframe = v
}

// GetContributionStreak returns the ContributionStreak field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PerformanceCustom) GetContributionStreak() float32 {
	if o == nil || isNil(o.ContributionStreak.Get()) {
		var ret float32
		return ret
	}
	return *o.ContributionStreak.Get()
}

// GetContributionStreakOk returns a tuple with the ContributionStreak field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PerformanceCustom) GetContributionStreakOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ContributionStreak.Get(), o.ContributionStreak.IsSet()
}

// HasContributionStreak returns a boolean if a field has been set.
func (o *PerformanceCustom) HasContributionStreak() bool {
	if o != nil && o.ContributionStreak.IsSet() {
		return true
	}

	return false
}

// SetContributionStreak gets a reference to the given NullableFloat32 and assigns it to the ContributionStreak field.
func (o *PerformanceCustom) SetContributionStreak(v float32) {
	o.ContributionStreak.Set(&v)
}
// SetContributionStreakNil sets the value for ContributionStreak to be an explicit nil
func (o *PerformanceCustom) SetContributionStreakNil() {
	o.ContributionStreak.Set(nil)
}

// UnsetContributionStreak ensures that no value is present for ContributionStreak, not even an explicit nil
func (o *PerformanceCustom) UnsetContributionStreak() {
	o.ContributionStreak.Unset()
}

// GetContributionMonthsContributed returns the ContributionMonthsContributed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PerformanceCustom) GetContributionMonthsContributed() float32 {
	if o == nil || isNil(o.ContributionMonthsContributed.Get()) {
		var ret float32
		return ret
	}
	return *o.ContributionMonthsContributed.Get()
}

// GetContributionMonthsContributedOk returns a tuple with the ContributionMonthsContributed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PerformanceCustom) GetContributionMonthsContributedOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ContributionMonthsContributed.Get(), o.ContributionMonthsContributed.IsSet()
}

// HasContributionMonthsContributed returns a boolean if a field has been set.
func (o *PerformanceCustom) HasContributionMonthsContributed() bool {
	if o != nil && o.ContributionMonthsContributed.IsSet() {
		return true
	}

	return false
}

// SetContributionMonthsContributed gets a reference to the given NullableFloat32 and assigns it to the ContributionMonthsContributed field.
func (o *PerformanceCustom) SetContributionMonthsContributed(v float32) {
	o.ContributionMonthsContributed.Set(&v)
}
// SetContributionMonthsContributedNil sets the value for ContributionMonthsContributed to be an explicit nil
func (o *PerformanceCustom) SetContributionMonthsContributedNil() {
	o.ContributionMonthsContributed.Set(nil)
}

// UnsetContributionMonthsContributed ensures that no value is present for ContributionMonthsContributed, not even an explicit nil
func (o *PerformanceCustom) UnsetContributionMonthsContributed() {
	o.ContributionMonthsContributed.Unset()
}

// GetContributionTotalMonths returns the ContributionTotalMonths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PerformanceCustom) GetContributionTotalMonths() float32 {
	if o == nil || isNil(o.ContributionTotalMonths.Get()) {
		var ret float32
		return ret
	}
	return *o.ContributionTotalMonths.Get()
}

// GetContributionTotalMonthsOk returns a tuple with the ContributionTotalMonths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PerformanceCustom) GetContributionTotalMonthsOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ContributionTotalMonths.Get(), o.ContributionTotalMonths.IsSet()
}

// HasContributionTotalMonths returns a boolean if a field has been set.
func (o *PerformanceCustom) HasContributionTotalMonths() bool {
	if o != nil && o.ContributionTotalMonths.IsSet() {
		return true
	}

	return false
}

// SetContributionTotalMonths gets a reference to the given NullableFloat32 and assigns it to the ContributionTotalMonths field.
func (o *PerformanceCustom) SetContributionTotalMonths(v float32) {
	o.ContributionTotalMonths.Set(&v)
}
// SetContributionTotalMonthsNil sets the value for ContributionTotalMonths to be an explicit nil
func (o *PerformanceCustom) SetContributionTotalMonthsNil() {
	o.ContributionTotalMonths.Set(nil)
}

// UnsetContributionTotalMonths ensures that no value is present for ContributionTotalMonths, not even an explicit nil
func (o *PerformanceCustom) UnsetContributionTotalMonths() {
	o.ContributionTotalMonths.Unset()
}

// GetDividends returns the Dividends field value if set, zero value otherwise.
func (o *PerformanceCustom) GetDividends() []NetDividend {
	if o == nil || isNil(o.Dividends) {
		var ret []NetDividend
		return ret
	}
	return o.Dividends
}

// GetDividendsOk returns a tuple with the Dividends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceCustom) GetDividendsOk() ([]NetDividend, bool) {
	if o == nil || isNil(o.Dividends) {
    return nil, false
	}
	return o.Dividends, true
}

// HasDividends returns a boolean if a field has been set.
func (o *PerformanceCustom) HasDividends() bool {
	if o != nil && !isNil(o.Dividends) {
		return true
	}

	return false
}

// SetDividends gets a reference to the given []NetDividend and assigns it to the Dividends field.
func (o *PerformanceCustom) SetDividends(v []NetDividend) {
	o.Dividends = v
}

// GetDividendIncome returns the DividendIncome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PerformanceCustom) GetDividendIncome() float32 {
	if o == nil || isNil(o.DividendIncome.Get()) {
		var ret float32
		return ret
	}
	return *o.DividendIncome.Get()
}

// GetDividendIncomeOk returns a tuple with the DividendIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PerformanceCustom) GetDividendIncomeOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.DividendIncome.Get(), o.DividendIncome.IsSet()
}

// HasDividendIncome returns a boolean if a field has been set.
func (o *PerformanceCustom) HasDividendIncome() bool {
	if o != nil && o.DividendIncome.IsSet() {
		return true
	}

	return false
}

// SetDividendIncome gets a reference to the given NullableFloat32 and assigns it to the DividendIncome field.
func (o *PerformanceCustom) SetDividendIncome(v float32) {
	o.DividendIncome.Set(&v)
}
// SetDividendIncomeNil sets the value for DividendIncome to be an explicit nil
func (o *PerformanceCustom) SetDividendIncomeNil() {
	o.DividendIncome.Set(nil)
}

// UnsetDividendIncome ensures that no value is present for DividendIncome, not even an explicit nil
func (o *PerformanceCustom) UnsetDividendIncome() {
	o.DividendIncome.Unset()
}

// GetMonthlyDividends returns the MonthlyDividends field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PerformanceCustom) GetMonthlyDividends() float32 {
	if o == nil || isNil(o.MonthlyDividends.Get()) {
		var ret float32
		return ret
	}
	return *o.MonthlyDividends.Get()
}

// GetMonthlyDividendsOk returns a tuple with the MonthlyDividends field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PerformanceCustom) GetMonthlyDividendsOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.MonthlyDividends.Get(), o.MonthlyDividends.IsSet()
}

// HasMonthlyDividends returns a boolean if a field has been set.
func (o *PerformanceCustom) HasMonthlyDividends() bool {
	if o != nil && o.MonthlyDividends.IsSet() {
		return true
	}

	return false
}

// SetMonthlyDividends gets a reference to the given NullableFloat32 and assigns it to the MonthlyDividends field.
func (o *PerformanceCustom) SetMonthlyDividends(v float32) {
	o.MonthlyDividends.Set(&v)
}
// SetMonthlyDividendsNil sets the value for MonthlyDividends to be an explicit nil
func (o *PerformanceCustom) SetMonthlyDividendsNil() {
	o.MonthlyDividends.Set(nil)
}

// UnsetMonthlyDividends ensures that no value is present for MonthlyDividends, not even an explicit nil
func (o *PerformanceCustom) UnsetMonthlyDividends() {
	o.MonthlyDividends.Unset()
}

// GetBadTickers returns the BadTickers field value if set, zero value otherwise.
func (o *PerformanceCustom) GetBadTickers() []*string {
	if o == nil || isNil(o.BadTickers) {
		var ret []*string
		return ret
	}
	return o.BadTickers
}

// GetBadTickersOk returns a tuple with the BadTickers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceCustom) GetBadTickersOk() ([]*string, bool) {
	if o == nil || isNil(o.BadTickers) {
    return nil, false
	}
	return o.BadTickers, true
}

// HasBadTickers returns a boolean if a field has been set.
func (o *PerformanceCustom) HasBadTickers() bool {
	if o != nil && !isNil(o.BadTickers) {
		return true
	}

	return false
}

// SetBadTickers gets a reference to the given []*string and assigns it to the BadTickers field.
func (o *PerformanceCustom) SetBadTickers(v []*string) {
	o.BadTickers = v
}

// GetDividendTimeline returns the DividendTimeline field value if set, zero value otherwise.
func (o *PerformanceCustom) GetDividendTimeline() []MonthlyDividends {
	if o == nil || isNil(o.DividendTimeline) {
		var ret []MonthlyDividends
		return ret
	}
	return o.DividendTimeline
}

// GetDividendTimelineOk returns a tuple with the DividendTimeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceCustom) GetDividendTimelineOk() ([]MonthlyDividends, bool) {
	if o == nil || isNil(o.DividendTimeline) {
    return nil, false
	}
	return o.DividendTimeline, true
}

// HasDividendTimeline returns a boolean if a field has been set.
func (o *PerformanceCustom) HasDividendTimeline() bool {
	if o != nil && !isNil(o.DividendTimeline) {
		return true
	}

	return false
}

// SetDividendTimeline gets a reference to the given []MonthlyDividends and assigns it to the DividendTimeline field.
func (o *PerformanceCustom) SetDividendTimeline(v []MonthlyDividends) {
	o.DividendTimeline = v
}

// GetCommissions returns the Commissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PerformanceCustom) GetCommissions() float32 {
	if o == nil || isNil(o.Commissions.Get()) {
		var ret float32
		return ret
	}
	return *o.Commissions.Get()
}

// GetCommissionsOk returns a tuple with the Commissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PerformanceCustom) GetCommissionsOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Commissions.Get(), o.Commissions.IsSet()
}

// HasCommissions returns a boolean if a field has been set.
func (o *PerformanceCustom) HasCommissions() bool {
	if o != nil && o.Commissions.IsSet() {
		return true
	}

	return false
}

// SetCommissions gets a reference to the given NullableFloat32 and assigns it to the Commissions field.
func (o *PerformanceCustom) SetCommissions(v float32) {
	o.Commissions.Set(&v)
}
// SetCommissionsNil sets the value for Commissions to be an explicit nil
func (o *PerformanceCustom) SetCommissionsNil() {
	o.Commissions.Set(nil)
}

// UnsetCommissions ensures that no value is present for Commissions, not even an explicit nil
func (o *PerformanceCustom) UnsetCommissions() {
	o.Commissions.Unset()
}

// GetForexFees returns the ForexFees field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PerformanceCustom) GetForexFees() float32 {
	if o == nil || isNil(o.ForexFees.Get()) {
		var ret float32
		return ret
	}
	return *o.ForexFees.Get()
}

// GetForexFeesOk returns a tuple with the ForexFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PerformanceCustom) GetForexFeesOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ForexFees.Get(), o.ForexFees.IsSet()
}

// HasForexFees returns a boolean if a field has been set.
func (o *PerformanceCustom) HasForexFees() bool {
	if o != nil && o.ForexFees.IsSet() {
		return true
	}

	return false
}

// SetForexFees gets a reference to the given NullableFloat32 and assigns it to the ForexFees field.
func (o *PerformanceCustom) SetForexFees(v float32) {
	o.ForexFees.Set(&v)
}
// SetForexFeesNil sets the value for ForexFees to be an explicit nil
func (o *PerformanceCustom) SetForexFeesNil() {
	o.ForexFees.Set(nil)
}

// UnsetForexFees ensures that no value is present for ForexFees, not even an explicit nil
func (o *PerformanceCustom) UnsetForexFees() {
	o.ForexFees.Unset()
}

// GetFees returns the Fees field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PerformanceCustom) GetFees() float32 {
	if o == nil || isNil(o.Fees.Get()) {
		var ret float32
		return ret
	}
	return *o.Fees.Get()
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PerformanceCustom) GetFeesOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Fees.Get(), o.Fees.IsSet()
}

// HasFees returns a boolean if a field has been set.
func (o *PerformanceCustom) HasFees() bool {
	if o != nil && o.Fees.IsSet() {
		return true
	}

	return false
}

// SetFees gets a reference to the given NullableFloat32 and assigns it to the Fees field.
func (o *PerformanceCustom) SetFees(v float32) {
	o.Fees.Set(&v)
}
// SetFeesNil sets the value for Fees to be an explicit nil
func (o *PerformanceCustom) SetFeesNil() {
	o.Fees.Set(nil)
}

// UnsetFees ensures that no value is present for Fees, not even an explicit nil
func (o *PerformanceCustom) UnsetFees() {
	o.Fees.Unset()
}

// GetRateOfReturn returns the RateOfReturn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PerformanceCustom) GetRateOfReturn() float32 {
	if o == nil || isNil(o.RateOfReturn.Get()) {
		var ret float32
		return ret
	}
	return *o.RateOfReturn.Get()
}

// GetRateOfReturnOk returns a tuple with the RateOfReturn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PerformanceCustom) GetRateOfReturnOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.RateOfReturn.Get(), o.RateOfReturn.IsSet()
}

// HasRateOfReturn returns a boolean if a field has been set.
func (o *PerformanceCustom) HasRateOfReturn() bool {
	if o != nil && o.RateOfReturn.IsSet() {
		return true
	}

	return false
}

// SetRateOfReturn gets a reference to the given NullableFloat32 and assigns it to the RateOfReturn field.
func (o *PerformanceCustom) SetRateOfReturn(v float32) {
	o.RateOfReturn.Set(&v)
}
// SetRateOfReturnNil sets the value for RateOfReturn to be an explicit nil
func (o *PerformanceCustom) SetRateOfReturnNil() {
	o.RateOfReturn.Set(nil)
}

// UnsetRateOfReturn ensures that no value is present for RateOfReturn, not even an explicit nil
func (o *PerformanceCustom) UnsetRateOfReturn() {
	o.RateOfReturn.Unset()
}

// GetReturnRateTimeframe returns the ReturnRateTimeframe field value if set, zero value otherwise.
func (o *PerformanceCustom) GetReturnRateTimeframe() []SubPeriodReturnRate {
	if o == nil || isNil(o.ReturnRateTimeframe) {
		var ret []SubPeriodReturnRate
		return ret
	}
	return o.ReturnRateTimeframe
}

// GetReturnRateTimeframeOk returns a tuple with the ReturnRateTimeframe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceCustom) GetReturnRateTimeframeOk() ([]SubPeriodReturnRate, bool) {
	if o == nil || isNil(o.ReturnRateTimeframe) {
    return nil, false
	}
	return o.ReturnRateTimeframe, true
}

// HasReturnRateTimeframe returns a boolean if a field has been set.
func (o *PerformanceCustom) HasReturnRateTimeframe() bool {
	if o != nil && !isNil(o.ReturnRateTimeframe) {
		return true
	}

	return false
}

// SetReturnRateTimeframe gets a reference to the given []SubPeriodReturnRate and assigns it to the ReturnRateTimeframe field.
func (o *PerformanceCustom) SetReturnRateTimeframe(v []SubPeriodReturnRate) {
	o.ReturnRateTimeframe = v
}

// GetDetailedMode returns the DetailedMode field value if set, zero value otherwise.
func (o *PerformanceCustom) GetDetailedMode() bool {
	if o == nil || isNil(o.DetailedMode) {
		var ret bool
		return ret
	}
	return *o.DetailedMode
}

// GetDetailedModeOk returns a tuple with the DetailedMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceCustom) GetDetailedModeOk() (*bool, bool) {
	if o == nil || isNil(o.DetailedMode) {
    return nil, false
	}
	return o.DetailedMode, true
}

// HasDetailedMode returns a boolean if a field has been set.
func (o *PerformanceCustom) HasDetailedMode() bool {
	if o != nil && !isNil(o.DetailedMode) {
		return true
	}

	return false
}

// SetDetailedMode gets a reference to the given bool and assigns it to the DetailedMode field.
func (o *PerformanceCustom) SetDetailedMode(v bool) {
	o.DetailedMode = &v
}

func (o PerformanceCustom) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TotalEquityTimeframe) {
		toSerialize["totalEquityTimeframe"] = o.TotalEquityTimeframe
	}
	if !isNil(o.Contributions) {
		toSerialize["contributions"] = o.Contributions
	}
	if !isNil(o.ContributionTimeframe) {
		toSerialize["contributionTimeframe"] = o.ContributionTimeframe
	}
	if !isNil(o.ContributionTimeframeCumulative) {
		toSerialize["contributionTimeframeCumulative"] = o.ContributionTimeframeCumulative
	}
	if !isNil(o.WithdrawalTimeframe) {
		toSerialize["withdrawalTimeframe"] = o.WithdrawalTimeframe
	}
	if o.ContributionStreak.IsSet() {
		toSerialize["contributionStreak"] = o.ContributionStreak.Get()
	}
	if o.ContributionMonthsContributed.IsSet() {
		toSerialize["contributionMonthsContributed"] = o.ContributionMonthsContributed.Get()
	}
	if o.ContributionTotalMonths.IsSet() {
		toSerialize["contributionTotalMonths"] = o.ContributionTotalMonths.Get()
	}
	if !isNil(o.Dividends) {
		toSerialize["dividends"] = o.Dividends
	}
	if o.DividendIncome.IsSet() {
		toSerialize["dividendIncome"] = o.DividendIncome.Get()
	}
	if o.MonthlyDividends.IsSet() {
		toSerialize["monthlyDividends"] = o.MonthlyDividends.Get()
	}
	if !isNil(o.BadTickers) {
		toSerialize["badTickers"] = o.BadTickers
	}
	if !isNil(o.DividendTimeline) {
		toSerialize["dividendTimeline"] = o.DividendTimeline
	}
	if o.Commissions.IsSet() {
		toSerialize["commissions"] = o.Commissions.Get()
	}
	if o.ForexFees.IsSet() {
		toSerialize["forexFees"] = o.ForexFees.Get()
	}
	if o.Fees.IsSet() {
		toSerialize["fees"] = o.Fees.Get()
	}
	if o.RateOfReturn.IsSet() {
		toSerialize["rateOfReturn"] = o.RateOfReturn.Get()
	}
	if !isNil(o.ReturnRateTimeframe) {
		toSerialize["returnRateTimeframe"] = o.ReturnRateTimeframe
	}
	if !isNil(o.DetailedMode) {
		toSerialize["detailedMode"] = o.DetailedMode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PerformanceCustom) UnmarshalJSON(bytes []byte) (err error) {
	varPerformanceCustom := _PerformanceCustom{}

	if err = json.Unmarshal(bytes, &varPerformanceCustom); err == nil {
		*o = PerformanceCustom(varPerformanceCustom)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "totalEquityTimeframe")
		delete(additionalProperties, "contributions")
		delete(additionalProperties, "contributionTimeframe")
		delete(additionalProperties, "contributionTimeframeCumulative")
		delete(additionalProperties, "withdrawalTimeframe")
		delete(additionalProperties, "contributionStreak")
		delete(additionalProperties, "contributionMonthsContributed")
		delete(additionalProperties, "contributionTotalMonths")
		delete(additionalProperties, "dividends")
		delete(additionalProperties, "dividendIncome")
		delete(additionalProperties, "monthlyDividends")
		delete(additionalProperties, "badTickers")
		delete(additionalProperties, "dividendTimeline")
		delete(additionalProperties, "commissions")
		delete(additionalProperties, "forexFees")
		delete(additionalProperties, "fees")
		delete(additionalProperties, "rateOfReturn")
		delete(additionalProperties, "returnRateTimeframe")
		delete(additionalProperties, "detailedMode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePerformanceCustom struct {
	value *PerformanceCustom
	isSet bool
}

func (v NullablePerformanceCustom) Get() *PerformanceCustom {
	return v.value
}

func (v *NullablePerformanceCustom) Set(val *PerformanceCustom) {
	v.value = val
	v.isSet = true
}

func (v NullablePerformanceCustom) IsSet() bool {
	return v.isSet
}

func (v *NullablePerformanceCustom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerformanceCustom(val *PerformanceCustom) *NullablePerformanceCustom {
	return &NullablePerformanceCustom{value: val, isSet: true}
}

func (v NullablePerformanceCustom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerformanceCustom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


