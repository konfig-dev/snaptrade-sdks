/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// OptionStrategy struct for OptionStrategy
type OptionStrategy struct {
	Id *string `json:"id,omitempty"`
	UnderlyingSymbolId *UniversalSymbol `json:"underlying_symbol_id,omitempty"`
	StrategyType *string `json:"strategy_type,omitempty"`
	NumberOfLegs *float32 `json:"number_of_legs,omitempty"`
	Legs []OptionStrategyLegsInner `json:"legs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OptionStrategy OptionStrategy

// NewOptionStrategy instantiates a new OptionStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionStrategy() *OptionStrategy {
	this := OptionStrategy{}
	return &this
}

// NewOptionStrategyWithDefaults instantiates a new OptionStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionStrategyWithDefaults() *OptionStrategy {
	this := OptionStrategy{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OptionStrategy) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionStrategy) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OptionStrategy) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OptionStrategy) SetId(v string) {
	o.Id = &v
}

// GetUnderlyingSymbolId returns the UnderlyingSymbolId field value if set, zero value otherwise.
func (o *OptionStrategy) GetUnderlyingSymbolId() UniversalSymbol {
	if o == nil || isNil(o.UnderlyingSymbolId) {
		var ret UniversalSymbol
		return ret
	}
	return *o.UnderlyingSymbolId
}

// GetUnderlyingSymbolIdOk returns a tuple with the UnderlyingSymbolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionStrategy) GetUnderlyingSymbolIdOk() (*UniversalSymbol, bool) {
	if o == nil || isNil(o.UnderlyingSymbolId) {
    return nil, false
	}
	return o.UnderlyingSymbolId, true
}

// HasUnderlyingSymbolId returns a boolean if a field has been set.
func (o *OptionStrategy) HasUnderlyingSymbolId() bool {
	if o != nil && !isNil(o.UnderlyingSymbolId) {
		return true
	}

	return false
}

// SetUnderlyingSymbolId gets a reference to the given UniversalSymbol and assigns it to the UnderlyingSymbolId field.
func (o *OptionStrategy) SetUnderlyingSymbolId(v UniversalSymbol) {
	o.UnderlyingSymbolId = &v
}

// GetStrategyType returns the StrategyType field value if set, zero value otherwise.
func (o *OptionStrategy) GetStrategyType() string {
	if o == nil || isNil(o.StrategyType) {
		var ret string
		return ret
	}
	return *o.StrategyType
}

// GetStrategyTypeOk returns a tuple with the StrategyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionStrategy) GetStrategyTypeOk() (*string, bool) {
	if o == nil || isNil(o.StrategyType) {
    return nil, false
	}
	return o.StrategyType, true
}

// HasStrategyType returns a boolean if a field has been set.
func (o *OptionStrategy) HasStrategyType() bool {
	if o != nil && !isNil(o.StrategyType) {
		return true
	}

	return false
}

// SetStrategyType gets a reference to the given string and assigns it to the StrategyType field.
func (o *OptionStrategy) SetStrategyType(v string) {
	o.StrategyType = &v
}

// GetNumberOfLegs returns the NumberOfLegs field value if set, zero value otherwise.
func (o *OptionStrategy) GetNumberOfLegs() float32 {
	if o == nil || isNil(o.NumberOfLegs) {
		var ret float32
		return ret
	}
	return *o.NumberOfLegs
}

// GetNumberOfLegsOk returns a tuple with the NumberOfLegs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionStrategy) GetNumberOfLegsOk() (*float32, bool) {
	if o == nil || isNil(o.NumberOfLegs) {
    return nil, false
	}
	return o.NumberOfLegs, true
}

// HasNumberOfLegs returns a boolean if a field has been set.
func (o *OptionStrategy) HasNumberOfLegs() bool {
	if o != nil && !isNil(o.NumberOfLegs) {
		return true
	}

	return false
}

// SetNumberOfLegs gets a reference to the given float32 and assigns it to the NumberOfLegs field.
func (o *OptionStrategy) SetNumberOfLegs(v float32) {
	o.NumberOfLegs = &v
}

// GetLegs returns the Legs field value if set, zero value otherwise.
func (o *OptionStrategy) GetLegs() []OptionStrategyLegsInner {
	if o == nil || isNil(o.Legs) {
		var ret []OptionStrategyLegsInner
		return ret
	}
	return o.Legs
}

// GetLegsOk returns a tuple with the Legs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionStrategy) GetLegsOk() ([]OptionStrategyLegsInner, bool) {
	if o == nil || isNil(o.Legs) {
    return nil, false
	}
	return o.Legs, true
}

// HasLegs returns a boolean if a field has been set.
func (o *OptionStrategy) HasLegs() bool {
	if o != nil && !isNil(o.Legs) {
		return true
	}

	return false
}

// SetLegs gets a reference to the given []OptionStrategyLegsInner and assigns it to the Legs field.
func (o *OptionStrategy) SetLegs(v []OptionStrategyLegsInner) {
	o.Legs = v
}

func (o OptionStrategy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.UnderlyingSymbolId) {
		toSerialize["underlying_symbol_id"] = o.UnderlyingSymbolId
	}
	if !isNil(o.StrategyType) {
		toSerialize["strategy_type"] = o.StrategyType
	}
	if !isNil(o.NumberOfLegs) {
		toSerialize["number_of_legs"] = o.NumberOfLegs
	}
	if !isNil(o.Legs) {
		toSerialize["legs"] = o.Legs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OptionStrategy) UnmarshalJSON(bytes []byte) (err error) {
	varOptionStrategy := _OptionStrategy{}

	if err = json.Unmarshal(bytes, &varOptionStrategy); err == nil {
		*o = OptionStrategy(varOptionStrategy)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "underlying_symbol_id")
		delete(additionalProperties, "strategy_type")
		delete(additionalProperties, "number_of_legs")
		delete(additionalProperties, "legs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOptionStrategy struct {
	value *OptionStrategy
	isSet bool
}

func (v NullableOptionStrategy) Get() *OptionStrategy {
	return v.value
}

func (v *NullableOptionStrategy) Set(val *OptionStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionStrategy(val *OptionStrategy) *NullableOptionStrategy {
	return &NullableOptionStrategy{value: val, isSet: true}
}

func (v NullableOptionStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


