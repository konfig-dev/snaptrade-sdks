/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// Balance Account Balance
type Balance struct {
	Currency *Currency `json:"currency,omitempty"`
	Cash NullableFloat32 `json:"cash,omitempty"`
	BuyingPower NullableFloat32 `json:"buying_power,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Balance Balance

// NewBalance instantiates a new Balance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalance() *Balance {
	this := Balance{}
	return &this
}

// NewBalanceWithDefaults instantiates a new Balance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalanceWithDefaults() *Balance {
	this := Balance{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Balance) GetCurrency() Currency {
	if o == nil || isNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Balance) GetCurrencyOk() (*Currency, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Balance) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *Balance) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetCash returns the Cash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Balance) GetCash() float32 {
	if o == nil || isNil(o.Cash.Get()) {
		var ret float32
		return ret
	}
	return *o.Cash.Get()
}

// GetCashOk returns a tuple with the Cash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Balance) GetCashOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Cash.Get(), o.Cash.IsSet()
}

// HasCash returns a boolean if a field has been set.
func (o *Balance) HasCash() bool {
	if o != nil && o.Cash.IsSet() {
		return true
	}

	return false
}

// SetCash gets a reference to the given NullableFloat32 and assigns it to the Cash field.
func (o *Balance) SetCash(v float32) {
	o.Cash.Set(&v)
}
// SetCashNil sets the value for Cash to be an explicit nil
func (o *Balance) SetCashNil() {
	o.Cash.Set(nil)
}

// UnsetCash ensures that no value is present for Cash, not even an explicit nil
func (o *Balance) UnsetCash() {
	o.Cash.Unset()
}

// GetBuyingPower returns the BuyingPower field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Balance) GetBuyingPower() float32 {
	if o == nil || isNil(o.BuyingPower.Get()) {
		var ret float32
		return ret
	}
	return *o.BuyingPower.Get()
}

// GetBuyingPowerOk returns a tuple with the BuyingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Balance) GetBuyingPowerOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.BuyingPower.Get(), o.BuyingPower.IsSet()
}

// HasBuyingPower returns a boolean if a field has been set.
func (o *Balance) HasBuyingPower() bool {
	if o != nil && o.BuyingPower.IsSet() {
		return true
	}

	return false
}

// SetBuyingPower gets a reference to the given NullableFloat32 and assigns it to the BuyingPower field.
func (o *Balance) SetBuyingPower(v float32) {
	o.BuyingPower.Set(&v)
}
// SetBuyingPowerNil sets the value for BuyingPower to be an explicit nil
func (o *Balance) SetBuyingPowerNil() {
	o.BuyingPower.Set(nil)
}

// UnsetBuyingPower ensures that no value is present for BuyingPower, not even an explicit nil
func (o *Balance) UnsetBuyingPower() {
	o.BuyingPower.Unset()
}

func (o Balance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.Cash.IsSet() {
		toSerialize["cash"] = o.Cash.Get()
	}
	if o.BuyingPower.IsSet() {
		toSerialize["buying_power"] = o.BuyingPower.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Balance) UnmarshalJSON(bytes []byte) (err error) {
	varBalance := _Balance{}

	if err = json.Unmarshal(bytes, &varBalance); err == nil {
		*o = Balance(varBalance)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "currency")
		delete(additionalProperties, "cash")
		delete(additionalProperties, "buying_power")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBalance struct {
	value *Balance
	isSet bool
}

func (v NullableBalance) Get() *Balance {
	return v.value
}

func (v *NullableBalance) Set(val *Balance) {
	v.value = val
	v.isSet = true
}

func (v NullableBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalance(val *Balance) *NullableBalance {
	return &NullableBalance{value: val, isSet: true}
}

func (v NullableBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


