/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// SymbolQuery Symbol query for searching for symbols
type SymbolQuery struct {
	Substring *string `json:"substring,omitempty"`
}

// NewSymbolQuery instantiates a new SymbolQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymbolQuery() *SymbolQuery {
	this := SymbolQuery{}
	return &this
}

// NewSymbolQueryWithDefaults instantiates a new SymbolQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymbolQueryWithDefaults() *SymbolQuery {
	this := SymbolQuery{}
	return &this
}

// GetSubstring returns the Substring field value if set, zero value otherwise.
func (o *SymbolQuery) GetSubstring() string {
	if o == nil || isNil(o.Substring) {
		var ret string
		return ret
	}
	return *o.Substring
}

// GetSubstringOk returns a tuple with the Substring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolQuery) GetSubstringOk() (*string, bool) {
	if o == nil || isNil(o.Substring) {
    return nil, false
	}
	return o.Substring, true
}

// HasSubstring returns a boolean if a field has been set.
func (o *SymbolQuery) HasSubstring() bool {
	if o != nil && !isNil(o.Substring) {
		return true
	}

	return false
}

// SetSubstring gets a reference to the given string and assigns it to the Substring field.
func (o *SymbolQuery) SetSubstring(v string) {
	o.Substring = &v
}

func (o SymbolQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Substring) {
		toSerialize["substring"] = o.Substring
	}
	return json.Marshal(toSerialize)
}

type NullableSymbolQuery struct {
	value *SymbolQuery
	isSet bool
}

func (v NullableSymbolQuery) Get() *SymbolQuery {
	return v.value
}

func (v *NullableSymbolQuery) Set(val *SymbolQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbolQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbolQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbolQuery(val *SymbolQuery) *NullableSymbolQuery {
	return &NullableSymbolQuery{value: val, isSet: true}
}

func (v NullableSymbolQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbolQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


