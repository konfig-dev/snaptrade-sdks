/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// OptionsHoldings Option Holdings
type OptionsHoldings struct {
	// Options information
	Id *string `json:"id,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	OptionSymbol *OptionsSymbol `json:"option_symbol,omitempty"`
	// Trade Price if limit or stop limit order
	Price NullableFloat32 `json:"price,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
	// Average purchase price for this position
	AveragePurchasePrice NullableFloat32 `json:"average_purchase_price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OptionsHoldings OptionsHoldings

// NewOptionsHoldings instantiates a new OptionsHoldings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionsHoldings() *OptionsHoldings {
	this := OptionsHoldings{}
	return &this
}

// NewOptionsHoldingsWithDefaults instantiates a new OptionsHoldings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionsHoldingsWithDefaults() *OptionsHoldings {
	this := OptionsHoldings{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OptionsHoldings) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsHoldings) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OptionsHoldings) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OptionsHoldings) SetId(v string) {
	o.Id = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *OptionsHoldings) GetSymbol() string {
	if o == nil || isNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsHoldings) GetSymbolOk() (*string, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *OptionsHoldings) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *OptionsHoldings) SetSymbol(v string) {
	o.Symbol = &v
}

// GetOptionSymbol returns the OptionSymbol field value if set, zero value otherwise.
func (o *OptionsHoldings) GetOptionSymbol() OptionsSymbol {
	if o == nil || isNil(o.OptionSymbol) {
		var ret OptionsSymbol
		return ret
	}
	return *o.OptionSymbol
}

// GetOptionSymbolOk returns a tuple with the OptionSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsHoldings) GetOptionSymbolOk() (*OptionsSymbol, bool) {
	if o == nil || isNil(o.OptionSymbol) {
    return nil, false
	}
	return o.OptionSymbol, true
}

// HasOptionSymbol returns a boolean if a field has been set.
func (o *OptionsHoldings) HasOptionSymbol() bool {
	if o != nil && !isNil(o.OptionSymbol) {
		return true
	}

	return false
}

// SetOptionSymbol gets a reference to the given OptionsSymbol and assigns it to the OptionSymbol field.
func (o *OptionsHoldings) SetOptionSymbol(v OptionsSymbol) {
	o.OptionSymbol = &v
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionsHoldings) GetPrice() float32 {
	if o == nil || isNil(o.Price.Get()) {
		var ret float32
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionsHoldings) GetPriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *OptionsHoldings) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat32 and assigns it to the Price field.
func (o *OptionsHoldings) SetPrice(v float32) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *OptionsHoldings) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *OptionsHoldings) UnsetPrice() {
	o.Price.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *OptionsHoldings) GetCurrency() Currency {
	if o == nil || isNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsHoldings) GetCurrencyOk() (*Currency, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *OptionsHoldings) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *OptionsHoldings) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetAveragePurchasePrice returns the AveragePurchasePrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionsHoldings) GetAveragePurchasePrice() float32 {
	if o == nil || isNil(o.AveragePurchasePrice.Get()) {
		var ret float32
		return ret
	}
	return *o.AveragePurchasePrice.Get()
}

// GetAveragePurchasePriceOk returns a tuple with the AveragePurchasePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionsHoldings) GetAveragePurchasePriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.AveragePurchasePrice.Get(), o.AveragePurchasePrice.IsSet()
}

// HasAveragePurchasePrice returns a boolean if a field has been set.
func (o *OptionsHoldings) HasAveragePurchasePrice() bool {
	if o != nil && o.AveragePurchasePrice.IsSet() {
		return true
	}

	return false
}

// SetAveragePurchasePrice gets a reference to the given NullableFloat32 and assigns it to the AveragePurchasePrice field.
func (o *OptionsHoldings) SetAveragePurchasePrice(v float32) {
	o.AveragePurchasePrice.Set(&v)
}
// SetAveragePurchasePriceNil sets the value for AveragePurchasePrice to be an explicit nil
func (o *OptionsHoldings) SetAveragePurchasePriceNil() {
	o.AveragePurchasePrice.Set(nil)
}

// UnsetAveragePurchasePrice ensures that no value is present for AveragePurchasePrice, not even an explicit nil
func (o *OptionsHoldings) UnsetAveragePurchasePrice() {
	o.AveragePurchasePrice.Unset()
}

func (o OptionsHoldings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !isNil(o.OptionSymbol) {
		toSerialize["option_symbol"] = o.OptionSymbol
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.AveragePurchasePrice.IsSet() {
		toSerialize["average_purchase_price"] = o.AveragePurchasePrice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OptionsHoldings) UnmarshalJSON(bytes []byte) (err error) {
	varOptionsHoldings := _OptionsHoldings{}

	if err = json.Unmarshal(bytes, &varOptionsHoldings); err == nil {
		*o = OptionsHoldings(varOptionsHoldings)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "option_symbol")
		delete(additionalProperties, "price")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "average_purchase_price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOptionsHoldings struct {
	value *OptionsHoldings
	isSet bool
}

func (v NullableOptionsHoldings) Get() *OptionsHoldings {
	return v.value
}

func (v *NullableOptionsHoldings) Set(val *OptionsHoldings) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionsHoldings) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionsHoldings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionsHoldings(val *OptionsHoldings) *NullableOptionsHoldings {
	return &NullableOptionsHoldings{value: val, isSet: true}
}

func (v NullableOptionsHoldings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionsHoldings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


