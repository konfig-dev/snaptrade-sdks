/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// EncryptedResponseEncryptedMessageData struct for EncryptedResponseEncryptedMessageData
type EncryptedResponseEncryptedMessageData struct {
	EncryptedMessage *string `json:"encryptedMessage,omitempty"`
	Tag *string `json:"tag,omitempty"`
	Nonce *string `json:"nonce,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EncryptedResponseEncryptedMessageData EncryptedResponseEncryptedMessageData

// NewEncryptedResponseEncryptedMessageData instantiates a new EncryptedResponseEncryptedMessageData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptedResponseEncryptedMessageData() *EncryptedResponseEncryptedMessageData {
	this := EncryptedResponseEncryptedMessageData{}
	return &this
}

// NewEncryptedResponseEncryptedMessageDataWithDefaults instantiates a new EncryptedResponseEncryptedMessageData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptedResponseEncryptedMessageDataWithDefaults() *EncryptedResponseEncryptedMessageData {
	this := EncryptedResponseEncryptedMessageData{}
	return &this
}

// GetEncryptedMessage returns the EncryptedMessage field value if set, zero value otherwise.
func (o *EncryptedResponseEncryptedMessageData) GetEncryptedMessage() string {
	if o == nil || isNil(o.EncryptedMessage) {
		var ret string
		return ret
	}
	return *o.EncryptedMessage
}

// GetEncryptedMessageOk returns a tuple with the EncryptedMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptedResponseEncryptedMessageData) GetEncryptedMessageOk() (*string, bool) {
	if o == nil || isNil(o.EncryptedMessage) {
    return nil, false
	}
	return o.EncryptedMessage, true
}

// HasEncryptedMessage returns a boolean if a field has been set.
func (o *EncryptedResponseEncryptedMessageData) HasEncryptedMessage() bool {
	if o != nil && !isNil(o.EncryptedMessage) {
		return true
	}

	return false
}

// SetEncryptedMessage gets a reference to the given string and assigns it to the EncryptedMessage field.
func (o *EncryptedResponseEncryptedMessageData) SetEncryptedMessage(v string) {
	o.EncryptedMessage = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *EncryptedResponseEncryptedMessageData) GetTag() string {
	if o == nil || isNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptedResponseEncryptedMessageData) GetTagOk() (*string, bool) {
	if o == nil || isNil(o.Tag) {
    return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *EncryptedResponseEncryptedMessageData) HasTag() bool {
	if o != nil && !isNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *EncryptedResponseEncryptedMessageData) SetTag(v string) {
	o.Tag = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *EncryptedResponseEncryptedMessageData) GetNonce() string {
	if o == nil || isNil(o.Nonce) {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptedResponseEncryptedMessageData) GetNonceOk() (*string, bool) {
	if o == nil || isNil(o.Nonce) {
    return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *EncryptedResponseEncryptedMessageData) HasNonce() bool {
	if o != nil && !isNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *EncryptedResponseEncryptedMessageData) SetNonce(v string) {
	o.Nonce = &v
}

func (o EncryptedResponseEncryptedMessageData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EncryptedMessage) {
		toSerialize["encryptedMessage"] = o.EncryptedMessage
	}
	if !isNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !isNil(o.Nonce) {
		toSerialize["nonce"] = o.Nonce
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *EncryptedResponseEncryptedMessageData) UnmarshalJSON(bytes []byte) (err error) {
	varEncryptedResponseEncryptedMessageData := _EncryptedResponseEncryptedMessageData{}

	if err = json.Unmarshal(bytes, &varEncryptedResponseEncryptedMessageData); err == nil {
		*o = EncryptedResponseEncryptedMessageData(varEncryptedResponseEncryptedMessageData)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "encryptedMessage")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "nonce")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEncryptedResponseEncryptedMessageData struct {
	value *EncryptedResponseEncryptedMessageData
	isSet bool
}

func (v NullableEncryptedResponseEncryptedMessageData) Get() *EncryptedResponseEncryptedMessageData {
	return v.value
}

func (v *NullableEncryptedResponseEncryptedMessageData) Set(val *EncryptedResponseEncryptedMessageData) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptedResponseEncryptedMessageData) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptedResponseEncryptedMessageData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptedResponseEncryptedMessageData(val *EncryptedResponseEncryptedMessageData) *NullableEncryptedResponseEncryptedMessageData {
	return &NullableEncryptedResponseEncryptedMessageData{value: val, isSet: true}
}

func (v NullableEncryptedResponseEncryptedMessageData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptedResponseEncryptedMessageData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


