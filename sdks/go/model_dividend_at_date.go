/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// DividendAtDate struct for DividendAtDate
type DividendAtDate struct {
	// The ticker of the symbol that the dividend came from
	Symbol NullableString `json:"symbol,omitempty"`
	// The amount received from the dividend
	Amount NullableFloat32 `json:"amount,omitempty"`
	// The currency of the amount
	Currency *string `json:"currency,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DividendAtDate DividendAtDate

// NewDividendAtDate instantiates a new DividendAtDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDividendAtDate() *DividendAtDate {
	this := DividendAtDate{}
	return &this
}

// NewDividendAtDateWithDefaults instantiates a new DividendAtDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDividendAtDateWithDefaults() *DividendAtDate {
	this := DividendAtDate{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DividendAtDate) GetSymbol() string {
	if o == nil || isNil(o.Symbol.Get()) {
		var ret string
		return ret
	}
	return *o.Symbol.Get()
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DividendAtDate) GetSymbolOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Symbol.Get(), o.Symbol.IsSet()
}

// HasSymbol returns a boolean if a field has been set.
func (o *DividendAtDate) HasSymbol() bool {
	if o != nil && o.Symbol.IsSet() {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given NullableString and assigns it to the Symbol field.
func (o *DividendAtDate) SetSymbol(v string) {
	o.Symbol.Set(&v)
}
// SetSymbolNil sets the value for Symbol to be an explicit nil
func (o *DividendAtDate) SetSymbolNil() {
	o.Symbol.Set(nil)
}

// UnsetSymbol ensures that no value is present for Symbol, not even an explicit nil
func (o *DividendAtDate) UnsetSymbol() {
	o.Symbol.Unset()
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DividendAtDate) GetAmount() float32 {
	if o == nil || isNil(o.Amount.Get()) {
		var ret float32
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DividendAtDate) GetAmountOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *DividendAtDate) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableFloat32 and assigns it to the Amount field.
func (o *DividendAtDate) SetAmount(v float32) {
	o.Amount.Set(&v)
}
// SetAmountNil sets the value for Amount to be an explicit nil
func (o *DividendAtDate) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *DividendAtDate) UnsetAmount() {
	o.Amount.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *DividendAtDate) GetCurrency() string {
	if o == nil || isNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DividendAtDate) GetCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *DividendAtDate) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *DividendAtDate) SetCurrency(v string) {
	o.Currency = &v
}

func (o DividendAtDate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol.IsSet() {
		toSerialize["symbol"] = o.Symbol.Get()
	}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DividendAtDate) UnmarshalJSON(bytes []byte) (err error) {
	varDividendAtDate := _DividendAtDate{}

	if err = json.Unmarshal(bytes, &varDividendAtDate); err == nil {
		*o = DividendAtDate(varDividendAtDate)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDividendAtDate struct {
	value *DividendAtDate
	isSet bool
}

func (v NullableDividendAtDate) Get() *DividendAtDate {
	return v.value
}

func (v *NullableDividendAtDate) Set(val *DividendAtDate) {
	v.value = val
	v.isSet = true
}

func (v NullableDividendAtDate) IsSet() bool {
	return v.isSet
}

func (v *NullableDividendAtDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDividendAtDate(val *DividendAtDate) *NullableDividendAtDate {
	return &NullableDividendAtDate{value: val, isSet: true}
}

func (v NullableDividendAtDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDividendAtDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


