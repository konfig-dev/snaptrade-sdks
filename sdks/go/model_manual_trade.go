/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// ManualTrade A manual trade object
type ManualTrade struct {
	Id *string `json:"id,omitempty"`
	Account *string `json:"account,omitempty"`
	OrderType *OrderTypeStrict `json:"order_type,omitempty"`
	// Trade time in force examples:   * FOK - Fill Or Kill   * Day - Day   * GTC - Good Til Canceled   * GTD - Good Til Date 
	TimeInForce *string `json:"time_in_force,omitempty"`
	Symbol *ManualTradeSymbol `json:"symbol,omitempty"`
	Action *ActionStrict `json:"action,omitempty"`
	Units NullableFloat32 `json:"units,omitempty"`
	// Trade Price if limit or stop limit order
	Price NullableFloat32 `json:"price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManualTrade ManualTrade

// NewManualTrade instantiates a new ManualTrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualTrade() *ManualTrade {
	this := ManualTrade{}
	return &this
}

// NewManualTradeWithDefaults instantiates a new ManualTrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualTradeWithDefaults() *ManualTrade {
	this := ManualTrade{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManualTrade) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTrade) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ManualTrade) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ManualTrade) SetId(v string) {
	o.Id = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *ManualTrade) GetAccount() string {
	if o == nil || isNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTrade) GetAccountOk() (*string, bool) {
	if o == nil || isNil(o.Account) {
    return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *ManualTrade) HasAccount() bool {
	if o != nil && !isNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *ManualTrade) SetAccount(v string) {
	o.Account = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *ManualTrade) GetOrderType() OrderTypeStrict {
	if o == nil || isNil(o.OrderType) {
		var ret OrderTypeStrict
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTrade) GetOrderTypeOk() (*OrderTypeStrict, bool) {
	if o == nil || isNil(o.OrderType) {
    return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *ManualTrade) HasOrderType() bool {
	if o != nil && !isNil(o.OrderType) {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given OrderTypeStrict and assigns it to the OrderType field.
func (o *ManualTrade) SetOrderType(v OrderTypeStrict) {
	o.OrderType = &v
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *ManualTrade) GetTimeInForce() string {
	if o == nil || isNil(o.TimeInForce) {
		var ret string
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTrade) GetTimeInForceOk() (*string, bool) {
	if o == nil || isNil(o.TimeInForce) {
    return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *ManualTrade) HasTimeInForce() bool {
	if o != nil && !isNil(o.TimeInForce) {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given string and assigns it to the TimeInForce field.
func (o *ManualTrade) SetTimeInForce(v string) {
	o.TimeInForce = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *ManualTrade) GetSymbol() ManualTradeSymbol {
	if o == nil || isNil(o.Symbol) {
		var ret ManualTradeSymbol
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTrade) GetSymbolOk() (*ManualTradeSymbol, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *ManualTrade) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given ManualTradeSymbol and assigns it to the Symbol field.
func (o *ManualTrade) SetSymbol(v ManualTradeSymbol) {
	o.Symbol = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ManualTrade) GetAction() ActionStrict {
	if o == nil || isNil(o.Action) {
		var ret ActionStrict
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTrade) GetActionOk() (*ActionStrict, bool) {
	if o == nil || isNil(o.Action) {
    return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ManualTrade) HasAction() bool {
	if o != nil && !isNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given ActionStrict and assigns it to the Action field.
func (o *ManualTrade) SetAction(v ActionStrict) {
	o.Action = &v
}

// GetUnits returns the Units field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualTrade) GetUnits() float32 {
	if o == nil || isNil(o.Units.Get()) {
		var ret float32
		return ret
	}
	return *o.Units.Get()
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualTrade) GetUnitsOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Units.Get(), o.Units.IsSet()
}

// HasUnits returns a boolean if a field has been set.
func (o *ManualTrade) HasUnits() bool {
	if o != nil && o.Units.IsSet() {
		return true
	}

	return false
}

// SetUnits gets a reference to the given NullableFloat32 and assigns it to the Units field.
func (o *ManualTrade) SetUnits(v float32) {
	o.Units.Set(&v)
}
// SetUnitsNil sets the value for Units to be an explicit nil
func (o *ManualTrade) SetUnitsNil() {
	o.Units.Set(nil)
}

// UnsetUnits ensures that no value is present for Units, not even an explicit nil
func (o *ManualTrade) UnsetUnits() {
	o.Units.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualTrade) GetPrice() float32 {
	if o == nil || isNil(o.Price.Get()) {
		var ret float32
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualTrade) GetPriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *ManualTrade) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat32 and assigns it to the Price field.
func (o *ManualTrade) SetPrice(v float32) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *ManualTrade) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *ManualTrade) UnsetPrice() {
	o.Price.Unset()
}

func (o ManualTrade) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !isNil(o.OrderType) {
		toSerialize["order_type"] = o.OrderType
	}
	if !isNil(o.TimeInForce) {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !isNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if o.Units.IsSet() {
		toSerialize["units"] = o.Units.Get()
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ManualTrade) UnmarshalJSON(bytes []byte) (err error) {
	varManualTrade := _ManualTrade{}

	if err = json.Unmarshal(bytes, &varManualTrade); err == nil {
		*o = ManualTrade(varManualTrade)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "account")
		delete(additionalProperties, "order_type")
		delete(additionalProperties, "time_in_force")
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "action")
		delete(additionalProperties, "units")
		delete(additionalProperties, "price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManualTrade struct {
	value *ManualTrade
	isSet bool
}

func (v NullableManualTrade) Get() *ManualTrade {
	return v.value
}

func (v *NullableManualTrade) Set(val *ManualTrade) {
	v.value = val
	v.isSet = true
}

func (v NullableManualTrade) IsSet() bool {
	return v.isSet
}

func (v *NullableManualTrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualTrade(val *ManualTrade) *NullableManualTrade {
	return &NullableManualTrade{value: val, isSet: true}
}

func (v NullableManualTrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualTrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


