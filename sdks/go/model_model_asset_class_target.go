/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// ModelAssetClassTarget struct for ModelAssetClassTarget
type ModelAssetClassTarget struct {
	Symbol *UniversalSymbol `json:"symbol,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelAssetClassTarget ModelAssetClassTarget

// NewModelAssetClassTarget instantiates a new ModelAssetClassTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelAssetClassTarget() *ModelAssetClassTarget {
	this := ModelAssetClassTarget{}
	return &this
}

// NewModelAssetClassTargetWithDefaults instantiates a new ModelAssetClassTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelAssetClassTargetWithDefaults() *ModelAssetClassTarget {
	this := ModelAssetClassTarget{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *ModelAssetClassTarget) GetSymbol() UniversalSymbol {
	if o == nil || isNil(o.Symbol) {
		var ret UniversalSymbol
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAssetClassTarget) GetSymbolOk() (*UniversalSymbol, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *ModelAssetClassTarget) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given UniversalSymbol and assigns it to the Symbol field.
func (o *ModelAssetClassTarget) SetSymbol(v UniversalSymbol) {
	o.Symbol = &v
}

func (o ModelAssetClassTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ModelAssetClassTarget) UnmarshalJSON(bytes []byte) (err error) {
	varModelAssetClassTarget := _ModelAssetClassTarget{}

	if err = json.Unmarshal(bytes, &varModelAssetClassTarget); err == nil {
		*o = ModelAssetClassTarget(varModelAssetClassTarget)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelAssetClassTarget struct {
	value *ModelAssetClassTarget
	isSet bool
}

func (v NullableModelAssetClassTarget) Get() *ModelAssetClassTarget {
	return v.value
}

func (v *NullableModelAssetClassTarget) Set(val *ModelAssetClassTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAssetClassTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAssetClassTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAssetClassTarget(val *ModelAssetClassTarget) *NullableModelAssetClassTarget {
	return &NullableModelAssetClassTarget{value: val, isSet: true}
}

func (v NullableModelAssetClassTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAssetClassTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


