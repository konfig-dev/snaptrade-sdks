/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// SubPeriodReturnRate struct for SubPeriodReturnRate
type SubPeriodReturnRate struct {
	// Date used to specify timeframe for a reporting call (in YYYY-MM-DD format)
	PeriodStart *string `json:"periodStart,omitempty"`
	// Date used to specify timeframe for a reporting call (in YYYY-MM-DD format)
	PeriodEnd *string `json:"periodEnd,omitempty"`
	// The return rate for the given period
	RateOfReturn NullableFloat32 `json:"rateOfReturn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubPeriodReturnRate SubPeriodReturnRate

// NewSubPeriodReturnRate instantiates a new SubPeriodReturnRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubPeriodReturnRate() *SubPeriodReturnRate {
	this := SubPeriodReturnRate{}
	return &this
}

// NewSubPeriodReturnRateWithDefaults instantiates a new SubPeriodReturnRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubPeriodReturnRateWithDefaults() *SubPeriodReturnRate {
	this := SubPeriodReturnRate{}
	return &this
}

// GetPeriodStart returns the PeriodStart field value if set, zero value otherwise.
func (o *SubPeriodReturnRate) GetPeriodStart() string {
	if o == nil || isNil(o.PeriodStart) {
		var ret string
		return ret
	}
	return *o.PeriodStart
}

// GetPeriodStartOk returns a tuple with the PeriodStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPeriodReturnRate) GetPeriodStartOk() (*string, bool) {
	if o == nil || isNil(o.PeriodStart) {
    return nil, false
	}
	return o.PeriodStart, true
}

// HasPeriodStart returns a boolean if a field has been set.
func (o *SubPeriodReturnRate) HasPeriodStart() bool {
	if o != nil && !isNil(o.PeriodStart) {
		return true
	}

	return false
}

// SetPeriodStart gets a reference to the given string and assigns it to the PeriodStart field.
func (o *SubPeriodReturnRate) SetPeriodStart(v string) {
	o.PeriodStart = &v
}

// GetPeriodEnd returns the PeriodEnd field value if set, zero value otherwise.
func (o *SubPeriodReturnRate) GetPeriodEnd() string {
	if o == nil || isNil(o.PeriodEnd) {
		var ret string
		return ret
	}
	return *o.PeriodEnd
}

// GetPeriodEndOk returns a tuple with the PeriodEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPeriodReturnRate) GetPeriodEndOk() (*string, bool) {
	if o == nil || isNil(o.PeriodEnd) {
    return nil, false
	}
	return o.PeriodEnd, true
}

// HasPeriodEnd returns a boolean if a field has been set.
func (o *SubPeriodReturnRate) HasPeriodEnd() bool {
	if o != nil && !isNil(o.PeriodEnd) {
		return true
	}

	return false
}

// SetPeriodEnd gets a reference to the given string and assigns it to the PeriodEnd field.
func (o *SubPeriodReturnRate) SetPeriodEnd(v string) {
	o.PeriodEnd = &v
}

// GetRateOfReturn returns the RateOfReturn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubPeriodReturnRate) GetRateOfReturn() float32 {
	if o == nil || isNil(o.RateOfReturn.Get()) {
		var ret float32
		return ret
	}
	return *o.RateOfReturn.Get()
}

// GetRateOfReturnOk returns a tuple with the RateOfReturn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubPeriodReturnRate) GetRateOfReturnOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.RateOfReturn.Get(), o.RateOfReturn.IsSet()
}

// HasRateOfReturn returns a boolean if a field has been set.
func (o *SubPeriodReturnRate) HasRateOfReturn() bool {
	if o != nil && o.RateOfReturn.IsSet() {
		return true
	}

	return false
}

// SetRateOfReturn gets a reference to the given NullableFloat32 and assigns it to the RateOfReturn field.
func (o *SubPeriodReturnRate) SetRateOfReturn(v float32) {
	o.RateOfReturn.Set(&v)
}
// SetRateOfReturnNil sets the value for RateOfReturn to be an explicit nil
func (o *SubPeriodReturnRate) SetRateOfReturnNil() {
	o.RateOfReturn.Set(nil)
}

// UnsetRateOfReturn ensures that no value is present for RateOfReturn, not even an explicit nil
func (o *SubPeriodReturnRate) UnsetRateOfReturn() {
	o.RateOfReturn.Unset()
}

func (o SubPeriodReturnRate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PeriodStart) {
		toSerialize["periodStart"] = o.PeriodStart
	}
	if !isNil(o.PeriodEnd) {
		toSerialize["periodEnd"] = o.PeriodEnd
	}
	if o.RateOfReturn.IsSet() {
		toSerialize["rateOfReturn"] = o.RateOfReturn.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SubPeriodReturnRate) UnmarshalJSON(bytes []byte) (err error) {
	varSubPeriodReturnRate := _SubPeriodReturnRate{}

	if err = json.Unmarshal(bytes, &varSubPeriodReturnRate); err == nil {
		*o = SubPeriodReturnRate(varSubPeriodReturnRate)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "periodStart")
		delete(additionalProperties, "periodEnd")
		delete(additionalProperties, "rateOfReturn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubPeriodReturnRate struct {
	value *SubPeriodReturnRate
	isSet bool
}

func (v NullableSubPeriodReturnRate) Get() *SubPeriodReturnRate {
	return v.value
}

func (v *NullableSubPeriodReturnRate) Set(val *SubPeriodReturnRate) {
	v.value = val
	v.isSet = true
}

func (v NullableSubPeriodReturnRate) IsSet() bool {
	return v.isSet
}

func (v *NullableSubPeriodReturnRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubPeriodReturnRate(val *SubPeriodReturnRate) *NullableSubPeriodReturnRate {
	return &NullableSubPeriodReturnRate{value: val, isSet: true}
}

func (v NullableSubPeriodReturnRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubPeriodReturnRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


