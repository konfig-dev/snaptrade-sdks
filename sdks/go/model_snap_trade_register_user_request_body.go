/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// SnapTradeRegisterUserRequestBody Data required to register a user via SnapTrade Partner
type SnapTradeRegisterUserRequestBody struct {
	// SnapTrade User ID. This is chosen by the API partner and can be any string that is a) unique to the user, and b) immutable for the user. It is recommended to NOT use email addresses for this property because they are usually not immutable.
	UserId *string `json:"userId,omitempty"`
}

// NewSnapTradeRegisterUserRequestBody instantiates a new SnapTradeRegisterUserRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapTradeRegisterUserRequestBody() *SnapTradeRegisterUserRequestBody {
	this := SnapTradeRegisterUserRequestBody{}
	return &this
}

// NewSnapTradeRegisterUserRequestBodyWithDefaults instantiates a new SnapTradeRegisterUserRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapTradeRegisterUserRequestBodyWithDefaults() *SnapTradeRegisterUserRequestBody {
	this := SnapTradeRegisterUserRequestBody{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SnapTradeRegisterUserRequestBody) GetUserId() string {
	if o == nil || isNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapTradeRegisterUserRequestBody) GetUserIdOk() (*string, bool) {
	if o == nil || isNil(o.UserId) {
    return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SnapTradeRegisterUserRequestBody) HasUserId() bool {
	if o != nil && !isNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *SnapTradeRegisterUserRequestBody) SetUserId(v string) {
	o.UserId = &v
}

func (o SnapTradeRegisterUserRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableSnapTradeRegisterUserRequestBody struct {
	value *SnapTradeRegisterUserRequestBody
	isSet bool
}

func (v NullableSnapTradeRegisterUserRequestBody) Get() *SnapTradeRegisterUserRequestBody {
	return v.value
}

func (v *NullableSnapTradeRegisterUserRequestBody) Set(val *SnapTradeRegisterUserRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapTradeRegisterUserRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapTradeRegisterUserRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapTradeRegisterUserRequestBody(val *SnapTradeRegisterUserRequestBody) *NullableSnapTradeRegisterUserRequestBody {
	return &NullableSnapTradeRegisterUserRequestBody{value: val, isSet: true}
}

func (v NullableSnapTradeRegisterUserRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapTradeRegisterUserRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


