/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// UnderlyingSymbol Underlying Symbol
type UnderlyingSymbol struct {
	Id *string `json:"id,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
	Exchange *USExchange `json:"exchange,omitempty"`
	Type *SecurityType `json:"type,omitempty"`
	Currencies []Currency `json:"currencies,omitempty"`
	FigiCode NullableString `json:"figi_code,omitempty"`
	FigiInstrument NullableSymbolFigiInstrument `json:"figi_instrument,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UnderlyingSymbol UnderlyingSymbol

// NewUnderlyingSymbol instantiates a new UnderlyingSymbol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnderlyingSymbol() *UnderlyingSymbol {
	this := UnderlyingSymbol{}
	return &this
}

// NewUnderlyingSymbolWithDefaults instantiates a new UnderlyingSymbol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnderlyingSymbolWithDefaults() *UnderlyingSymbol {
	this := UnderlyingSymbol{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UnderlyingSymbol) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnderlyingSymbol) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UnderlyingSymbol) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UnderlyingSymbol) SetId(v string) {
	o.Id = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *UnderlyingSymbol) GetSymbol() string {
	if o == nil || isNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnderlyingSymbol) GetSymbolOk() (*string, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *UnderlyingSymbol) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *UnderlyingSymbol) SetSymbol(v string) {
	o.Symbol = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnderlyingSymbol) GetDescription() string {
	if o == nil || isNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnderlyingSymbol) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UnderlyingSymbol) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UnderlyingSymbol) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UnderlyingSymbol) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UnderlyingSymbol) UnsetDescription() {
	o.Description.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *UnderlyingSymbol) GetCurrency() Currency {
	if o == nil || isNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnderlyingSymbol) GetCurrencyOk() (*Currency, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *UnderlyingSymbol) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *UnderlyingSymbol) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *UnderlyingSymbol) GetExchange() USExchange {
	if o == nil || isNil(o.Exchange) {
		var ret USExchange
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnderlyingSymbol) GetExchangeOk() (*USExchange, bool) {
	if o == nil || isNil(o.Exchange) {
    return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *UnderlyingSymbol) HasExchange() bool {
	if o != nil && !isNil(o.Exchange) {
		return true
	}

	return false
}

// SetExchange gets a reference to the given USExchange and assigns it to the Exchange field.
func (o *UnderlyingSymbol) SetExchange(v USExchange) {
	o.Exchange = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UnderlyingSymbol) GetType() SecurityType {
	if o == nil || isNil(o.Type) {
		var ret SecurityType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnderlyingSymbol) GetTypeOk() (*SecurityType, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UnderlyingSymbol) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SecurityType and assigns it to the Type field.
func (o *UnderlyingSymbol) SetType(v SecurityType) {
	o.Type = &v
}

// GetCurrencies returns the Currencies field value if set, zero value otherwise.
func (o *UnderlyingSymbol) GetCurrencies() []Currency {
	if o == nil || isNil(o.Currencies) {
		var ret []Currency
		return ret
	}
	return o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnderlyingSymbol) GetCurrenciesOk() ([]Currency, bool) {
	if o == nil || isNil(o.Currencies) {
    return nil, false
	}
	return o.Currencies, true
}

// HasCurrencies returns a boolean if a field has been set.
func (o *UnderlyingSymbol) HasCurrencies() bool {
	if o != nil && !isNil(o.Currencies) {
		return true
	}

	return false
}

// SetCurrencies gets a reference to the given []Currency and assigns it to the Currencies field.
func (o *UnderlyingSymbol) SetCurrencies(v []Currency) {
	o.Currencies = v
}

// GetFigiCode returns the FigiCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnderlyingSymbol) GetFigiCode() string {
	if o == nil || isNil(o.FigiCode.Get()) {
		var ret string
		return ret
	}
	return *o.FigiCode.Get()
}

// GetFigiCodeOk returns a tuple with the FigiCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnderlyingSymbol) GetFigiCodeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.FigiCode.Get(), o.FigiCode.IsSet()
}

// HasFigiCode returns a boolean if a field has been set.
func (o *UnderlyingSymbol) HasFigiCode() bool {
	if o != nil && o.FigiCode.IsSet() {
		return true
	}

	return false
}

// SetFigiCode gets a reference to the given NullableString and assigns it to the FigiCode field.
func (o *UnderlyingSymbol) SetFigiCode(v string) {
	o.FigiCode.Set(&v)
}
// SetFigiCodeNil sets the value for FigiCode to be an explicit nil
func (o *UnderlyingSymbol) SetFigiCodeNil() {
	o.FigiCode.Set(nil)
}

// UnsetFigiCode ensures that no value is present for FigiCode, not even an explicit nil
func (o *UnderlyingSymbol) UnsetFigiCode() {
	o.FigiCode.Unset()
}

// GetFigiInstrument returns the FigiInstrument field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnderlyingSymbol) GetFigiInstrument() SymbolFigiInstrument {
	if o == nil || isNil(o.FigiInstrument.Get()) {
		var ret SymbolFigiInstrument
		return ret
	}
	return *o.FigiInstrument.Get()
}

// GetFigiInstrumentOk returns a tuple with the FigiInstrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnderlyingSymbol) GetFigiInstrumentOk() (*SymbolFigiInstrument, bool) {
	if o == nil {
    return nil, false
	}
	return o.FigiInstrument.Get(), o.FigiInstrument.IsSet()
}

// HasFigiInstrument returns a boolean if a field has been set.
func (o *UnderlyingSymbol) HasFigiInstrument() bool {
	if o != nil && o.FigiInstrument.IsSet() {
		return true
	}

	return false
}

// SetFigiInstrument gets a reference to the given NullableSymbolFigiInstrument and assigns it to the FigiInstrument field.
func (o *UnderlyingSymbol) SetFigiInstrument(v SymbolFigiInstrument) {
	o.FigiInstrument.Set(&v)
}
// SetFigiInstrumentNil sets the value for FigiInstrument to be an explicit nil
func (o *UnderlyingSymbol) SetFigiInstrumentNil() {
	o.FigiInstrument.Set(nil)
}

// UnsetFigiInstrument ensures that no value is present for FigiInstrument, not even an explicit nil
func (o *UnderlyingSymbol) UnsetFigiInstrument() {
	o.FigiInstrument.Unset()
}

func (o UnderlyingSymbol) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !isNil(o.Exchange) {
		toSerialize["exchange"] = o.Exchange
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Currencies) {
		toSerialize["currencies"] = o.Currencies
	}
	if o.FigiCode.IsSet() {
		toSerialize["figi_code"] = o.FigiCode.Get()
	}
	if o.FigiInstrument.IsSet() {
		toSerialize["figi_instrument"] = o.FigiInstrument.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UnderlyingSymbol) UnmarshalJSON(bytes []byte) (err error) {
	varUnderlyingSymbol := _UnderlyingSymbol{}

	if err = json.Unmarshal(bytes, &varUnderlyingSymbol); err == nil {
		*o = UnderlyingSymbol(varUnderlyingSymbol)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "description")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "exchange")
		delete(additionalProperties, "type")
		delete(additionalProperties, "currencies")
		delete(additionalProperties, "figi_code")
		delete(additionalProperties, "figi_instrument")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUnderlyingSymbol struct {
	value *UnderlyingSymbol
	isSet bool
}

func (v NullableUnderlyingSymbol) Get() *UnderlyingSymbol {
	return v.value
}

func (v *NullableUnderlyingSymbol) Set(val *UnderlyingSymbol) {
	v.value = val
	v.isSet = true
}

func (v NullableUnderlyingSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableUnderlyingSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnderlyingSymbol(val *UnderlyingSymbol) *NullableUnderlyingSymbol {
	return &NullableUnderlyingSymbol{value: val, isSet: true}
}

func (v NullableUnderlyingSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnderlyingSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


