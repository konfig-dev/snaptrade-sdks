/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// PastValue struct for PastValue
type PastValue struct {
	// Date used to specify timeframe for a reporting call (in YYYY-MM-DD format)
	Date *string `json:"date,omitempty"`
	Value *float32 `json:"value,omitempty"`
	Currency *string `json:"currency,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PastValue PastValue

// NewPastValue instantiates a new PastValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPastValue() *PastValue {
	this := PastValue{}
	return &this
}

// NewPastValueWithDefaults instantiates a new PastValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPastValueWithDefaults() *PastValue {
	this := PastValue{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *PastValue) GetDate() string {
	if o == nil || isNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PastValue) GetDateOk() (*string, bool) {
	if o == nil || isNil(o.Date) {
    return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *PastValue) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *PastValue) SetDate(v string) {
	o.Date = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PastValue) GetValue() float32 {
	if o == nil || isNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PastValue) GetValueOk() (*float32, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PastValue) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *PastValue) SetValue(v float32) {
	o.Value = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PastValue) GetCurrency() string {
	if o == nil || isNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PastValue) GetCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PastValue) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PastValue) SetCurrency(v string) {
	o.Currency = &v
}

func (o PastValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PastValue) UnmarshalJSON(bytes []byte) (err error) {
	varPastValue := _PastValue{}

	if err = json.Unmarshal(bytes, &varPastValue); err == nil {
		*o = PastValue(varPastValue)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "date")
		delete(additionalProperties, "value")
		delete(additionalProperties, "currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePastValue struct {
	value *PastValue
	isSet bool
}

func (v NullablePastValue) Get() *PastValue {
	return v.value
}

func (v *NullablePastValue) Set(val *PastValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePastValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePastValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePastValue(val *PastValue) *NullablePastValue {
	return &NullablePastValue{value: val, isSet: true}
}

func (v NullablePastValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePastValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


