/* tslint:disable */
/* eslint-disable */
/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

The version of the OpenAPI document: 1.0.0
Contact: api@snaptrade.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Account } from '../models';
// @ts-ignore
import { AccountHoldings } from '../models';
// @ts-ignore
import { AccountHoldingsAccount } from '../models';
// @ts-ignore
import { AccountOrderRecord } from '../models';
// @ts-ignore
import { Balance } from '../models';
// @ts-ignore
import { Model400FailedRequestResponse } from '../models';
// @ts-ignore
import { Model403FailedRequestResponse } from '../models';
// @ts-ignore
import { Model500UnexpectedExceptionResponse } from '../models';
// @ts-ignore
import { Position } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountInformationApi - axios parameter creator
 * @export
 */
export const AccountInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all accounts for the user, plus balances, positions, and orders for each account.
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {string} [brokerageAuthorizations] Optional. Comma seperated list of authorization IDs (only use if filtering is needed on one or more authorizations).
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getAllUserHoldings: async (userId: string, userSecret: string, brokerageAuthorizations?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAllUserHoldings', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('getAllUserHoldings', 'userSecret', userSecret)
            const localVarPath = `/holdings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }

            if (brokerageAuthorizations !== undefined) {
                localVarQueryParameter['brokerage_authorizations'] = brokerageAuthorizations;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A list of account balances for the specified account (one per currency that the account holds).
         * @summary List account balances
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {string} accountId The ID of the account to get balances.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAccountBalance: async (userId: string, userSecret: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserAccountBalance', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('getUserAccountBalance', 'userSecret', userSecret)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getUserAccountBalance', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}/balances`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return details of a specific investment account
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {string} accountId The ID of the account to get detail of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAccountDetails: async (userId: string, userSecret: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserAccountDetails', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('getUserAccountDetails', 'userSecret', userSecret)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getUserAccountDetails', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all recent orders from a user\'s account.
         * @summary List account orders
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {string} accountId The ID of the account to get orders.
         * @param {'all' | 'open' | 'executed'} [state] defaults value is set to \&quot;all\&quot;
         * @param {number} [days] Number of days in the past to fetch the most recent orders. Defaults to the last 90 days if no value is passed in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAccountOrders: async (userId: string, userSecret: string, accountId: string, state?: 'all' | 'open' | 'executed', days?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserAccountOrders', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('getUserAccountOrders', 'userSecret', userSecret)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getUserAccountOrders', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}/orders`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List account positions
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {string} accountId The ID of the account to get positions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAccountPositions: async (userId: string, userSecret: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserAccountPositions', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('getUserAccountPositions', 'userSecret', userSecret)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getUserAccountPositions', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}/positions`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List balances, positions and orders for the specified account
         * @param {string} accountId The ID of the account to fetch holdings for.
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserHoldings: async (accountId: string, userId: string, userSecret: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getUserHoldings', 'accountId', accountId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserHoldings', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('getUserHoldings', 'userSecret', userSecret)
            const localVarPath = `/accounts/{accountId}/holdings`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List accounts
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAccounts: async (userId: string, userSecret: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserAccounts', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('listUserAccounts', 'userSecret', userSecret)
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update details of an investment account
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {string} accountId The ID of the account to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAccount: async (userId: string, userSecret: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserAccount', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('updateUserAccount', 'userSecret', userSecret)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('updateUserAccount', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountInformationApi - functional programming interface
 * @export
 */
export const AccountInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all accounts for the user, plus balances, positions, and orders for each account.
         * @param {AccountInformationApiGetAllUserHoldingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getAllUserHoldings(requestParameters: AccountInformationApiGetAllUserHoldingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountHoldings>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserHoldings(requestParameters.userId, requestParameters.userSecret, requestParameters.brokerageAuthorizations, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A list of account balances for the specified account (one per currency that the account holds).
         * @summary List account balances
         * @param {AccountInformationApiGetUserAccountBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAccountBalance(requestParameters: AccountInformationApiGetUserAccountBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Balance>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAccountBalance(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return details of a specific investment account
         * @param {AccountInformationApiGetUserAccountDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAccountDetails(requestParameters: AccountInformationApiGetUserAccountDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAccountDetails(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch all recent orders from a user\'s account.
         * @summary List account orders
         * @param {AccountInformationApiGetUserAccountOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAccountOrders(requestParameters: AccountInformationApiGetUserAccountOrdersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountOrderRecord>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAccountOrders(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, requestParameters.state, requestParameters.days, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List account positions
         * @param {AccountInformationApiGetUserAccountPositionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAccountPositions(requestParameters: AccountInformationApiGetUserAccountPositionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Position>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAccountPositions(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List balances, positions and orders for the specified account
         * @param {AccountInformationApiGetUserHoldingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserHoldings(requestParameters: AccountInformationApiGetUserHoldingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountHoldingsAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserHoldings(requestParameters.accountId, requestParameters.userId, requestParameters.userSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List accounts
         * @param {AccountInformationApiListUserAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserAccounts(requestParameters: AccountInformationApiListUserAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserAccounts(requestParameters.userId, requestParameters.userSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update details of an investment account
         * @param {AccountInformationApiUpdateUserAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserAccount(requestParameters: AccountInformationApiUpdateUserAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserAccount(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountInformationApi - factory interface
 * @export
 */
export const AccountInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountInformationApiFp(configuration)
    return {
        /**
         * 
         * @summary List all accounts for the user, plus balances, positions, and orders for each account.
         * @param {AccountInformationApiGetAllUserHoldingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getAllUserHoldings(requestParameters: AccountInformationApiGetAllUserHoldingsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AccountHoldings>> {
            return localVarFp.getAllUserHoldings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A list of account balances for the specified account (one per currency that the account holds).
         * @summary List account balances
         * @param {AccountInformationApiGetUserAccountBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAccountBalance(requestParameters: AccountInformationApiGetUserAccountBalanceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Balance>> {
            return localVarFp.getUserAccountBalance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return details of a specific investment account
         * @param {AccountInformationApiGetUserAccountDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAccountDetails(requestParameters: AccountInformationApiGetUserAccountDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.getUserAccountDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all recent orders from a user\'s account.
         * @summary List account orders
         * @param {AccountInformationApiGetUserAccountOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAccountOrders(requestParameters: AccountInformationApiGetUserAccountOrdersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AccountOrderRecord>> {
            return localVarFp.getUserAccountOrders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List account positions
         * @param {AccountInformationApiGetUserAccountPositionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAccountPositions(requestParameters: AccountInformationApiGetUserAccountPositionsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Position>> {
            return localVarFp.getUserAccountPositions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List balances, positions and orders for the specified account
         * @param {AccountInformationApiGetUserHoldingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserHoldings(requestParameters: AccountInformationApiGetUserHoldingsRequest, options?: AxiosRequestConfig): AxiosPromise<AccountHoldingsAccount> {
            return localVarFp.getUserHoldings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List accounts
         * @param {AccountInformationApiListUserAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserAccounts(requestParameters: AccountInformationApiListUserAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Account>> {
            return localVarFp.listUserAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update details of an investment account
         * @param {AccountInformationApiUpdateUserAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAccount(requestParameters: AccountInformationApiUpdateUserAccountRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Account>> {
            return localVarFp.updateUserAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllUserHoldings operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiGetAllUserHoldingsRequest
 */
export type AccountInformationApiGetAllUserHoldingsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiGetAllUserHoldings
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiGetAllUserHoldings
    */
    readonly userSecret: string
    
    /**
    * Optional. Comma seperated list of authorization IDs (only use if filtering is needed on one or more authorizations).
    * @type {string}
    * @memberof AccountInformationApiGetAllUserHoldings
    */
    readonly brokerageAuthorizations?: string
    
}

/**
 * Request parameters for getUserAccountBalance operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiGetUserAccountBalanceRequest
 */
export type AccountInformationApiGetUserAccountBalanceRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiGetUserAccountBalance
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiGetUserAccountBalance
    */
    readonly userSecret: string
    
    /**
    * The ID of the account to get balances.
    * @type {string}
    * @memberof AccountInformationApiGetUserAccountBalance
    */
    readonly accountId: string
    
}

/**
 * Request parameters for getUserAccountDetails operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiGetUserAccountDetailsRequest
 */
export type AccountInformationApiGetUserAccountDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiGetUserAccountDetails
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiGetUserAccountDetails
    */
    readonly userSecret: string
    
    /**
    * The ID of the account to get detail of.
    * @type {string}
    * @memberof AccountInformationApiGetUserAccountDetails
    */
    readonly accountId: string
    
}

/**
 * Request parameters for getUserAccountOrders operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiGetUserAccountOrdersRequest
 */
export type AccountInformationApiGetUserAccountOrdersRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiGetUserAccountOrders
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiGetUserAccountOrders
    */
    readonly userSecret: string
    
    /**
    * The ID of the account to get orders.
    * @type {string}
    * @memberof AccountInformationApiGetUserAccountOrders
    */
    readonly accountId: string
    
    /**
    * defaults value is set to \"all\"
    * @type {'all' | 'open' | 'executed'}
    * @memberof AccountInformationApiGetUserAccountOrders
    */
    readonly state?: 'all' | 'open' | 'executed'
    
    /**
    * Number of days in the past to fetch the most recent orders. Defaults to the last 90 days if no value is passed in.
    * @type {number}
    * @memberof AccountInformationApiGetUserAccountOrders
    */
    readonly days?: number
    
}

/**
 * Request parameters for getUserAccountPositions operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiGetUserAccountPositionsRequest
 */
export type AccountInformationApiGetUserAccountPositionsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiGetUserAccountPositions
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiGetUserAccountPositions
    */
    readonly userSecret: string
    
    /**
    * The ID of the account to get positions.
    * @type {string}
    * @memberof AccountInformationApiGetUserAccountPositions
    */
    readonly accountId: string
    
}

/**
 * Request parameters for getUserHoldings operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiGetUserHoldingsRequest
 */
export type AccountInformationApiGetUserHoldingsRequest = {
    
    /**
    * The ID of the account to fetch holdings for.
    * @type {string}
    * @memberof AccountInformationApiGetUserHoldings
    */
    readonly accountId: string
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiGetUserHoldings
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiGetUserHoldings
    */
    readonly userSecret: string
    
}

/**
 * Request parameters for listUserAccounts operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiListUserAccountsRequest
 */
export type AccountInformationApiListUserAccountsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiListUserAccounts
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiListUserAccounts
    */
    readonly userSecret: string
    
}

/**
 * Request parameters for updateUserAccount operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiUpdateUserAccountRequest
 */
export type AccountInformationApiUpdateUserAccountRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiUpdateUserAccount
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiUpdateUserAccount
    */
    readonly userSecret: string
    
    /**
    * The ID of the account to update.
    * @type {string}
    * @memberof AccountInformationApiUpdateUserAccount
    */
    readonly accountId: string
    
}

/**
 * AccountInformationApiGenerated - object-oriented interface
 * @export
 * @class AccountInformationApiGenerated
 * @extends {BaseAPI}
 */
export class AccountInformationApiGenerated extends BaseAPI {
    /**
     * 
     * @summary List all accounts for the user, plus balances, positions, and orders for each account.
     * @param {AccountInformationApiGetAllUserHoldingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public getAllUserHoldings(requestParameters: AccountInformationApiGetAllUserHoldingsRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).getAllUserHoldings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A list of account balances for the specified account (one per currency that the account holds).
     * @summary List account balances
     * @param {AccountInformationApiGetUserAccountBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public getUserAccountBalance(requestParameters: AccountInformationApiGetUserAccountBalanceRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).getUserAccountBalance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return details of a specific investment account
     * @param {AccountInformationApiGetUserAccountDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public getUserAccountDetails(requestParameters: AccountInformationApiGetUserAccountDetailsRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).getUserAccountDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch all recent orders from a user\'s account.
     * @summary List account orders
     * @param {AccountInformationApiGetUserAccountOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public getUserAccountOrders(requestParameters: AccountInformationApiGetUserAccountOrdersRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).getUserAccountOrders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List account positions
     * @param {AccountInformationApiGetUserAccountPositionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public getUserAccountPositions(requestParameters: AccountInformationApiGetUserAccountPositionsRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).getUserAccountPositions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List balances, positions and orders for the specified account
     * @param {AccountInformationApiGetUserHoldingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public getUserHoldings(requestParameters: AccountInformationApiGetUserHoldingsRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).getUserHoldings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List accounts
     * @param {AccountInformationApiListUserAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public listUserAccounts(requestParameters: AccountInformationApiListUserAccountsRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).listUserAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update details of an investment account
     * @param {AccountInformationApiUpdateUserAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public updateUserAccount(requestParameters: AccountInformationApiUpdateUserAccountRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).updateUserAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
