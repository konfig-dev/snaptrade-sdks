/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Currency;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PortfolioGroupSettings
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PortfolioGroupSettings {
  public static final String SERIALIZED_NAME_BUY_ONLY = "buyOnly";
  @SerializedName(SERIALIZED_NAME_BUY_ONLY)
  private Boolean buyOnly;

  public static final String SERIALIZED_NAME_CASH_OPTIMIZER = "cash_optimizer";
  @SerializedName(SERIALIZED_NAME_CASH_OPTIMIZER)
  private Boolean cashOptimizer;

  public static final String SERIALIZED_NAME_NOTIFY_FREQUENCY = "notifyFrequency";
  @SerializedName(SERIALIZED_NAME_NOTIFY_FREQUENCY)
  private String notifyFrequency;

  public static final String SERIALIZED_NAME_DRIFT_THRESHOLD = "driftThreshold";
  @SerializedName(SERIALIZED_NAME_DRIFT_THRESHOLD)
  private Double driftThreshold;

  public static final String SERIALIZED_NAME_PREFERRED_CURRENCY = "preferred_currency";
  @SerializedName(SERIALIZED_NAME_PREFERRED_CURRENCY)
  private Currency preferredCurrency;

  public PortfolioGroupSettings() {
  }

  public PortfolioGroupSettings buyOnly(Boolean buyOnly) {
    
    
    
    
    this.buyOnly = buyOnly;
    return this;
  }

   /**
   * Get buyOnly
   * @return buyOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getBuyOnly() {
    return buyOnly;
  }


  public void setBuyOnly(Boolean buyOnly) {
    
    
    
    this.buyOnly = buyOnly;
  }


  public PortfolioGroupSettings cashOptimizer(Boolean cashOptimizer) {
    
    
    
    
    this.cashOptimizer = cashOptimizer;
    return this;
  }

   /**
   * Get cashOptimizer
   * @return cashOptimizer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getCashOptimizer() {
    return cashOptimizer;
  }


  public void setCashOptimizer(Boolean cashOptimizer) {
    
    
    
    this.cashOptimizer = cashOptimizer;
  }


  public PortfolioGroupSettings notifyFrequency(String notifyFrequency) {
    
    
    
    
    this.notifyFrequency = notifyFrequency;
    return this;
  }

   /**
   * Get notifyFrequency
   * @return notifyFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7 00:00:00", value = "")

  public String getNotifyFrequency() {
    return notifyFrequency;
  }


  public void setNotifyFrequency(String notifyFrequency) {
    
    
    
    this.notifyFrequency = notifyFrequency;
  }


  public PortfolioGroupSettings driftThreshold(Double driftThreshold) {
    if (driftThreshold != null && driftThreshold < 0) {
      throw new IllegalArgumentException("Invalid value for driftThreshold. Must be greater than or equal to 0.");
    }
    if (driftThreshold != null && driftThreshold > 100) {
      throw new IllegalArgumentException("Invalid value for driftThreshold. Must be less than or equal to 100.");
    }
    
    
    this.driftThreshold = driftThreshold;
    return this;
  }

  public PortfolioGroupSettings driftThreshold(Integer driftThreshold) {
    if (driftThreshold != null && driftThreshold < 0) {
      throw new IllegalArgumentException("Invalid value for driftThreshold. Must be greater than or equal to 0.");
    }
    if (driftThreshold != null && driftThreshold > 100) {
      throw new IllegalArgumentException("Invalid value for driftThreshold. Must be less than or equal to 100.");
    }
    
    
    this.driftThreshold = driftThreshold.doubleValue();
    return this;
  }

   /**
   * Get driftThreshold
   * minimum: 0
   * maximum: 100
   * @return driftThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "90", value = "")

  public Double getDriftThreshold() {
    return driftThreshold;
  }


  public void setDriftThreshold(Double driftThreshold) {
    if (driftThreshold != null && driftThreshold < 0) {
      throw new IllegalArgumentException("Invalid value for driftThreshold. Must be greater than or equal to 0.");
    }
    if (driftThreshold != null && driftThreshold > 100) {
      throw new IllegalArgumentException("Invalid value for driftThreshold. Must be less than or equal to 100.");
    }
    
    this.driftThreshold = driftThreshold;
  }


  public PortfolioGroupSettings preferredCurrency(Currency preferredCurrency) {
    
    
    
    
    this.preferredCurrency = preferredCurrency;
    return this;
  }

   /**
   * Get preferredCurrency
   * @return preferredCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getPreferredCurrency() {
    return preferredCurrency;
  }


  public void setPreferredCurrency(Currency preferredCurrency) {
    
    
    
    this.preferredCurrency = preferredCurrency;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PortfolioGroupSettings instance itself
   */
  public PortfolioGroupSettings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortfolioGroupSettings portfolioGroupSettings = (PortfolioGroupSettings) o;
    return Objects.equals(this.buyOnly, portfolioGroupSettings.buyOnly) &&
        Objects.equals(this.cashOptimizer, portfolioGroupSettings.cashOptimizer) &&
        Objects.equals(this.notifyFrequency, portfolioGroupSettings.notifyFrequency) &&
        Objects.equals(this.driftThreshold, portfolioGroupSettings.driftThreshold) &&
        Objects.equals(this.preferredCurrency, portfolioGroupSettings.preferredCurrency)&&
        Objects.equals(this.additionalProperties, portfolioGroupSettings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buyOnly, cashOptimizer, notifyFrequency, driftThreshold, preferredCurrency, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioGroupSettings {\n");
    sb.append("    buyOnly: ").append(toIndentedString(buyOnly)).append("\n");
    sb.append("    cashOptimizer: ").append(toIndentedString(cashOptimizer)).append("\n");
    sb.append("    notifyFrequency: ").append(toIndentedString(notifyFrequency)).append("\n");
    sb.append("    driftThreshold: ").append(toIndentedString(driftThreshold)).append("\n");
    sb.append("    preferredCurrency: ").append(toIndentedString(preferredCurrency)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buyOnly");
    openapiFields.add("cash_optimizer");
    openapiFields.add("notifyFrequency");
    openapiFields.add("driftThreshold");
    openapiFields.add("preferred_currency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PortfolioGroupSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PortfolioGroupSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PortfolioGroupSettings is not found in the empty JSON string", PortfolioGroupSettings.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("notifyFrequency") != null && !jsonObj.get("notifyFrequency").isJsonNull()) && !jsonObj.get("notifyFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifyFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifyFrequency").toString()));
      }
      // validate the optional field `preferred_currency`
      if (jsonObj.get("preferred_currency") != null && !jsonObj.get("preferred_currency").isJsonNull()) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("preferred_currency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PortfolioGroupSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PortfolioGroupSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PortfolioGroupSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PortfolioGroupSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<PortfolioGroupSettings>() {
           @Override
           public void write(JsonWriter out, PortfolioGroupSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PortfolioGroupSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PortfolioGroupSettings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PortfolioGroupSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PortfolioGroupSettings
  * @throws IOException if the JSON string is invalid with respect to PortfolioGroupSettings
  */
  public static PortfolioGroupSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PortfolioGroupSettings.class);
  }

 /**
  * Convert an instance of PortfolioGroupSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

