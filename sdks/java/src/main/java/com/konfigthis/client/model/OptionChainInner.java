/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OptionChainInnerChainPerRootInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OptionChainInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OptionChainInner {
  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private String expiryDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LISTING_EXCHANGE = "listingExchange";
  @SerializedName(SERIALIZED_NAME_LISTING_EXCHANGE)
  private String listingExchange;

  public static final String SERIALIZED_NAME_OPTION_EXERCISE_TYPE = "optionExerciseType";
  @SerializedName(SERIALIZED_NAME_OPTION_EXERCISE_TYPE)
  private String optionExerciseType;

  public static final String SERIALIZED_NAME_CHAIN_PER_ROOT = "chainPerRoot";
  @SerializedName(SERIALIZED_NAME_CHAIN_PER_ROOT)
  private List<OptionChainInnerChainPerRootInner> chainPerRoot = null;

  public OptionChainInner() {
  }

  public OptionChainInner expiryDate(String expiryDate) {
    
    
    
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Get expiryDate
   * @return expiryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-07-08T04:00:00.000Z", value = "")

  public String getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(String expiryDate) {
    
    
    
    this.expiryDate = expiryDate;
  }


  public OptionChainInner description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "APPLE INC", value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public OptionChainInner listingExchange(String listingExchange) {
    
    
    
    
    this.listingExchange = listingExchange;
    return this;
  }

   /**
   * Get listingExchange
   * @return listingExchange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OPRA", value = "")

  public String getListingExchange() {
    return listingExchange;
  }


  public void setListingExchange(String listingExchange) {
    
    
    
    this.listingExchange = listingExchange;
  }


  public OptionChainInner optionExerciseType(String optionExerciseType) {
    
    
    
    
    this.optionExerciseType = optionExerciseType;
    return this;
  }

   /**
   * Get optionExerciseType
   * @return optionExerciseType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "American", value = "")

  public String getOptionExerciseType() {
    return optionExerciseType;
  }


  public void setOptionExerciseType(String optionExerciseType) {
    
    
    
    this.optionExerciseType = optionExerciseType;
  }


  public OptionChainInner chainPerRoot(List<OptionChainInnerChainPerRootInner> chainPerRoot) {
    
    
    
    
    this.chainPerRoot = chainPerRoot;
    return this;
  }

  public OptionChainInner addChainPerRootItem(OptionChainInnerChainPerRootInner chainPerRootItem) {
    if (this.chainPerRoot == null) {
      this.chainPerRoot = new ArrayList<>();
    }
    this.chainPerRoot.add(chainPerRootItem);
    return this;
  }

   /**
   * Get chainPerRoot
   * @return chainPerRoot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OptionChainInnerChainPerRootInner> getChainPerRoot() {
    return chainPerRoot;
  }


  public void setChainPerRoot(List<OptionChainInnerChainPerRootInner> chainPerRoot) {
    
    
    
    this.chainPerRoot = chainPerRoot;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OptionChainInner instance itself
   */
  public OptionChainInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptionChainInner optionChainInner = (OptionChainInner) o;
    return Objects.equals(this.expiryDate, optionChainInner.expiryDate) &&
        Objects.equals(this.description, optionChainInner.description) &&
        Objects.equals(this.listingExchange, optionChainInner.listingExchange) &&
        Objects.equals(this.optionExerciseType, optionChainInner.optionExerciseType) &&
        Objects.equals(this.chainPerRoot, optionChainInner.chainPerRoot)&&
        Objects.equals(this.additionalProperties, optionChainInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiryDate, description, listingExchange, optionExerciseType, chainPerRoot, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptionChainInner {\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    listingExchange: ").append(toIndentedString(listingExchange)).append("\n");
    sb.append("    optionExerciseType: ").append(toIndentedString(optionExerciseType)).append("\n");
    sb.append("    chainPerRoot: ").append(toIndentedString(chainPerRoot)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expiryDate");
    openapiFields.add("description");
    openapiFields.add("listingExchange");
    openapiFields.add("optionExerciseType");
    openapiFields.add("chainPerRoot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OptionChainInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OptionChainInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OptionChainInner is not found in the empty JSON string", OptionChainInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("expiryDate") != null && !jsonObj.get("expiryDate").isJsonNull()) && !jsonObj.get("expiryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryDate").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("listingExchange") != null && !jsonObj.get("listingExchange").isJsonNull()) && !jsonObj.get("listingExchange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listingExchange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listingExchange").toString()));
      }
      if ((jsonObj.get("optionExerciseType") != null && !jsonObj.get("optionExerciseType").isJsonNull()) && !jsonObj.get("optionExerciseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionExerciseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionExerciseType").toString()));
      }
      if (jsonObj.get("chainPerRoot") != null && !jsonObj.get("chainPerRoot").isJsonNull()) {
        JsonArray jsonArraychainPerRoot = jsonObj.getAsJsonArray("chainPerRoot");
        if (jsonArraychainPerRoot != null) {
          // ensure the json data is an array
          if (!jsonObj.get("chainPerRoot").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `chainPerRoot` to be an array in the JSON string but got `%s`", jsonObj.get("chainPerRoot").toString()));
          }

          // validate the optional field `chainPerRoot` (array)
          for (int i = 0; i < jsonArraychainPerRoot.size(); i++) {
            OptionChainInnerChainPerRootInner.validateJsonObject(jsonArraychainPerRoot.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OptionChainInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OptionChainInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OptionChainInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OptionChainInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OptionChainInner>() {
           @Override
           public void write(JsonWriter out, OptionChainInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OptionChainInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OptionChainInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OptionChainInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OptionChainInner
  * @throws IOException if the JSON string is invalid with respect to OptionChainInner
  */
  public static OptionChainInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OptionChainInner.class);
  }

 /**
  * Convert an instance of OptionChainInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

